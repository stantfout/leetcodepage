{"index":{"version":"0.5.12","fields":[{"name":"title","boost":10},{"name":"keywords","boost":15},{"name":"body","boost":1}],"ref":"url","documentStore":{"store":{"./":["从3月初开始刷leetcode，刷了有200+题，但一直没有总结题解。有时候刷题的过程中有些思想明明以前用到过，但就是想不起来，看来还是要总结题解的。","写题解的主要目的是方便自己以后再次查看和复习，所以题解的只是以自己能理解这个题为标准，如果有幸能帮助到你，那么就更好了。","菜鸡刷题日记"],"part1/":["1","100","leetcod"],"part1/1. 两数之和.html":["(int","+","0;","1.","2.","=","==","for(int","hashmap<>();","int","int[]","map","n","new","num","nums,","nums.length;","nums[i]即可。如果存在，直接返回，不存在则往hash表中put进nums[i]，表示之前已经出现过值为nums[i]的数。","nums[j]","public","target)","target。但时间复杂度为o(n2)。","target，请你在该数组中找出和为目标值的那","twosum(int[]","{","两个","两数之和","但我们可以通过建立hash表，当读取到一个数nums[i]时，我们判断hash表里是否存在target","你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。","和一个目标值","思路","整数，并返回他们的数组下标。","最简单的想法是通过两个for循环遍历数组，判断nums[i]","给定一个整数数组","题目描述","题目描述2."],"part1/2. 两数相加.html":["!=","%","(l1","(l2","+=","/","0","0;","1);","1.","10);","10;","2.",":","=","==","?","addtwonumbers(listnod","flag","flag;","head","head.next;","head;","int","l1","l1,","l1.next;","l1.val;","l2","l2)","l2.next;","l2.val;","listnod","listnode(","listnode(flag);","listnode(v","new","null","null)","pre","pre.next","pre.next;","public","return","val","{","||","}","一位","两数相加","之外，这两个数都不会以","基本的链表操作，遍历链表，处理好进位问题就好了。注意循环的退出条件，以及最后也要对flag进行判断。","如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。","开头。","思路","您可以假设除了数字","数字。","的方式存储的，并且它们的每个节点只能存储","的链表用来表示两个非负的整数。其中，它们各自的位数是按照","给出两个","逆序","非空","题目描述","题目描述2."],"part1/3. 无重复字符的最长子串.html":["(j","(s.length()","0)","0;","1.","1;","2.","3.","=","==","count","hash","hash[s.charat(i)]","int","int[128];","int[]","j","lengthoflongestsubstring(str","new","public","return","s)","s.charat(j)为止。返回这个过程中滑动窗口的最大长度即为答案。","{","}","判断是否存在重复字符可以用hash表的方式判断，当前字符是否在hash表中出现过，同时当i往前移动时也要更新好hash表即可。因为i，j都不会回退，最大为n，算法时间复杂度为o(n)。","思路","无重复字符的最长子串","最长子串","的长度。","给定一个字符串，请你找出其中不含有重复字符的","维护一个滑动窗口[i,j]，如果[i,j]中不存在重复字符，则j++，如果存在重复字符，则重复字符一定为s.charat(j),则i++一直到s.charat(i)","题目描述","题目描述2."],"part1/4. 寻找两个正序数组的中位数.html":["(getkth(nums1,","(index1","(index2","(n","*","+","/","0,","0.5;","1","1)","1));","1,","1,end1,nums2,start2,end2,k","1,end2,k","1.","1;","2","2)","2.","2;","4.",":","=",">","?","doubl","end1","end1,","end2","end2,","findmediansortedarrays(int[]","getkth(int[]","getkth(nums1,","getkth(nums1,index1","getkth(nums1,start1,end1,nums2,index2","getkth(nums2,start2,end2,nums1,start1,end1,k);","if(len1","if(nums1[index1]","index2","int","int[]","k","k)","left","left)","len1","len2","len2)","m","n","n))。","nums1","nums1,","nums1.length;","nums2","nums2)","nums2,","nums2.length;","nums2[index2])","nums2。","o(log(m","privat","public","return","right","right))","start1","start1,","start2","start2,","{","}","不会同时为空。","你可以假设","和","寻找两个正序数组的中位数","思路","的正序（从小到大）数组","给定两个大小为","请你找出这两个正序数组的中位数，并且要求算法的时间复杂度为","这个题目...作为leetcode的第4个题目，这难度是要劝退刚刚刷题的萌新(我)啊！这题以后有时间再补题解吧，就贴个代码先。","题目描述","题目描述2."],"part1/5. 最长回文子串.html":["\"\";","&&","(n","(s.length()","+","0","1)","1,","1.","1000。","2.","2.1.","2.2.","5.",":","=","?","dp(i","dp(i,j)表示字符串s(i,j)是否为回文串。","int","j","j)","longestpalindrome(str","maxlength","n","public","s","s)","s.length();","str.substring(i","string","s，找到","{","}","中心扩展法","中最长的回文子串。你可以假设","动态规划","动态规划2.2.","如果s[i]和s[j]不相等的情况下，dp(i,j)一定为false；","如果相等，dp(i,j)","思路","思路2.1.","最长回文子串","枚举每一个以s[i]或者s[i]和s[i+1]为中心的最长回文字符串，枚举的次数为n，求最长回文字符串的时间复杂度为o(n)，所以这个写法的时间复杂度为o(n2)","的最大长度为","给定一个字符串","题目描述","题目描述2."],"part1/6. Z 字形变换.html":["\"leetcodeishiring\"","(int","(numrow","0;","1)","1.","2.","3","6.","=","==","c","convert(str","d","e","g","h","int","l","length","n","new","numrows)","numrows);","o","public","r","return","s","s,","s.length();","s;","sb","string","stringbuild","stringbuilder();","t","z","{","}","之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：\"lciretoesiigedhn\"。","字形变换","字形排列。","将一个给定字符串根据给定的行数，以从上往下、从左到右进行","思路","找规律，根据每行的字符的对应关系就可以简单的推出来。","时，排列如下：","比如输入字符串为","行数为","请你实现这个将字符串进行指定行数变换的函数：","题目描述","题目描述2."],"part1/7. 整数反转.html":["!=","%","&&","(re","(x","/","/=","0)","0;","0。","1.","10","10;","1]。请根据这个假设，如果反转后整数溢出那么就返回","2.","231","32","7))","7.","=","==",">","[−231,","int","integer.max_valu","public","re","return","reverse(int","temp","temp;","x","x)","{","||","}","−","位的有符号整数，你需要将这个整数中每位上的数字进行反转。","位的有符号整数，则其数值范围为","假设我们的环境只能存储得下","思路","整数反转","注意:","注意处理好int越界就好了。","给出一个","题目描述","题目描述2."],"part1/21. 合并两个有序链表.html":["!=","&&","(l1","(l1.val","1","1);","1.","2.","21.",":","=","==",">",">1",">2",">3",">4",">4,","?","l1","l1,","l1.next;","l1;","l2","l2)","l2.next;","l2.val)","l2;","listnod","listnode(","mergetwolists(listnod","new","now","now.next","now.next;","now;","null","null)","public","re","res.next;","return","{","}","合并两个有序链表","基础的链表题目，看代码：","将两个升序链表合并为一个新的升序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。","思路","示例：","输入：1","输出：1","题目描述","题目描述2."],"part1/25. K 个一组翻转链表.html":["!=","&&","(!stack.isempty())","(head","(int","(k","(true)","//pre用于完成对反转后链表的连接，默认先指向head，考虑整个链表都不反转的情况","//res用于最后返回","//开始找k个节点后的尾节点","//特判","0","0)","1);","1.","1;","2","2.","25.","3",";","=","==",">1",">2",">3",">4",">5","an","end","end;","head,","head;","int","k","k)","k;","listnod","listnode(","new","node","node.next","node.next;","node;","null)","null;","pre","pre.next","pre.next;","pre;","public","re","ret","ret;","return","reversekgroup(listnod","reversekgroup(pre,ans);","stack","stack.add(pre);","stack.pop();","stack<>();","start","{","}","上面的代码中主要是在反转字符串的时候借助了栈，使用了额外空间。","个一组翻转链表","个节点一组进行翻转，请你返回翻转后的链表。","你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。","你的算法只能使用常数的额外空间。","如果不借助额外空间，我们需要单独实现一个函数，能够以o(1)的空间复杂度完成反转，这个可以通过迭代的方法实现，可以参考leetcode206题，最后反转完字符串后返回新链表的头部，代码如下：","如果不考虑空间复杂度，则可以利用栈+递归轻松完成反转:","如果节点总数不是","当","思路","时，应当返回:","是一个正整数，它的值小于或等于链表的长度。","的整数倍，那么请将最后剩余的节点保持原有顺序。","示例：","给你一个链表，每","给你这个链表：1","说明：","题目描述","题目描述2."],"part1/84. 柱状图中最大的矩形.html":["(!stack.isempty())","(i","(int","(n","*","//出栈","//建立栈，java官方推荐的是使用双端队列作为栈来使用","//当栈不为空时，把栈顶元素出栈，进行计算","//特判","//计算面积时要注意确定好区间的范围","0)","0;","1","1));","1.","10","1，给定的高度为","2.","2.1.","2.2.","84.","=","==","[2,1,5,6,2,3]","[2,1,5,6,2,3]。","arr)","arr.length;","arr[stack.getlast()])","arr[top]","dequ","i);","int","largestrectanglearea(int[]","linkedlist<>();","math.max(max,","max","max;","n","n);","new","public","return","stack","stack.addlast(i++);","stack.getlast()","stack.getlast()));","stack.polllast();","top","{","}","。","个单位。","个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为","单调栈","右边第一个小于它的位置是即将入栈的元素i。当然入栈元素i也可能等于栈顶元素top，但这对最终结果是没有影响的，因为i位置求得的结果一定大于top位置求得都结果。","否则把栈顶元素出栈。","图中阴影部分为所能勾勒出的最大矩形面积，其面积为","如果栈为空或者要入栈的元素i大于栈顶元素，就直接入栈","左边第一个小于它的位置一定是它的下一个元素(也就是把当前栈顶出栈后的新栈顶元素)。","思路","思路2.1.","时间复杂度为o(n)。","枚举","枚举2.2.","枚举思路里，最重要的目的是获得第i个位置左边第一个小于它的位置left和右边第一个小于它的位置right，那么为什么利用单调栈就可以求得这两个位置呢？","枚举数组每一个元素，从该元素向左右两边扩展，找到左右两边第一个小于它的数，最后计算面积即可。时间复杂度o(n2)","柱状图中最大的矩形","柱状图的示例，其中每个柱子的宽度为","求在该柱状图中，能够勾勒出来的矩形的最大面积。","示例:","给定","输入:","输出:","这样我们就能找到栈顶位置的对于枚举的结果了，最后栈可能不是为空，再把栈里的元素依次出栈，计算面积即可。","通过这种规则，栈里的元素一定是递增的。","那么，对于要出栈的栈顶元素top：","题目描述","题目描述2.","首先看我们是怎么维护的单调栈："],"part2/":["101","200","leetcod"],"part2/101. 对称二叉树.html":["!=","&&","(!queue.isempty())","(left","(root","/","1","1.","101.","2","2.","2.1.","2.2.","3","4","=","==","[1,2,2,3,4,4,3]","[1,2,2,null,3,null,3]","\\","boolean","continue;","false;","if(root","issymmetric(treenod","judge(left.left,right.right)","judge(left.right,","judge(root.left,","judge(treenod","left","left,","left.val","linkedlist<>();","new","null","null)","privat","public","queue","queue.add(left.left);","queue.add(left.right);","queue.add(right.left);","queue.add(right.right);","queue.add(root.left);","queue.add(root.right);","queue.poll();","return","right","right)","right.left);","right.val","right.val)","root)","root.right);","treenod","true;","{","||","}","但是下面这个","你可以运用递归和迭代两种方法解决这个问题吗？","例如，二叉树","则不是镜像对称的:","在判断左右子树对称的时候，如果当前左右节点相等的话，我们还需要判断左子树的左子树和右子树的右子树是否对称，以及左子树的右子树和右子树的左子树是否对称。","对称二叉树","思路","思路2.1.","思路是一样的，注意好进入队列的顺序。","我们要确保二叉树镜像对称，要确保根节点的左右子树是对称的。","是对称的。","给定一个二叉树，检查它是否是镜像对称的。","进阶：","迭代","递归","递归2.2.","题目描述","题目描述2."],"part2/125. 验证回文串.html":["(i","0;","1.","125.","1;","2.","=","boolean","int","ispalindrome(str","j","n","public","s)","s.length();","{","思路","思路和判断回文串的思路一样，双指针从字符串两边向里判断，注意处理大小写字母问题和忽略非字母和数字字符","给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。","说明：本题中，我们将空字符串定义为有效的回文串。","题目描述","题目描述2.","验证回文串"],"part2/136. 只出现一次的数字.html":["(int","0;","1.","136.","2.","=","int","nums)","public","re","singlenumber(int[]","{","你可以不使用额外空间来实现吗？","你的算法应该具有线性时间复杂度。","利用数组的特性，异或操作解决这个问题。","只出现一次的数字","思路","给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。","说明：","题目描述","题目描述2."],"part2/146. LRU缓存机制.html":["(!map.containskey(key))","(key)","(list.siz","(list.size()","(map.containskey(key))","(最近最少使用)","0.75f,","0;","1);","1.","146.","1;","1。","2.",";","=",">",">=","@overrid","addfirst(nod","boolean","capacity)","capacity;","class","eldest)","extend","get(int","get(key)","get操作如果要达到o(1)的时间复杂度还是比较简单的，只需要通过map数据结构存储，可以通过查找key在o(1)时间复杂度里找到对应的value。","hashmap<>();","head","head.next","head.next.prev","head.next;","head;","int","key)","key,","key;","linkedhashmap{","linkedlist","linkedlist<>();","list","list.addfirst(node);","list.remove(node);","list;","lru","lrucach","lrucache(int","lru缓存机制","map","map.get(key);","map.put(key,","map.put(key,node);","map.remove(list.removelast().key);","map;","new","next","next.prev","next;","node","node()","node();","node(int","node(key,","node)","node);","node.next","node.next;","node.prev","node.prev;","node.valu","node.value;","node;","nodelist","nodelist()","nodelist();","null;","o(1)","prev","prev,","prev.next","prev;","privat","protect","public","put","put(int","put(key,","put操作面临的主要问题是，如果只使用map数据结构存储，当缓存容量达到上限后，不容易删除最久未使用的数据。如果此时能维护一个类似于优先队列的数据结构，把队列中最久未使用的数据删除就比较容易了。","remove(nod","remove(node);","removeeldestentry(map.entri","removelast()","return","size","size()","size++;","size;","super(capacity,","super.getordefault(key,","super.put(key,","tail","tail.prev","tail.prev;","tail;","this.capac","this.key","this.valu","true);","value)","value);","value;","void","{","}","。","但是啊，这样写在leetcode的执行用时还是比较大的...后来知道了，java中有一个linkedhashmap的数据结构可以很方便的解决这个问题。linkedhashmap里面的结点自带一个前驱指针和后继指针，维护了一个链表。","你是否可以在","写入数据","和","如果密钥","如果密钥已经存在，则变更其数据值；如果密钥不存在，则插入该组「密钥/数据值」。当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。","存在于缓存中，则获取密钥的值（总是正数），否则返回","思路","所以最后采用的是hashmap+linkedlist来存储数据，put操作时，把数据存储到hashmap和linkedlist中，其中linkedlist存储到链表头部，如果要删除最久未使用数据时，则删除链表尾部的数据即可。get操作直接从hashmap中取数据，然后更新链表中对应数据的顺序即可。","时间复杂度内完成这两种操作？","最后，还有一个参考了大佬的代码后手写的lru算法...直接看代码吧","缓存机制。它应该支持以下操作：","获取数据","运用你所掌握的数据结构，设计和实现一个","进阶:","题目描述","题目描述2."],"part2/147. 对链表进行插入排序.html":["!=","(head","(head.val","(now","(tail.val","1.","147.","2.","=","==",">","head","head)","head;","insertionsortlist(listnod","listnod","now","now.next","now.next;","now.val)","now;","null)","null;","public","return","tail","tail.next","tail.next;","{","}","剩余的情况就遍历链表，找到要插入的位置进行插入就好了。","如果头节点比当前节点大，就说明当前节点要插入到头节点之前，那么最后要更新头节点。","如果尾节点比当前节点小，说明当前节点不需要进行插入。","对链表进行插入排序","对链表进行插入排序。","思路","插入排序是迭代的，每次只移动一个元素，直到所有元素可以形成一个有序的输出列表。","插入排序的动画演示如上。从第一个元素开始，该链表可以被认为已经部分排序（用黑色表示）。","插入排序算法：","插入时从头部判断，有两个特殊情况：","每次迭代中，插入排序只从输入数据中移除一个待排序的元素，找到它在序列中适当的位置，并将其插入。","每次迭代时，从输入数据中移除一个元素（用红色表示），并原地将其插入到已排好序的链表中。","重复直到所有输入数据插入完为止。","题目描述","题目描述2."],"part2/150. 逆波兰表达式求值.html":["\"","\")","\"*\"","\"+\"","\"/\"","(judge(token))","(string","(token)","*","*,","+","+,",",","/","0","0;","1.","150.","2.",":","=","a,","b","b,","b;","boolean","case","dequ","evalrpn(string[]","int","judge(str","linkedlist<>();","new","privat","public","return","solve(int","stack","stack.addlast(integer.parseint(token));","stack.addlast(solve(a,b,token));","stack.polllast();","str)","str.equals(\"","str.equals(\"*\")","str.equals(\"+\")","str.equals(\"/\");","string","switch","token","token)","tokens)","{","||","}","。每个运算对象可以是整数，也可以是另一个逆波兰表达式。","思路","整数除法只保留整数部分。","有效的运算符包括","根据逆波兰表示法，求表达式的值。","的情况。","碰到符号就出栈两个数，计算完结果后入栈，否则为数字就入栈。","给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为","说明：","逆波兰表达式求值","题目描述","题目描述2."],"part2/152. 乘积最大子数组.html":["(int","*","//dp[i][0]记录大于0的最大子数组，如果没有记录为0","//dp[i][1]记录小于0的最小子数组，如果没有记录为0","//更新max","0","0)","0;","1.","152.","1][0]);","1][1]);","1]有关，所以我们可以对dp数组进行优化，把空间复杂度降低","1结尾的大于0的乘积最大子数组即可。","1结尾的小于0的乘积最小子数组即可（为什么是小于0的最小子数组，因为负负得正啊，乘以小于0的最小的就是最大的了）。","2.","2.1.","2.2.","2.3.",":","=",">=","?","dp","dp[0][0]","dp[0][1]","dp[i","dp[i][0]","dp[i][1]","dpmax","dpmax);","dpmin","dpmin);","int","int[][]","int[n][2];","integer.min_value;","math.max(dp[i][0],","math.max(dpmax,","math.max(nums[i],","math.min(nums[i],","max","max);","max;","maxproduct(int[]","n","new","num","nums)","nums.length;","nums[0]","nums[i]","public","return","tempmax","tempmax;","tempmin","tempmin;","{","}","乘积最大子数组","动态规划","动态规划2.3.","因为dp[i]只与dp[i","如果nums[i]为正数：要知道以i结尾的乘积最大的子数组我们只需要知道以i","如果nums[i]为负数：要知道以i结尾的乘积最大的子数组我们只需要知道以i","对于第i个位置的数：","思路","思路2.1.","我们先思考最容易想到的枚举法，枚举每一种子数组的乘积，记录其中的最大值即可。","枚举","枚举2.2.","枚举法的复杂度为o(n2)，枚举了每一种子数组，但我们真的有必要知道每一个子数组吗？","空间优化","给你一个整数数组","那么dp关系就推出来了，代码如下：","题目描述","题目描述2.","，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。"],"part2/198. 打家劫舍.html":["(int","(n","0)","0;","1)","1.","198.","1],dp[i","1]的位置转移过来。","1位置的元素和","2.","2;","2]+nums[i])","2]转移过来；或者不选i位置的数，那么最大值一定是从dp[i","2位置的元素，所以我们可以优化一下dp过程。","=","==","dp","dp[0]","dp[1]","dp[i]","dp过程中，只涉及i","first","int","int[]","int[n];","math.max(first,nums[1]);","math.max(nums[0],nums[1]);","max(dp[i","n","new","nums)","nums.length;","nums[0];","public","return","rob(int[]","second","{","}","不能同时选择数组中相邻的数字。","不触动警报装置的情况下","你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。","思路","打家劫舍","给定一个代表每个房屋存放金额的非负整数数组，计算你","这题第一时间应该想到动态规划，dp[i]表示数组前i个元素能获取的最大值，在i位置有两种选择，一个是选择i位置的数，那么最大值一定是从dp[i","那么动态规划方程为：","题目描述","题目描述2.","，一夜之内能够偷窃到的最高金额。"],"part3/":["#","201","300","leetcod"],"part3/206. 反转链表.html":["!=","(root","1","1.","2.","2.1.","2.2.","206.","5","=","==",">1",">2",">3",">4",">5",">null","head)","head.next","head;","if(head","listnod","next","next;","null","null)","null;","pre","pre.next","pre;","privat","public","re","res;","return","reverse(head);","reverse(head.next);","reverse(listnod","reverselist(listnod","root","root.next","root.next;","root;","{","||","}","你可以迭代或递归地反转链表。你能否用两种方法解决这道题？","反转一个单链表。","反转链表","思路","思路2.1.","示例:","输入:","输出:","进阶:","迭代写法：","迭代写法：2.2.","递归写法：","题目描述","题目描述2."],"part3/210. 课程表 II.html":["();","(int","(int[]","(numcours","0","0)","0;","1","1.","1。","2.","210.",":","=","==","[0,1]","findorder(int","ii","indegre","indegrees[p[0]]++;","int[0];","int[]","int[][]","int[numcourses];","linkedlist<>","n","new","numcourses,","p","prerequisites)","public","queue","return","{","}","例如，想要学习课程","到","可能会有多个正确的顺序，你只要返回一种就可以了。如果不可能完成所有课程，返回一个空数组。","在选修某些课程之前需要一些先修课程。","思路","现在你总共有","给定课程总量以及它们的先决条件，返回你为了学完所有课程所安排的学习顺序。","课程表","转换成一个拓扑排序的问题，维护一个入度表，每次把入度为0的节点推入队列，加入结果数组，然后维护入度表剩余节点的入度。","门课需要选，记为","题目描述","题目描述2.","，你需要先完成课程","，我们用一个匹配来表示他们:"],"part3/236. 二叉树的最近公共祖先.html":["!=","&&","(f1","(flag)","(re","(root","*","*/","*最终判断为true的标准为","/**","//剪枝一下","//右子树是否包含p,q中的一个","//如果root为null，直接返回fals","//如果root为p或者q,只需要root的左右子树中有一个包含p或q即可","//如果root节点等于p或q，或者它的左右子树包含过p或q，就返回true，否则返回fals","//寻找root的左右节点或者root本身是否包含p,q","//左子树是否包含p,q中的一个","//第一个为true的root节点即为结果，通过一个全局变量存储。","1.","2.","236.","=","==","boolean","dfs(root,","dfs(root.left,","dfs(root.right,p,","dfs(treenod","f1","f2","f2);","f2;","f3","false;","flag","lowestcommonancestor(treenod","null)","null;","p","p,","privat","public","p、q","p、q，最近公共祖先表示为一个结点","q","q)","q);","re","res;","return","root","root,","root;","root为p或q,它的左右子树中的一个为另一个节点。","root的左右子树分别包含p,q。","t","treenod","x","x，满足","{","||","}","为不同节点且均存在于给定的二叉树中。","二叉树的最近公共祖先","如果一个节点是这两个节点的最近公共祖先，那么这两个节点一定分别存在于它们最近公共祖先的左右子树里面。或者p，q这两个节点中一定有一个是它们的最近公共祖先。","思路","所有节点的值都是唯一的。","找到该树中两个指定节点的最近公共祖先。","是","百度百科中最近公共祖先的定义为：“对于有根树","的两个结点","的深度尽可能大（一个节点也可以是它自己的祖先）。”","的祖先且","给定一个二叉树,","说明:","题目描述","题目描述2."],"part3/287. 寻找重复数.html":["(int","(judge(nums,mid))","(left","+","0;","1","1.","1;","1（因为[1,mid]一共有mid个数，而其中x出现了2次，所以是mid+1个数）。","1，right]中寻找答案。同理反之从[left,mid]中寻找答案。所以judge函数如下：","2.","2.1.","287.","=",">","an","arr,","boolean","findduplicate(int[]","hashmap<>();","int","judge(int[]","left","map","mid","mid;","n","n;","new","nums)","nums.length","nums，其数字都在","n）。","n），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。","o(1)","o(n2)","privat","public","return","right","right;","value)","{","}","。","。别想暴力解决这个问题！","不能更改原数组（假设数组是只读的）。","不能更改原数组（假设数组是只读的）。也就是说不能通过类似排序的方式解决这个问题","个整数的数组","之间（包括","也就是说，这个题目的答案肯定在1到n之间。既然答案的范围确定，我们是否可以通过二分查找的方法对答案范围进行二分搜索，然后进行一些判断不断缩小答案范围，最后答案范围为1后就可以返回结果了。","以上解法不是最优解法，本题还可以通过快慢指针解决。","到","只能使用额外的","和","如果不考虑说明的话，那么建立一个hash表轻松解决这个问题。","寻找重复数","思路","思路2.1.","所以如果nums数组中，元素值在[1,mid]之间的个数小于等于mid，那么[left,mid]中一定不存在最终的答案，我们要从[mid","数组中只有一个重复的数字，但它可能不止重复出现一次。","数组中只有一个重复的数字，但它可能不止重复出现一次。这个倒无所谓...","时间复杂度小于","然后看一下说明，首先分析一下说明的要求：","的空间。","的空间。不能用hash表了！","给定一个包含","说明：","那么我们接着分析题目：给定一个包含","那么重点就是进行怎样的判断了：我们思考一下，假设最终答案x出现了2次，且x在[1,mid]中，那么[1,mid]的个数一定为mid","题目描述","题目描述2."],"part4/":["301","400","leetcod"],"part4/394. 字符串解码.html":["\"2[abc]3[cd]ef\",","\"3[a2[c]]\",","\"3[a]2[bc]\",","\"aaabcbc\".","\"abcabccdcdcdef\".","\"accaccacc\".","&&","'0'","']')","(i","(int","(num","(s.charat(i)","+","//加入当前加入stringbuilder中","//更新i的值","//最后处理一下返回结果就可以返回了","//碰到']‘即可退出当前递归了","0).getvalue();","0;","1)","1);","1,","1.","2.","2.1.","2.2.","2[4]","394.","3a",";","=","==",">",">=","boolean","break;","c","c)","decodestring(str","dequ","encoded_str","getstring(s,","getstring(str","i)),","i;","int","integer.valueof(s.substring(begin,","isnum(char","k","k[encoded_string]，表示其中方括号内部的","linkedlist<>();","new","num","num,","numstack","pair","pair.getkey();","pair<>(i,sb.tostring());","privat","public","re","return","s","s)","s,","sb","sb.append(pair.getvalue());","sb.append(s.charat(i));","sb.append(temp);","sb.tostring();","start)","start;","string","stringbuild","stringbuilder();","strstack","temp","{","}","你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。","保证为正整数。","其他字符：加入到stringbuilder中","否则就不断的往stringbuilder中加入字符串，最后返回string。","因为java只有值传递，而这个递归解法中getstring()函数需要返回递归后i的位置，所以通过返回pair<>()解决这个问题。","如果碰到数字，获取数字的值，然后递归获得数字和后面对应字符串解码后的值，加入stringbuilder中；","字符'['","字符']'：","字符串解码","思路","思路2.1.","或","把']'匹配的'['中的字符串和它前面的数字做解码，结果和栈顶字符串连接后再入栈","数字字符：把数字字符转换为数字入栈","次。注意","正好重复","此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数","的输入。","示例:","给定一个经过编码的字符串，返回它解码后的字符串。","编码规则为:","辅助栈","返回","递归","递归2.2.","通过两个栈，分别存储数字和字符串。","遍历字符串，分情况判断：","题目描述","题目描述2.","，例如不会出现像","，开始利用stringbuilder记录'['后的字符串","：把'['前的字符串入栈"],"part6/":["501","600","leetcod"],"part6/560. 和为K的子数组.html":["(int","+",",","//因为sum[i]","//建立sum数组","//所以需要给sum数组前添加一个元素0，确保可以判断到nums[0]","0;","1","1.","1000,","1000]","1]","1e7,","1e7]。","2","2.","20,000]。","560.",":","=","[","[1,","[1,0,2,0,0,0,1],","[1,1,1],","[1,1,3,3,3,3,4]","[1,1]","cnt","hashmap<>();","int","int[]","int[n];","j","k","k)","k即可确保nums[j","k，你需要找到该数组中和为","map","map.put(0,1);","n","new","num","nums,","nums.length;","nums[i]","nums[i]的和为k","public","re","subarraysum(int[]","sum","sum[j]","{","与","为两种不同的情况。","但这样复杂度太大了，然后想到处理子数组和时最常用的方法是建立一个前缀和数组sum。那么怎么利用这个前缀和数组优化复杂度呢？首先看一个样例","使sum[i]","其实没有必要提前建立sum数组，一趟for循环遍历也可以解决问题。代码如下","到","和为k。也就是说这个题转换成了在sum数组中找出两数之差为k的情况。和leetcode_1类似，通过建立hash表的方式可以o(n)时间复杂度解决这个问题。","和为k的子数组","对应的sum数组为","思路","我们只要从sum数组中，找出两个数","数组中元素的范围是","数组的长度为","的范围是","的连续的子数组的个数。","示例","给定一个整数数组和一个整数","表示nums[j","说明","输入:num","输出:","题目描述","题目描述2.","首先是想到暴力的思路，两层for循环遍历，枚举每一个子数组和是否等于k。时间复杂度为o(n2)。","，且整数"],"part7/":["601","700","leetcod"],"part7/680. 验证回文字符串 Ⅱ.html":["(i","0;","1.","1;","2.","680.","=","boolean","int","j","n","public","s)","s.length();","s，最多删除一个字符。判断是否能成为回文字符串。","validpalindrome(str","z","{","ⅱ","字符串只包含从","思路","按照正常判断回文串的方法，从字符串两端分别往中间判断，碰到第一个不相等的位置后，分别判断删除其中一个位置后是否为回文串即可。","注意:","的小写字母。字符串的最大长度是50000。","给定一个非空字符串","题目描述","题目描述2.","验证回文字符串"],"part10/":["1000","901","leetcod"],"part10/974. 和可被 K 整除的子数组.html":["%","(int","(sum[i]","0,","0;","0],","0。","0；即sum[i]","1.","1],","2%6","2,","2.","2，需要加k再取模。","3,","3,1],","3]","3],","4，而java取模运算的结果为","5","5,","7","974.",":","=","[","[0,","[0],","[4,","[4,5,0,","[5,","[5],","arr,","arr.length;","a，返回其中元素之和可被","hashmap<>();","int","k","k)","k。","map","map.put(0,1);","n","new","public","re","subarraysdivbyk(int[]","sum","sum[j]","sum[j])","{","个子数组满足其元素之和可被","变为","和可被","对应key的计算部分即可，同时hash表中的key也要为取模后的结果。","思路","所以只需要修改","整除的子数组","整除的（连续、非空）子数组的数目。","整除：","有","本题和leetcode560题思路基本相同，只不过判断时从sum[i]","示例","给定一个整数数组","解释：","输入：a","输出：7","还要注意负数取模的情况，例如","通过一些数论知识(具体我也不太清楚)可以转换为sum[i]","题目描述","题目描述2."],"partmore/":["1000+","leetcod"],"partmore/1371. 每个元音包含偶数次的最长子字符串.html":["'a'，'e'，'i'，'o'，'u'","//建立一个hash表，hash表存储的是某种状态第一次出现的位置。","1.","1371.","1。","1，因为遍历字符串是从0开始的，上一个位置为","1，还没有任何字符出现，元音字母出现次数都为0，所以记录为","2.","=","[0,i]是否为偶数，j","findthelongestsubstring(str","hash","int","int[1","int[]","i的值就为出现偶数次该字符的长度，然后记录最大的值。但我们需要枚举i和j，时间复杂度仍然是o(n2)。","new","public","s","s)","{","思路","我们可以想一下，我们没有必要统计它的准确数量，只要知道它是奇数个还是偶数个就好了，然后我们也没必要枚举i和j，只需要知道第一次出现奇数个的位置和最后出现奇数个的位置，第一次出现偶数个的位置和最后出现偶数个的位置，因为奇数减奇数为偶数，偶数减偶数为偶数，所以最长长度就是这两种位置中的最大值。这里就通过题目的出现偶数次这个条件进行了状态压缩。","最后扩展到多个字符的情况，一个字符只有奇数和偶数两种状态，而两个字符会有四种状态(a奇数次b奇数次、a偶数次b奇数次、a奇数次b偶数次、a偶数次b偶数次)，五个元音字符会有2的5次方种状态。我们可以通过二进制来表示这些状态，例如偶数次就是0，奇数次就是1，如果出现了某个字符，我们可以让上一个状态和1进行异或运算，更新状态。5个字符应该5位二进制数表示，初始为00000。","每个元音包含偶数次的最长子字符串","然后通过一个hash表记录某种状态第一次出现的位置，然后遍历字符串找到最后一次出现的位置，记录最大值即可。对于(00000)这种状态，第一次出现的位置应该为","给你一个字符串","这个题目涉及到的知识点很多：位运算，前缀和，hash表，状态压缩(这是leetcode的中等难度？)，自己第一次做也没有想到，看了题解后才慢慢理解的，其实涉及到的知识都不难，但整合到一起就很难想到了。","这里先解释一下我的代码都干了些什么，之后在一步步解释为什么这样想。","题目描述","题目描述2.","首先我们想，如果只看一个字符出现的次数是否为偶数次，应该可以想到用前缀和，统计[0,i]该字符出现的个数；找一个位置j，判断[0,j]","，在子字符串中都恰好出现了偶数次。","，请你返回满足以下条件的最长子字符串的长度：每个元音字母，即"],"partmore/1431. 拥有最多糖果的孩子.html":["();","(int","0;","1.","1431.","2.","=","arraylist<>","candi","candies,","candies[i]","extracandi","extracandies)","int","kidswithcandies(int[]","list","max","max)","new","public","re","res.add(false);","res.add(true);","res;","return","{","}","个孩子拥有的糖果数目。","个糖果分配给孩子们之后，此孩子有","代表第","和一个整数","对每一个孩子，检查是否存在一种方案，将额外的","思路","拥有最多糖果的孩子","最多","有点水的题目，找出数组的最大值，然后比较数组中每个元素加上extracandies是否比最大值大即可。","的糖果。注意，允许有多个孩子同时拥有","的糖果数目。","给你一个数组","题目描述","题目描述2.","，其中"],"partmore/5410. 课程安排 IV.html":["();","(int","(int[]","0","0;","1","1.","2.","5410.",":","=","[1,0]","arraylist<>","b","boolean[][]","boolean[n][n];","c","checkifprerequisite(int","dp","dp[p[0]][p[1]]","int[][]","iv","k","list","n","n,","new","p","prerequisit","prerequisites)","prerequisites,","public","queri","queries)","queries[i]","queries[i][0]","queries[i][1]","re","res.add(dp[query[0]][query[1]]);","res;","return","true;","{","}","。","也是课程","你总共需要上","关于floyd算法，可以先参考这篇博客：https://blog.csdn.net/ljhandlwt/article/details/52096932","到","和一个查询对列表","和一个直接先修课程数对列表","对于每个查询对","思路","数对的形式给出先修课程数对。","是否是","是课程","有的课会有直接的先修课程，比如如果想上课程","本题为leetcode双周赛27的第三题","每个查询对的判断结果。","注意：如果课程","的先修课程。","的先修课程且课程","的先修课程，那么课程","给你课程总数","请返回一个布尔值列表，列表中每个元素依次分别对应","课程安排","通过floyd算法打表，建立任意节点i,j的连通关系，在查询时直接o(1)复杂度查询打好的表就可以了。","门课，课程编号依次为","题目描述","题目描述2.","，你必须先上课程","，请判断","，那么会以"],"partmore/5411. 摘樱桃 II.html":["&&","(0,","(0,0)","(i+1,","(i,j)","(int",")","+","//这里的两个for循环是枚举能到达j1,j2的情况的，然后记录最大值","0","0;","1","1)","1)，(i+1,","1,","1.","1;","1]","1];","1三个状态转移过来，同理j2也一样，所以总共对于j1,j2一个有9种状态，取其中的最大值即可。","1的时候，j1是不可能到2位置的，这些情况要排除掉。","2","2.","5411.","=","=0","[j1]","[j2]","cherrypickup(int[][]","col","dp","dp[0][0][m","grid","grid)","grid.length;","grid[0].length;","grid[0][0]","grid[0][m","ii","int","int[][][]","int[n][m][m];","j","j)","j+1)","j1","j1,","j1可以从","j2","k1","len;","m","max","n","new","nj1","nj2","public","row","x","{","。","两个机器人在任意时刻都不能移动到","两个机器人最后都要到达","中每个格子的数字表示你能获得的樱桃数目。","为在第i行，两个机器人分别处于j1,j2列时的最大值。","从右上角格子","从左上角格子","从格子","你有两个机器人帮你收集樱桃，机器人","出发。","出发，机器人","出发，机器人可以移动到格子","在枚举j1,j2时，要注意有些j1，j2的位置还并不能到达，例如在i","外面。","当一个机器人经过某个格子时，它会把该格子内所有的樱桃都摘走，然后这个位置会变成空格子，即没有樱桃的格子。","当两个机器人同时到达同一个格子时，它们中只有一个可以摘到樱桃。","思路","我们定义dp[i]","或者","摘樱桃","最底下一行。","本题为leetcode双周赛27的第四题","来表示一块樱桃地。","的矩阵","给你一个","请你按照如下规则，返回两个机器人能收集的最多樱桃数目：","这个题和数塔题目类似，只不过从一个节点开始变成从两个节点同时开始，所以在动态规划方程上要多记录一种状态。","题目描述","题目描述2."],"others/":["other"],"others/和为S的连续正数序列.html":["%","(2","(a1","(int","(sum","*","+","/","//当(left","/=","0)","0;","1)","1.","1;","1;//滑动窗口[left,right]的和","2","2.","2.1.","2.2.","2;","=","==",">","a1","a1;","arr[0]","arr[]","arraylist<>();","class","findcontinuoussequence(int","good","int","int[][]","int[n];","left","left++;","left;","list","luck!","n","n)","n);","n++)","n;","new","public","re","right","solut","sum","target","target)","target已知，此时只要遍历a1或者遍历n，都可求得另一个的值，只要判断是否为正整数就可以判断是否存在答案。","{","}","初始滑动窗口大小为1，开始(left)为1，结束(right)为1，通过等差数列求和公式可以求得滑动窗口的和，与目标target进行比较，如果等于target，则创建一个数组保存答案，如果小于target则说明应该扩大滑动窗口的和，则增加right，如果大于target，则说明应该减少滑动窗口的和，则增加left。","化简得","和为s的连续正数序列","如果选择遍历a1，在求n的过程中要用到sqrt，如果遍历n,则不需要，所以选择遍历n。","小明很喜欢数学,有一天他在做数学作业时,要求计算出9~16的和,他马上就写出了正确答案是100。但是他并不满足于此,他在想究竟有多少种连续的正数序列的和为100(至少包括两个数)。没多久,他就得到另一组连续正数和为100的序列:18,19,20,21,22。现在把问题交给你,你能不能也很快的找出所有和为s的连续正数序列?","思路","思路2.1.","求和公式","滑动窗口(双指针)","滑动窗口(双指针)2.2.","通过求和公式来解","题目描述","题目描述2."],"others/求1+2+…+n.html":["&&","(n","+=","0","0;","0为false，整个都可以确定为false，就没有必要判断(n","0时递归就结束了。","0这个逻辑运算中，n","0，里面的递归也就不会执行了，所以当n","1))","1+2+...+n","1.","2.","=","==",">","boolean","flag","int","n","n)","n;","public","return","sumnums(int","sumnums(n","{","}","利用逻辑运算的短路性质，如果n","思路","求","求1+2+…+n","题目描述","题目描述2.","，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（a?b:c）。"]},"length":42},"tokenStore":{"root":{"0":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.028846153846153848},"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.01694915254237288},"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374},"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259},"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.01092896174863388},"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.03333333333333333},"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.020833333333333332},"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403},"others/求1+2+…+n.html":{"ref":"others/求1+2+…+n.html","tf":0.04}},";":{"docs":{"part1/1. 两数之和.html":{"ref":"part1/1. 两数之和.html","tf":0.046511627906976744},"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.009615384615384616},"part1/3. 无重复字符的最长子串.html":{"ref":"part1/3. 无重复字符的最长子串.html","tf":0.06521739130434782},"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.016129032258064516},"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":0.031746031746031744},"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.03333333333333333},"part2/125. 验证回文串.html":{"ref":"part2/125. 验证回文串.html","tf":0.03571428571428571},"part2/136. 只出现一次的数字.html":{"ref":"part2/136. 只出现一次的数字.html","tf":0.08333333333333333},"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338},"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259},"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.01639344262295082},"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.021052631578947368},"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.016666666666666666},"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.023255813953488372},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169},"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.05442176870748299},"part7/680. 验证回文字符串 Ⅱ.html":{"ref":"part7/680. 验证回文字符串 Ⅱ.html","tf":0.03125},"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.02727272727272727},"partmore/1431. 拥有最多糖果的孩子.html":{"ref":"partmore/1431. 拥有最多糖果的孩子.html","tf":0.05263157894736842},"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666},"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403},"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.0070921985815602835},"others/求1+2+…+n.html":{"ref":"others/求1+2+…+n.html","tf":0.02}}},")":{"docs":{"part1/3. 无重复字符的最长子串.html":{"ref":"part1/3. 无重复字符的最长子串.html","tf":0.021739130434782608},"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":0.015873015873015872},"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374},"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667},"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.01092896174863388},"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.021052631578947368},"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.016666666666666666},"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.0070921985815602835}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}}}}}}}}}}}},",":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.022727272727272728},"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.01818181818181818}}},".":{"5":{"docs":{},";":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182}}}},"7":{"5":{"docs":{},"f":{"docs":{},",":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}}}}},"docs":{}},"docs":{}},"。":{"docs":{"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":0.015873015873015872},"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909}}},"]":{"docs":{},",":{"docs":{"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909}}}},"；":{"docs":{},"即":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909}}}}}}}}}},"为":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},"，":{"docs":{},"整":{"docs":{},"个":{"docs":{},"都":{"docs":{},"可":{"docs":{},"以":{"docs":{},"确":{"docs":{},"定":{"docs":{},"为":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},"，":{"docs":{},"就":{"docs":{},"没":{"docs":{},"有":{"docs":{},"必":{"docs":{},"要":{"docs":{},"判":{"docs":{},"断":{"docs":{},"(":{"docs":{},"n":{"docs":{"others/求1+2+…+n.html":{"ref":"others/求1+2+…+n.html","tf":0.02}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"时":{"docs":{},"递":{"docs":{},"归":{"docs":{},"就":{"docs":{},"结":{"docs":{},"束":{"docs":{},"了":{"docs":{},"。":{"docs":{"others/求1+2+…+n.html":{"ref":"others/求1+2+…+n.html","tf":0.02}}}}}}}}}},"这":{"docs":{},"个":{"docs":{},"逻":{"docs":{},"辑":{"docs":{},"运":{"docs":{},"算":{"docs":{},"中":{"docs":{},"，":{"docs":{},"n":{"docs":{"others/求1+2+…+n.html":{"ref":"others/求1+2+…+n.html","tf":0.02}}}}}}}}}}},"，":{"docs":{},"里":{"docs":{},"面":{"docs":{},"的":{"docs":{},"递":{"docs":{},"归":{"docs":{},"也":{"docs":{},"就":{"docs":{},"不":{"docs":{},"会":{"docs":{},"执":{"docs":{},"行":{"docs":{},"了":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"当":{"docs":{},"n":{"docs":{"others/求1+2+…+n.html":{"ref":"others/求1+2+…+n.html","tf":0.02}}}}}}}}}}}}}}}}}}}}},"1":{"0":{"0":{"0":{"docs":{"part10/":{"ref":"part10/","tf":3.333333333333333}},"。":{"docs":{"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.01694915254237288}}},",":{"docs":{"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374}}},"]":{"docs":{"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374}}},"+":{"docs":{"partmore/":{"ref":"partmore/","tf":5}}}},"docs":{"part1/":{"ref":"part1/","tf":3.333333333333333}}},"1":{"docs":{"part2/":{"ref":"part2/","tf":3.333333333333333}},".":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":5}}}},"docs":{"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":0.031746031746031744},"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.013333333333333334}},")":{"docs":{},";":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.009615384615384616}}}},";":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.009615384615384616},"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":0.031746031746031744}}}},"2":{"5":{"docs":{},".":{"docs":{"part2/125. 验证回文串.html":{"ref":"part2/125. 验证回文串.html","tf":5}}}},"docs":{}},"3":{"6":{"docs":{},".":{"docs":{"part2/136. 只出现一次的数字.html":{"ref":"part2/136. 只出现一次的数字.html","tf":5}}}},"7":{"1":{"docs":{},".":{"docs":{"partmore/1371. 每个元音包含偶数次的最长子字符串.html":{"ref":"partmore/1371. 每个元音包含偶数次的最长子字符串.html","tf":5}}}},"docs":{}},"docs":{}},"4":{"3":{"1":{"docs":{},".":{"docs":{"partmore/1431. 拥有最多糖果的孩子.html":{"ref":"partmore/1431. 拥有最多糖果的孩子.html","tf":5}}}},"docs":{}},"6":{"docs":{},".":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":5}}}},"7":{"docs":{},".":{"docs":{"part2/147. 对链表进行插入排序.html":{"ref":"part2/147. 对链表进行插入排序.html","tf":5}}}},"docs":{}},"5":{"0":{"docs":{},".":{"docs":{"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":5}}}},"2":{"docs":{},".":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":5}}}},"docs":{}},"9":{"8":{"docs":{},".":{"docs":{"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":5}}}},"docs":{}},"docs":{"part1/":{"ref":"part1/","tf":3.333333333333333},"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182},"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.012195121951219513},"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.013333333333333334},"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.012195121951219513},"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.009174311926605505},"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.016666666666666666},"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.046511627906976744},"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374},"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.020833333333333332},"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}},".":{"docs":{"part1/1. 两数之和.html":{"ref":"part1/1. 两数之和.html","tf":5.046511627906977},"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.019230769230769232},"part1/3. 无重复字符的最长子串.html":{"ref":"part1/3. 无重复字符的最长子串.html","tf":0.043478260869565216},"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.011363636363636364},"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.03389830508474576},"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.03225806451612903},"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":0.031746031746031744},"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.024390243902439025},"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.012269938650306749},"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.013333333333333334},"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.012195121951219513},"part2/125. 验证回文串.html":{"ref":"part2/125. 验证回文串.html","tf":0.07142857142857142},"part2/136. 只出现一次的数字.html":{"ref":"part2/136. 只出现一次的数字.html","tf":0.08333333333333333},"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0051813471502590676},"part2/147. 对链表进行插入排序.html":{"ref":"part2/147. 对链表进行插入排序.html","tf":0.03508771929824561},"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.018518518518518517},"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.01092896174863388},"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.021052631578947368},"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.01834862385321101},"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.03333333333333333},"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.021897810218978103},"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.015503875968992248},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.012048192771084338},"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.013605442176870748},"part7/680. 验证回文字符串 Ⅱ.html":{"ref":"part7/680. 验证回文字符串 Ⅱ.html","tf":0.0625},"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.01818181818181818},"partmore/1371. 每个元音包含偶数次的最长子字符串.html":{"ref":"partmore/1371. 每个元音包含偶数次的最长子字符串.html","tf":0.058823529411764705},"partmore/1431. 拥有最多糖果的孩子.html":{"ref":"partmore/1431. 拥有最多糖果的孩子.html","tf":0.03508771929824561},"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.020833333333333332},"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.017543859649122806},"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.014184397163120567},"others/求1+2+…+n.html":{"ref":"others/求1+2+…+n.html","tf":0.04}}},")":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182},"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.01694915254237288},"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.016129032258064516},"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.021052631578947368},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169},"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403},"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.0070921985815602835}},";":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.009615384615384616},"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.012195121951219513},"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374},"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}},")":{"docs":{"others/求1+2+…+n.html":{"ref":"others/求1+2+…+n.html","tf":0.06}},";":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.011363636363636364},"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667}}}},"，":{"docs":{},"(":{"docs":{},"i":{"docs":{},"+":{"1":{"docs":{},",":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}}},"docs":{}}}}}},";":{"docs":{"part1/3. 无重复字符的最长子串.html":{"ref":"part1/3. 无重复字符的最长子串.html","tf":0.043478260869565216},"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.022727272727272728},"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374},"part2/125. 验证回文串.html":{"ref":"part2/125. 验证回文串.html","tf":0.03571428571428571},"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0051813471502590676},"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.031007751937984496},"part7/680. 验证回文字符串 Ⅱ.html":{"ref":"part7/680. 验证回文字符串 Ⅱ.html","tf":0.03125},"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.017543859649122806},"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.02127659574468085}},"/":{"docs":{},"/":{"docs":{},"滑":{"docs":{},"动":{"docs":{},"窗":{"docs":{},"口":{"docs":{},"[":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"]":{"docs":{},"的":{"docs":{},"和":{"docs":{"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.0070921985815602835}}}}}}}}}}}}}}}}}}}}}}},",":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.022727272727272728},"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.03389830508474576},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169},"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}},"e":{"docs":{},"n":{"docs":{},"d":{"1":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"2":{"docs":{},",":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"2":{"docs":{},",":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"2":{"docs":{},",":{"docs":{},"k":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182}}}}},"docs":{}}}}}},"docs":{}}}}}}}},"docs":{}}}}}}},"2":{"docs":{},",":{"docs":{},"k":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182}}}}},"docs":{}}}}},"]":{"docs":{"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.013605442176870748},"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}},"。":{"docs":{},"请":{"docs":{},"根":{"docs":{},"据":{"docs":{},"这":{"docs":{},"个":{"docs":{},"假":{"docs":{},"设":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"反":{"docs":{},"转":{"docs":{},"后":{"docs":{},"整":{"docs":{},"数":{"docs":{},"溢":{"docs":{},"出":{"docs":{},"那":{"docs":{},"么":{"docs":{},"就":{"docs":{},"返":{"docs":{},"回":{"docs":{"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":0.015873015873015872}}}}}}}}}}}}}}}}}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.01092896174863388}}}}}},"1":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.01092896174863388}}}}}},"docs":{}},"有":{"docs":{},"关":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"我":{"docs":{},"们":{"docs":{},"可":{"docs":{},"以":{"docs":{},"对":{"docs":{},"d":{"docs":{},"p":{"docs":{},"数":{"docs":{},"组":{"docs":{},"进":{"docs":{},"行":{"docs":{},"优":{"docs":{},"化":{"docs":{},"，":{"docs":{},"把":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"降":{"docs":{},"低":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.00546448087431694}}}}}}}}}}}}}}}}}}}}}}}}}}}}},",":{"docs":{"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909}},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.010526315789473684}}}}}}},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"转":{"docs":{},"移":{"docs":{},"过":{"docs":{},"来":{"docs":{},"。":{"docs":{"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.010526315789473684}}}}}}}}}},";":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}}},"，":{"docs":{},"给":{"docs":{},"定":{"docs":{},"的":{"docs":{},"高":{"docs":{},"度":{"docs":{},"为":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"]":{"docs":{},"中":{"docs":{},"寻":{"docs":{},"找":{"docs":{},"答":{"docs":{},"案":{"docs":{},"。":{"docs":{},"同":{"docs":{},"理":{"docs":{},"反":{"docs":{},"之":{"docs":{},"从":{"docs":{},"[":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{},"中":{"docs":{},"寻":{"docs":{},"找":{"docs":{},"答":{"docs":{},"案":{"docs":{},"。":{"docs":{},"所":{"docs":{},"以":{"docs":{},"j":{"docs":{},"u":{"docs":{},"d":{"docs":{},"g":{"docs":{},"e":{"docs":{},"函":{"docs":{},"数":{"docs":{},"如":{"docs":{},"下":{"docs":{},"：":{"docs":{"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.007751937984496124}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"因":{"docs":{},"为":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"是":{"docs":{},"从":{"0":{"docs":{},"开":{"docs":{},"始":{"docs":{},"的":{"docs":{},"，":{"docs":{},"上":{"docs":{},"一":{"docs":{},"个":{"docs":{},"位":{"docs":{},"置":{"docs":{},"为":{"docs":{"partmore/1371. 每个元音包含偶数次的最长子字符串.html":{"ref":"partmore/1371. 每个元音包含偶数次的最长子字符串.html","tf":0.029411764705882353}}}}}}}}}}}}},"docs":{}}}}}}}}}},"还":{"docs":{},"没":{"docs":{},"有":{"docs":{},"任":{"docs":{},"何":{"docs":{},"字":{"docs":{},"符":{"docs":{},"出":{"docs":{},"现":{"docs":{},"，":{"docs":{},"元":{"docs":{},"音":{"docs":{},"字":{"docs":{},"母":{"docs":{},"出":{"docs":{},"现":{"docs":{},"次":{"docs":{},"数":{"docs":{},"都":{"docs":{},"为":{"0":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"记":{"docs":{},"录":{"docs":{},"为":{"docs":{"partmore/1371. 每个元音包含偶数次的最长子字符串.html":{"ref":"partmore/1371. 每个元音包含偶数次的最长子字符串.html","tf":0.029411764705882353}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}},"。":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338},"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.016666666666666666},"partmore/1371. 每个元音包含偶数次的最长子字符串.html":{"ref":"partmore/1371. 每个元音包含偶数次的最长子字符串.html","tf":0.029411764705882353}}},"结":{"docs":{},"尾":{"docs":{},"的":{"docs":{},"大":{"docs":{},"于":{"0":{"docs":{},"的":{"docs":{},"乘":{"docs":{},"积":{"docs":{},"最":{"docs":{},"大":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},"即":{"docs":{},"可":{"docs":{},"。":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.00546448087431694}}}}}}}}}}}}}},"docs":{}}},"小":{"docs":{},"于":{"0":{"docs":{},"的":{"docs":{},"乘":{"docs":{},"积":{"docs":{},"最":{"docs":{},"小":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},"即":{"docs":{},"可":{"docs":{},"（":{"docs":{},"为":{"docs":{},"什":{"docs":{},"么":{"docs":{},"是":{"docs":{},"小":{"docs":{},"于":{"0":{"docs":{},"的":{"docs":{},"最":{"docs":{},"小":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"负":{"docs":{},"负":{"docs":{},"得":{"docs":{},"正":{"docs":{},"啊":{"docs":{},"，":{"docs":{},"乘":{"docs":{},"以":{"docs":{},"小":{"docs":{},"于":{"0":{"docs":{},"的":{"docs":{},"最":{"docs":{},"小":{"docs":{},"的":{"docs":{},"就":{"docs":{},"是":{"docs":{},"最":{"docs":{},"大":{"docs":{},"的":{"docs":{},"了":{"docs":{},"）":{"docs":{},"。":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.00546448087431694}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}},"docs":{}}}}}},"位":{"docs":{},"置":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"和":{"docs":{"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.010526315789473684}}}}}}}},"（":{"docs":{},"因":{"docs":{},"为":{"docs":{},"[":{"1":{"docs":{},",":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{},"一":{"docs":{},"共":{"docs":{},"有":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"个":{"docs":{},"数":{"docs":{},"，":{"docs":{},"而":{"docs":{},"其":{"docs":{},"中":{"docs":{},"x":{"docs":{},"出":{"docs":{},"现":{"docs":{},"了":{"2":{"docs":{},"次":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"是":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"+":{"1":{"docs":{},"个":{"docs":{},"数":{"docs":{},"）":{"docs":{},"。":{"docs":{"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.007751937984496124}}}}}}},"docs":{}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}},"e":{"7":{"docs":{},",":{"docs":{"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374}}},"]":{"docs":{},"。":{"docs":{"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374}}}}},"docs":{}},"三":{"docs":{},"个":{"docs":{},"状":{"docs":{},"态":{"docs":{},"转":{"docs":{},"移":{"docs":{},"过":{"docs":{},"来":{"docs":{},"，":{"docs":{},"同":{"docs":{},"理":{"docs":{},"j":{"2":{"docs":{},"也":{"docs":{},"一":{"docs":{},"样":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"总":{"docs":{},"共":{"docs":{},"对":{"docs":{},"于":{"docs":{},"j":{"1":{"docs":{},",":{"docs":{},"j":{"2":{"docs":{},"一":{"docs":{},"个":{"docs":{},"有":{"9":{"docs":{},"种":{"docs":{},"状":{"docs":{},"态":{"docs":{},"，":{"docs":{},"取":{"docs":{},"其":{"docs":{},"中":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"即":{"docs":{},"可":{"docs":{},"。":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}}}}}}}}}}}}}}}},"docs":{}}}}},"docs":{}}}},"docs":{}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"j":{"1":{"docs":{},"是":{"docs":{},"不":{"docs":{},"可":{"docs":{},"能":{"docs":{},"到":{"2":{"docs":{},"位":{"docs":{},"置":{"docs":{},"的":{"docs":{},"，":{"docs":{},"这":{"docs":{},"些":{"docs":{},"情":{"docs":{},"况":{"docs":{},"要":{"docs":{},"排":{"docs":{},"除":{"docs":{},"掉":{"docs":{},"。":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}}}}}}}}}}}}}}},"docs":{}}}}}}},"docs":{}}}}}},"+":{"2":{"docs":{},"+":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{},"+":{"docs":{},"n":{"docs":{"others/求1+2+…+n.html":{"ref":"others/求1+2+…+n.html","tf":0.02}}}}}}}}},"docs":{}}},"2":{"0":{"0":{"docs":{"part2/":{"ref":"part2/","tf":3.333333333333333}}},"1":{"docs":{"part3/":{"ref":"part3/","tf":3.333333333333333}}},"6":{"docs":{},".":{"docs":{"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":5}}}},"docs":{},",":{"0":{"0":{"0":{"docs":{},"]":{"docs":{},"。":{"docs":{"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374}}}}},"docs":{}},"docs":{}},"docs":{}}},"1":{"0":{"docs":{},".":{"docs":{"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":3.333333333333333}}}},"docs":{},".":{"docs":{"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":5}}}},"3":{"1":{"docs":{"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":0.015873015873015872}}},"6":{"docs":{},".":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":5}}}},"docs":{}},"5":{"docs":{},".":{"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":3.333333333333333}}}},"8":{"7":{"docs":{},".":{"docs":{"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":5}}}},"docs":{}},"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.017045454545454544},"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.012269938650306749},"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.024390243902439025},"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.02040816326530612},"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403},"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.03546099290780142}},".":{"1":{"docs":{},".":{"docs":{"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.01694915254237288},"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667},"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756},"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.00546448087431694},"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.009174311926605505},"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.007751937984496124},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169},"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.0070921985815602835}}}},"2":{"docs":{},".":{"docs":{"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.01694915254237288},"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667},"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756},"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.00546448087431694},"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.009174311926605505},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169},"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.0070921985815602835}}}},"3":{"docs":{},".":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.00546448087431694}}}},"docs":{"part1/1. 两数之和.html":{"ref":"part1/1. 两数之和.html","tf":0.023255813953488372},"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":5.009615384615385},"part1/3. 无重复字符的最长子串.html":{"ref":"part1/3. 无重复字符的最长子串.html","tf":0.021739130434782608},"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182},"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.01694915254237288},"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.016129032258064516},"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":0.015873015873015872},"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.012195121951219513},"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374},"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667},"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756},"part2/125. 验证回文串.html":{"ref":"part2/125. 验证回文串.html","tf":0.03571428571428571},"part2/136. 只出现一次的数字.html":{"ref":"part2/136. 只出现一次的数字.html","tf":0.041666666666666664},"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338},"part2/147. 对链表进行插入排序.html":{"ref":"part2/147. 对链表进行插入排序.html","tf":0.017543859649122806},"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259},"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.00546448087431694},"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.010526315789473684},"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.009174311926605505},"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.016666666666666666},"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.014598540145985401},"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.007751937984496124},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169},"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374},"part7/680. 验证回文字符串 Ⅱ.html":{"ref":"part7/680. 验证回文字符串 Ⅱ.html","tf":0.03125},"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909},"partmore/1371. 每个元音包含偶数次的最长子字符串.html":{"ref":"partmore/1371. 每个元音包含偶数次的最长子字符串.html","tf":0.029411764705882353},"partmore/1431. 拥有最多糖果的孩子.html":{"ref":"partmore/1431. 拥有最多糖果的孩子.html","tf":0.017543859649122806},"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666},"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403},"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.0070921985815602835},"others/求1+2+…+n.html":{"ref":"others/求1+2+…+n.html","tf":0.02}}},")":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182}}},";":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.011363636363636364},"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.021052631578947368},"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.0070921985815602835}}},"]":{"docs":{},"+":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.010526315789473684}}}}}}}}}}},"转":{"docs":{},"移":{"docs":{},"过":{"docs":{},"来":{"docs":{},"；":{"docs":{},"或":{"docs":{},"者":{"docs":{},"不":{"docs":{},"选":{"docs":{},"i":{"docs":{},"位":{"docs":{},"置":{"docs":{},"的":{"docs":{},"数":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"一":{"docs":{},"定":{"docs":{},"是":{"docs":{},"从":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.010526315789473684}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"位":{"docs":{},"置":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"我":{"docs":{},"们":{"docs":{},"可":{"docs":{},"以":{"docs":{},"优":{"docs":{},"化":{"docs":{},"一":{"docs":{},"下":{"docs":{},"d":{"docs":{},"p":{"docs":{},"过":{"docs":{},"程":{"docs":{},"。":{"docs":{"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.010526315789473684}}}}}}}}}}}}}}}}}}}}}}},"[":{"4":{"docs":{},"]":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}},"docs":{}},"%":{"6":{"docs":{"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909}}},"docs":{}},",":{"docs":{"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.045454545454545456}}},"，":{"docs":{},"需":{"docs":{},"要":{"docs":{},"加":{"docs":{},"k":{"docs":{},"再":{"docs":{},"取":{"docs":{},"模":{"docs":{},"。":{"docs":{"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909}}}}}}}}}}}},"3":{"0":{"0":{"docs":{"part3/":{"ref":"part3/","tf":3.333333333333333}}},"1":{"docs":{"part4/":{"ref":"part4/","tf":3.333333333333333}}},"docs":{}},"2":{"docs":{"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":0.031746031746031744}}},"9":{"4":{"docs":{},".":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":5}}}},"docs":{}},"docs":{"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.016129032258064516},"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.012269938650306749},"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.024390243902439025}},".":{"docs":{"part1/3. 无重复字符的最长子串.html":{"ref":"part1/3. 无重复字符的最长子串.html","tf":5}}},"a":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}},",":{"1":{"docs":{},"]":{"docs":{},",":{"docs":{"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909}}}}},"docs":{"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909}}},"]":{"docs":{"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909}},",":{"docs":{"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.01818181818181818}}}}},"4":{"0":{"0":{"docs":{"part4/":{"ref":"part4/","tf":3.333333333333333}}},"docs":{}},"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.012195121951219513}},".":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":5}}},"，":{"docs":{},"而":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},"取":{"docs":{},"模":{"docs":{},"运":{"docs":{},"算":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"为":{"docs":{"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909}}}}}}}}}}}}}}}}},"5":{"0":{"1":{"docs":{"part6/":{"ref":"part6/","tf":3.333333333333333}}},"docs":{}},"4":{"1":{"0":{"docs":{},".":{"docs":{"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":3.333333333333333}}}},"1":{"docs":{},".":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":3.333333333333333}}}},"docs":{}},"docs":{}},"6":{"0":{"docs":{},".":{"docs":{"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":5}}}},"docs":{}},"docs":{"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.009174311926605505},"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.01818181818181818}},".":{"docs":{"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":5}}},",":{"docs":{"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909}}}},"6":{"0":{"0":{"docs":{"part6/":{"ref":"part6/","tf":3.333333333333333}}},"1":{"docs":{"part7/":{"ref":"part7/","tf":3.333333333333333}}},"docs":{}},"8":{"0":{"docs":{},".":{"docs":{"part7/680. 验证回文字符串 Ⅱ.html":{"ref":"part7/680. 验证回文字符串 Ⅱ.html","tf":3.333333333333333}}}},"docs":{}},"docs":{},".":{"docs":{"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":3.333333333333333}}}},"7":{"0":{"0":{"docs":{"part7/":{"ref":"part7/","tf":3.333333333333333}}},"docs":{}},"docs":{"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909}},")":{"docs":{},")":{"docs":{"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":0.015873015873015872}}}},".":{"docs":{"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":5}}}},"8":{"4":{"docs":{},".":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":5}}}},"docs":{}},"9":{"0":{"1":{"docs":{"part10/":{"ref":"part10/","tf":3.333333333333333}}},"docs":{}},"7":{"4":{"docs":{},".":{"docs":{"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":2.5}}}},"docs":{}},"docs":{}},"docs":{},"从":{"3":{"docs":{},"月":{"docs":{},"初":{"docs":{},"开":{"docs":{},"始":{"docs":{},"刷":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"，":{"docs":{},"刷":{"docs":{},"了":{"docs":{},"有":{"2":{"0":{"0":{"docs":{},"+":{"docs":{},"题":{"docs":{},"，":{"docs":{},"但":{"docs":{},"一":{"docs":{},"直":{"docs":{},"没":{"docs":{},"有":{"docs":{},"总":{"docs":{},"结":{"docs":{},"题":{"docs":{},"解":{"docs":{},"。":{"docs":{},"有":{"docs":{},"时":{"docs":{},"候":{"docs":{},"刷":{"docs":{},"题":{"docs":{},"的":{"docs":{},"过":{"docs":{},"程":{"docs":{},"中":{"docs":{},"有":{"docs":{},"些":{"docs":{},"思":{"docs":{},"想":{"docs":{},"明":{"docs":{},"明":{"docs":{},"以":{"docs":{},"前":{"docs":{},"用":{"docs":{},"到":{"docs":{},"过":{"docs":{},"，":{"docs":{},"但":{"docs":{},"就":{"docs":{},"是":{"docs":{},"想":{"docs":{},"不":{"docs":{},"起":{"docs":{},"来":{"docs":{},"，":{"docs":{},"看":{"docs":{},"来":{"docs":{},"还":{"docs":{},"是":{"docs":{},"要":{"docs":{},"总":{"docs":{},"结":{"docs":{},"题":{"docs":{},"解":{"docs":{},"的":{"docs":{},"。":{"docs":{"./":{"ref":"./","tf":0.3333333333333333}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}},"docs":{},"右":{"docs":{},"上":{"docs":{},"角":{"docs":{},"格":{"docs":{},"子":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}}}}}},"左":{"docs":{},"上":{"docs":{},"角":{"docs":{},"格":{"docs":{},"子":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}}}}}},"格":{"docs":{},"子":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}}}},"写":{"docs":{},"题":{"docs":{},"解":{"docs":{},"的":{"docs":{},"主":{"docs":{},"要":{"docs":{},"目":{"docs":{},"的":{"docs":{},"是":{"docs":{},"方":{"docs":{},"便":{"docs":{},"自":{"docs":{},"己":{"docs":{},"以":{"docs":{},"后":{"docs":{},"再":{"docs":{},"次":{"docs":{},"查":{"docs":{},"看":{"docs":{},"和":{"docs":{},"复":{"docs":{},"习":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"题":{"docs":{},"解":{"docs":{},"的":{"docs":{},"只":{"docs":{},"是":{"docs":{},"以":{"docs":{},"自":{"docs":{},"己":{"docs":{},"能":{"docs":{},"理":{"docs":{},"解":{"docs":{},"这":{"docs":{},"个":{"docs":{},"题":{"docs":{},"为":{"docs":{},"标":{"docs":{},"准":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"有":{"docs":{},"幸":{"docs":{},"能":{"docs":{},"帮":{"docs":{},"助":{"docs":{},"到":{"docs":{},"你":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"就":{"docs":{},"更":{"docs":{},"好":{"docs":{},"了":{"docs":{},"。":{"docs":{"./":{"ref":"./","tf":0.3333333333333333}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"入":{"docs":{},"数":{"docs":{},"据":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0051813471502590676}}}}}},"菜":{"docs":{},"鸡":{"docs":{},"刷":{"docs":{},"题":{"docs":{},"日":{"docs":{},"记":{"docs":{"./":{"ref":"./","tf":10.333333333333334}}}}}}}},"l":{"1":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.009615384615384616},"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.024390243902439025}},",":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.009615384615384616},"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.012195121951219513}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},";":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.009615384615384616},"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.012195121951219513}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},";":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.009615384615384616}}}}}}},";":{"docs":{"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.024390243902439025}}}},"2":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.019230769230769232},"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.036585365853658534}},")":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.009615384615384616},"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.012195121951219513}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},";":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.009615384615384616},"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.012195121951219513}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},";":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.009615384615384616}}},")":{"docs":{"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.012195121951219513}}}}}}},";":{"docs":{"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.012195121951219513}}}},"docs":{"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.016129032258064516}},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"part1/":{"ref":"part1/","tf":3.333333333333333},"part2/":{"ref":"part2/","tf":3.333333333333333},"part3/":{"ref":"part3/","tf":3.333333333333333},"part4/":{"ref":"part4/","tf":3.333333333333333},"part6/":{"ref":"part6/","tf":3.333333333333333},"part7/":{"ref":"part7/","tf":3.333333333333333},"part10/":{"ref":"part10/","tf":3.333333333333333},"partmore/":{"ref":"partmore/","tf":5}}}}}}},"n":{"1":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182}}},"2":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182}},")":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182}}}},"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.016129032258064516}},"o":{"docs":{},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"part1/3. 无重复字符的最长子串.html":{"ref":"part1/3. 无重复字符的最长子串.html","tf":0.021739130434782608}}}}}}}}}}}}}}}}}}}}}}}}}}},";":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}}},"f":{"docs":{},"t":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182},"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756},"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.015503875968992248},"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.0070921985815602835}},")":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182}}},",":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756}}},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.012195121951219513}}}}}},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.0070921985815602835}}}}},";":{"docs":{"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.0070921985815602835}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0051813471502590676},"partmore/1431. 拥有最多糖果的孩子.html":{"ref":"partmore/1431. 拥有最多糖果的孩子.html","tf":0.017543859649122806},"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666},"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.02127659574468085}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.038461538461538464},"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.04878048780487805},"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.05521472392638037},"part2/147. 对链表进行插入排序.html":{"ref":"part2/147. 对链表进行插入排序.html","tf":0.05263157894736842},"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.07339449541284404}},"e":{"docs":{},"(":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.009615384615384616},"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.012195121951219513},"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374}},"f":{"docs":{},"l":{"docs":{},"a":{"docs":{},"g":{"docs":{},")":{"docs":{},";":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.009615384615384616}}}}}}}},"v":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.009615384615384616}}}}}}}},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.015544041450777202}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.010362694300518135}}}}}}}}}}}}}}}},";":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0051813471502590676}}}}},"n":{"docs":{},"k":{"docs":{},"e":{"docs":{},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}},"<":{"docs":{},">":{"docs":{"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.016666666666666666}},"(":{"docs":{},")":{"docs":{},";":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667},"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756},"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338},"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.012048192771084338}}}}}}}}}}},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"{":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}}}}}}}}}}}}}}},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"p":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.03389830508474576}}}}}}}}}}}}}}}}}}}}},"w":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0072992700729927005}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.013333333333333334}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"u":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}},"c":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.007772020725388601}},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.007772020725388601}}}}}}}}}}},"缓":{"docs":{},"存":{"docs":{},"机":{"docs":{},"制":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":5}}}}}}}},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"!":{"docs":{"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.0070921985815602835}}}}}}},"(":{"0":{"docs":{},",":{"0":{"docs":{},")":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}}},"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}}},"2":{"docs":{"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.014184397163120567}}},"docs":{},"i":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.013333333333333334},"part2/125. 验证回文串.html":{"ref":"part2/125. 验证回文串.html","tf":0.03571428571428571},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169},"part7/680. 验证回文字符串 Ⅱ.html":{"ref":"part7/680. 验证回文字符串 Ⅱ.html","tf":0.03125}},"n":{"docs":{},"t":{"docs":{"part1/1. 两数之和.html":{"ref":"part1/1. 两数之和.html","tf":0.023255813953488372},"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.016129032258064516},"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374},"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667},"part2/136. 只出现一次的数字.html":{"ref":"part2/136. 只出现一次的数字.html","tf":0.041666666666666664},"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.00546448087431694},"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.021052631578947368},"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.016666666666666666},"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.015503875968992248},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169},"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.027210884353741496},"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909},"partmore/1431. 拥有最多糖果的孩子.html":{"ref":"partmore/1431. 拥有最多糖果的孩子.html","tf":0.03508771929824561},"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666},"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.017543859649122806},"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.014184397163120567}},"[":{"docs":{},"]":{"docs":{"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.016666666666666666},"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.020833333333333332}}}}},"d":{"docs":{},"e":{"docs":{},"x":{"1":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182}}},"2":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182}}},"docs":{}}}}},"+":{"1":{"docs":{},",":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.017543859649122806}}}},"docs":{}},",":{"docs":{},"j":{"docs":{},")":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}}}}},"l":{"1":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.019230769230769232},"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.012195121951219513}},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.012195121951219513}}}}}}},"2":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.009615384615384616}}},"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.024390243902439025},"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.007751937984496124}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}}}}}}}}}}}}},"j":{"docs":{"part1/3. 无重复字符的最长子串.html":{"ref":"part1/3. 无重复字符的最长子串.html","tf":0.021739130434782608}},"u":{"docs":{},"d":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{},"t":{"docs":{},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{},")":{"docs":{},")":{"docs":{"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},")":{"docs":{},")":{"docs":{"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.007751937984496124}}}}}}}}}}}}}}}}}},"s":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{"part1/3. 无重复字符的最长子串.html":{"ref":"part1/3. 无重复字符的最长子串.html","tf":0.021739130434782608},"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.01694915254237288}}}}}}}}}},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259}}}}}}},"u":{"docs":{},"m":{"docs":{"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.0070921985815602835}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909}}}}}}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"k":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"1":{"docs":{},",":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182}}}},"docs":{}}}}}}}}}}}},"n":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.011363636363636364},"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.01694915254237288},"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.013333333333333334},"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.042105263157894736},"others/求1+2+…+n.html":{"ref":"others/求1+2+…+n.html","tf":0.04}},"u":{"docs":{},"m":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.016129032258064516}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.016666666666666666}}}}}}}}},"o":{"docs":{},"w":{"docs":{"part2/147. 对链表进行插入排序.html":{"ref":"part2/147. 对链表进行插入排序.html","tf":0.017543859649122806}}}}},"r":{"docs":{},"e":{"docs":{"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":0.047619047619047616},"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0072992700729927005}}},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756},"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.009174311926605505},"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.014598540145985401}}}}}},"x":{"docs":{"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":0.015873015873015872}}},"!":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374},"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.02}}}}}}}}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756}}}}}}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},"(":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},")":{"docs":{},")":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0051813471502590676}}}}}}}}}}}}}}}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.012269938650306749},"part2/147. 对链表进行插入排序.html":{"ref":"part2/147. 对链表进行插入排序.html","tf":0.017543859649122806}},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"part2/147. 对链表进行插入排序.html":{"ref":"part2/147. 对链表进行插入排序.html","tf":0.017543859649122806}}}}}}}}}},"k":{"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.012269938650306749}},"e":{"docs":{},"y":{"docs":{},")":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}}}}}},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374}}}}}},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"part2/147. 对链表进行插入排序.html":{"ref":"part2/147. 对链表进行插入排序.html","tf":0.017543859649122806}}}}}}}}},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{},")":{"docs":{"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259}}}}}}}},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},"(":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},")":{"docs":{},")":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0051813471502590676}}}}}}}}}}}}}}}}}}}}}}},"最":{"docs":{},"近":{"docs":{},"最":{"docs":{},"少":{"docs":{},"使":{"docs":{},"用":{"docs":{},")":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}}}}}}}}},")":{"docs":{},";":{"docs":{"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.016666666666666666},"partmore/1431. 拥有最多糖果的孩子.html":{"ref":"partmore/1431. 拥有最多糖果的孩子.html","tf":0.017543859649122806},"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666}}}},"f":{"1":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.014598540145985401}}},"docs":{},"l":{"docs":{},"a":{"docs":{},"g":{"docs":{},")":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0072992700729927005}}}}}}},"a":{"1":{"docs":{"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.014184397163120567}}},"docs":{}}},"+":{"docs":{"part1/1. 两数之和.html":{"ref":"part1/1. 两数之和.html","tf":0.023255813953488372},"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.08522727272727272},"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.03389830508474576},"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259},"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.03875968992248062},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169},"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.013605442176870748},"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.017543859649122806},"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.03546099290780142}},"=":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.019230769230769232},"others/求1+2+…+n.html":{"ref":"others/求1+2+…+n.html","tf":0.06}}},",":{"docs":{"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259}}}},"=":{"0":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}},"docs":{"part1/1. 两数之和.html":{"ref":"part1/1. 两数之和.html","tf":0.09302325581395349},"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.09615384615384616},"part1/3. 无重复字符的最长子串.html":{"ref":"part1/3. 无重复字符的最长子串.html","tf":0.10869565217391304},"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.03977272727272727},"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.05084745762711865},"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.04838709677419355},"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":0.031746031746031744},"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.0975609756097561},"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.10429447852760736},"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.08666666666666667},"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.018292682926829267},"part2/125. 验证回文串.html":{"ref":"part2/125. 验证回文串.html","tf":0.10714285714285714},"part2/136. 只出现一次的数字.html":{"ref":"part2/136. 只出现一次的数字.html","tf":0.08333333333333333},"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.09067357512953368},"part2/147. 对链表进行插入排序.html":{"ref":"part2/147. 对链表进行插入排序.html","tf":0.08771929824561403},"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.027777777777777776},"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.13114754098360656},"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.10526315789473684},"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.09174311926605505},"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.05},"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.043795620437956206},"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.06976744186046512},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.0783132530120482},"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.14285714285714285},"part7/680. 验证回文字符串 Ⅱ.html":{"ref":"part7/680. 验证回文字符串 Ⅱ.html","tf":0.09375},"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.11818181818181818},"partmore/1371. 每个元音包含偶数次的最长子字符串.html":{"ref":"partmore/1371. 每个元音包含偶数次的最长子字符串.html","tf":0.029411764705882353},"partmore/1431. 拥有最多糖果的孩子.html":{"ref":"partmore/1431. 拥有最多糖果的孩子.html","tf":0.08771929824561403},"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.041666666666666664},"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.08771929824561403},"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.09219858156028368},"others/求1+2+…+n.html":{"ref":"others/求1+2+…+n.html","tf":0.02}},"=":{"docs":{"part1/1. 两数之和.html":{"ref":"part1/1. 两数之和.html","tf":0.023255813953488372},"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.009615384615384616},"part1/3. 无重复字符的最长子串.html":{"ref":"part1/3. 无重复字符的最长子串.html","tf":0.043478260869565216},"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.016129032258064516},"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":0.015873015873015872},"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.012195121951219513},"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.012269938650306749},"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667},"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.06707317073170732},"part2/147. 对链表进行插入排序.html":{"ref":"part2/147. 对链表进行插入排序.html","tf":0.017543859649122806},"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.042105263157894736},"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.01834862385321101},"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.016666666666666666},"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0364963503649635},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169},"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.0070921985815602835},"others/求1+2+…+n.html":{"ref":"others/求1+2+…+n.html","tf":0.02}}}},"f":{"1":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.014598540145985401}}},"2":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0072992700729927005}},")":{"docs":{},";":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.014598540145985401}}}},";":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0072992700729927005}}}},"3":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.014598540145985401}}},"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"part1/1. 两数之和.html":{"ref":"part1/1. 两数之和.html","tf":0.023255813953488372}}}}}}}},"l":{"docs":{},"a":{"docs":{},"g":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.028846153846153848},"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0072992700729927005},"others/求1+2+…+n.html":{"ref":"others/求1+2+…+n.html","tf":0.02}},";":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.009615384615384616}}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"m":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"a":{"docs":{},"n":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182}}}}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.016666666666666666}}}}}}}}}}},"d":{"docs":{},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.015503875968992248}}}}}}}}}}}}}}}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"partmore/1371. 每个元音包含偶数次的最长子字符串.html":{"ref":"partmore/1371. 每个元音包含偶数次的最长子字符串.html","tf":0.029411764705882353}}}}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"u":{"docs":{},"o":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.014184397163120567}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.010526315789473684}}}}}},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},";":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.012195121951219513},"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.014598540145985401}}}}}}}},"h":{"docs":{"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.016129032258064516}},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{"part1/3. 无重复字符的最长子串.html":{"ref":"part1/3. 无重复字符的最长子串.html","tf":0.021739130434782608},"partmore/1371. 每个元音包含偶数次的最长子字符串.html":{"ref":"partmore/1371. 每个元音包含偶数次的最长子字符串.html","tf":0.029411764705882353}},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"<":{"docs":{},">":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"part1/1. 两数之和.html":{"ref":"part1/1. 两数之和.html","tf":0.023255813953488372},"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0051813471502590676},"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.007751937984496124},"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.013605442176870748},"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909}}}}}}}}}},"[":{"docs":{},"s":{"docs":{},".":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{},"]":{"docs":{"part1/3. 无重复字符的最长子串.html":{"ref":"part1/3. 无重复字符的最长子串.html","tf":0.021739130434782608}}}}}}}}}}}}}}}}}},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.009615384615384616},"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338},"part2/147. 对链表进行插入排序.html":{"ref":"part2/147. 对链表进行插入排序.html","tf":0.017543859649122806}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0051813471502590676},"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.01834862385321101}},";":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.009615384615384616},"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}}},".":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}}}}}}}}}}}},";":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.009615384615384616},"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.024539877300613498},"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.007772020725388601},"part2/147. 对链表进行插入排序.html":{"ref":"part2/147. 对链表进行插入排序.html","tf":0.03508771929824561},"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.045871559633027525}}},",":{"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.012269938650306749}}},")":{"docs":{"part2/147. 对链表进行插入排序.html":{"ref":"part2/147. 对链表进行插入排序.html","tf":0.017543859649122806},"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.027522935779816515}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"part1/1. 两数之和.html":{"ref":"part1/1. 两数之和.html","tf":0.046511627906976744},"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.019230769230769232},"part1/3. 无重复字符的最长子串.html":{"ref":"part1/3. 无重复字符的最长子串.html","tf":0.08695652173913043},"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.07386363636363637},"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.01694915254237288},"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.04838709677419355},"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":0.047619047619047616},"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.018404907975460124},"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.06},"part2/125. 验证回文串.html":{"ref":"part2/125. 验证回文串.html","tf":0.10714285714285714},"part2/136. 只出现一次的数字.html":{"ref":"part2/136. 只出现一次的数字.html","tf":0.08333333333333333},"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.04145077720207254},"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.046296296296296294},"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.04918032786885246},"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.06315789473684211},"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.06201550387596899},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.018072289156626505},"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.07482993197278912},"part7/680. 验证回文字符串 Ⅱ.html":{"ref":"part7/680. 验证回文字符串 Ⅱ.html","tf":0.09375},"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.045454545454545456},"partmore/1371. 每个元音包含偶数次的最长子字符串.html":{"ref":"partmore/1371. 每个元音包含偶数次的最长子字符串.html","tf":0.029411764705882353},"partmore/1431. 拥有最多糖果的孩子.html":{"ref":"partmore/1431. 拥有最多糖果的孩子.html","tf":0.03508771929824561},"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.03508771929824561},"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.03546099290780142},"others/求1+2+…+n.html":{"ref":"others/求1+2+…+n.html","tf":0.02}},"[":{"0":{"docs":{},"]":{"docs":{},";":{"docs":{"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.016666666666666666}}}}},"1":{"2":{"8":{"docs":{},"]":{"docs":{},";":{"docs":{"part1/3. 无重复字符的最长子串.html":{"ref":"part1/3. 无重复字符的最长子串.html","tf":0.021739130434782608}}}}},"docs":{}},"docs":{"partmore/1371. 每个元音包含偶数次的最长子字符串.html":{"ref":"partmore/1371. 每个元音包含偶数次的最长子字符串.html","tf":0.029411764705882353}}},"docs":{},"]":{"docs":{"part1/1. 两数之和.html":{"ref":"part1/1. 两数之和.html","tf":0.023255813953488372},"part1/3. 无重复字符的最长子串.html":{"ref":"part1/3. 无重复字符的最长子串.html","tf":0.021739130434782608},"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.011363636363636364},"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.010526315789473684},"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.03333333333333333},"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374},"partmore/1371. 每个元音包含偶数次的最长子字符串.html":{"ref":"partmore/1371. 每个元音包含偶数次的最长子字符串.html","tf":0.029411764705882353}},"[":{"docs":{},"]":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.00546448087431694},"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.016666666666666666},"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.020833333333333332},"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.014184397163120567}},"[":{"docs":{},"]":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}}}}}},"n":{"docs":{},"]":{"docs":{},"[":{"2":{"docs":{},"]":{"docs":{},";":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.00546448087431694}}}}},"docs":{},"m":{"docs":{},"]":{"docs":{},"[":{"docs":{},"m":{"docs":{},"]":{"docs":{},";":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}}}}}}}},";":{"docs":{"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.010526315789473684},"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374},"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.0070921985815602835}}}},"u":{"docs":{},"m":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"]":{"docs":{},";":{"docs":{"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.016666666666666666}}}}}}}}}}}}}}},"e":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":0.031746031746031744}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},";":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.00546448087431694}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"o":{"docs":{},"f":{"docs":{},"(":{"docs":{},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},",":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"e":{"docs":{},"x":{"2":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182}}},"docs":{}},"g":{"docs":{},"r":{"docs":{},"e":{"docs":{"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.016666666666666666}},"e":{"docs":{},"s":{"docs":{},"[":{"docs":{},"p":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},"]":{"docs":{},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.016666666666666666}}}}}}}},"docs":{}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"part2/147. 对链表进行插入排序.html":{"ref":"part2/147. 对链表进行插入排序.html","tf":0.017543859649122806}}}}}}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"1":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.011363636363636364}}},"docs":{}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"1":{"docs":{},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"1":{"docs":{},"]":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182}}}},"docs":{}}}}}}}},"docs":{}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756}}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.009174311926605505}}}}}}}},")":{"docs":{},";":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667}}},")":{"docs":{},",":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}},"s":{"docs":{},"s":{"docs":{},"y":{"docs":{},"m":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.012195121951219513}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"part2/125. 验证回文串.html":{"ref":"part2/125. 验证回文串.html","tf":0.03571428571428571}}}}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}}}}}}}},"i":{"docs":{"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":3.333333333333333},"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":3.333333333333333}}},";":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}},"的":{"docs":{},"值":{"docs":{},"就":{"docs":{},"为":{"docs":{},"出":{"docs":{},"现":{"docs":{},"偶":{"docs":{},"数":{"docs":{},"次":{"docs":{},"该":{"docs":{},"字":{"docs":{},"符":{"docs":{},"的":{"docs":{},"长":{"docs":{},"度":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"记":{"docs":{},"录":{"docs":{},"最":{"docs":{},"大":{"docs":{},"的":{"docs":{},"值":{"docs":{},"。":{"docs":{},"但":{"docs":{},"我":{"docs":{},"们":{"docs":{},"需":{"docs":{},"要":{"docs":{},"枚":{"docs":{},"举":{"docs":{},"i":{"docs":{},"和":{"docs":{},"j":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"仍":{"docs":{},"然":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"2":{"docs":{},")":{"docs":{},"。":{"docs":{"partmore/1371. 每个元音包含偶数次的最长子字符串.html":{"ref":"partmore/1371. 每个元音包含偶数次的最长子字符串.html","tf":0.029411764705882353}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":3.333333333333333}}}},"m":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.03409090909090909},"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.017543859649122806}},"a":{"docs":{},"p":{"docs":{"part1/1. 两数之和.html":{"ref":"part1/1. 两数之和.html","tf":0.046511627906976744},"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.010362694300518135},"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.015503875968992248},"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.02040816326530612},"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.01818181818181818}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},")":{"docs":{},";":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.010362694300518135}}}}}}}}}}},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"(":{"0":{"docs":{},",":{"1":{"docs":{},")":{"docs":{},";":{"docs":{"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.013605442176870748},"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909}}}}},"docs":{}}},"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},",":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},".":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},")":{"docs":{},";":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0051813471502590676}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},";":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0051813471502590676}}}},"x":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.04},"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.01639344262295082},"partmore/1431. 拥有最多糖果的孩子.html":{"ref":"partmore/1431. 拥有最多糖果的孩子.html","tf":0.017543859649122806},"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.01694915254237288}}}}}}}},";":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667},"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.01092896174863388}}},")":{"docs":{"partmore/1431. 拥有最多糖果的孩子.html":{"ref":"partmore/1431. 拥有最多糖果的孩子.html","tf":0.017543859649122806}},";":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.01092896174863388}}}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.01639344262295082}}}}}}}}}}}}}}},"(":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.010526315789473684}}}}}}}},"t":{"docs":{},"h":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},",":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.02666666666666667}}}}}},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.00546448087431694}}}}},"docs":{}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},",":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.00546448087431694}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"1":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.010526315789473684}}}}}},"docs":{}}}}}}}}},"docs":{},"i":{"docs":{},"]":{"docs":{},",":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.02185792349726776}}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"1":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.010526315789473684}}}}}},"docs":{}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},",":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.02185792349726776}}}}}}}}}}}}}}}}}},"e":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.012195121951219513}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"d":{"docs":{"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.007751937984496124}},";":{"docs":{"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.015503875968992248}}}}}},"n":{"docs":{"part1/1. 两数之和.html":{"ref":"part1/1. 两数之和.html","tf":0.023255813953488372},"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.022727272727272728},"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.01694915254237288},"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.016129032258064516},"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.02},"part2/125. 验证回文串.html":{"ref":"part2/125. 验证回文串.html","tf":0.07142857142857142},"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.01639344262295082},"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.021052631578947368},"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.03333333333333333},"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.03875968992248062},"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.02040816326530612},"part7/680. 验证回文字符串 Ⅱ.html":{"ref":"part7/680. 验证回文字符串 Ⅱ.html","tf":0.0625},"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909},"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.03125},"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403},"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.0851063829787234},"others/求1+2+…+n.html":{"ref":"others/求1+2+…+n.html","tf":0.02}},"e":{"docs":{},"w":{"docs":{"part1/1. 两数之和.html":{"ref":"part1/1. 两数之和.html","tf":0.023255813953488372},"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.028846153846153848},"part1/3. 无重复字符的最长子串.html":{"ref":"part1/3. 无重复字符的最长子串.html","tf":0.021739130434782608},"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.016129032258064516},"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.012195121951219513},"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.012269938650306749},"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667},"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756},"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.02072538860103627},"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259},"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.00546448087431694},"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.010526315789473684},"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.05},"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.007751937984496124},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.030120481927710843},"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.02040816326530612},"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909},"partmore/1371. 每个元音包含偶数次的最长子字符串.html":{"ref":"partmore/1371. 每个元音包含偶数次的最长子字符串.html","tf":0.029411764705882353},"partmore/1431. 拥有最多糖果的孩子.html":{"ref":"partmore/1431. 拥有最多糖果的孩子.html","tf":0.017543859649122806},"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.020833333333333332},"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403},"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.02127659574468085}}},"x":{"docs":{},"t":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338},"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.009174311926605505}},".":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}}}}}}},";":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0051813471502590676},"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.009174311926605505}}}}}},"u":{"docs":{},"m":{"docs":{"part1/1. 两数之和.html":{"ref":"part1/1. 两数之和.html","tf":0.023255813953488372},"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.00546448087431694},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169},"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374}},"s":{"1":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.011363636363636364}},",":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.011363636363636364}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},";":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182}}}}}}}}}}},"2":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182}},")":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182}}},",":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.017045454545454544}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},";":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182}}}}}}}}}},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"2":{"docs":{},"]":{"docs":{},")":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182}}}}},"docs":{}}}}}}},"。":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182}}}},"docs":{},",":{"docs":{"part1/1. 两数之和.html":{"ref":"part1/1. 两数之和.html","tf":0.023255813953488372},"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.013605442176870748}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.007751937984496124}},";":{"docs":{"part1/1. 两数之和.html":{"ref":"part1/1. 两数之和.html","tf":0.023255813953488372},"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.01639344262295082},"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.021052631578947368},"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.02040816326530612}}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.03278688524590164}},";":{"docs":{"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.042105263157894736}}}}},"docs":{},"i":{"docs":{},"]":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.04371584699453552},"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374}},"即":{"docs":{},"可":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"存":{"docs":{},"在":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"返":{"docs":{},"回":{"docs":{},"，":{"docs":{},"不":{"docs":{},"存":{"docs":{},"在":{"docs":{},"则":{"docs":{},"往":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"表":{"docs":{},"中":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"进":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"，":{"docs":{},"表":{"docs":{},"示":{"docs":{},"之":{"docs":{},"前":{"docs":{},"已":{"docs":{},"经":{"docs":{},"出":{"docs":{},"现":{"docs":{},"过":{"docs":{},"值":{"docs":{},"为":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"的":{"docs":{},"数":{"docs":{},"。":{"docs":{"part1/1. 两数之和.html":{"ref":"part1/1. 两数之和.html","tf":0.023255813953488372}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"的":{"docs":{},"和":{"docs":{},"为":{"docs":{},"k":{"docs":{"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374}}}}}}}},"j":{"docs":{},"]":{"docs":{"part1/1. 两数之和.html":{"ref":"part1/1. 两数之和.html","tf":0.023255813953488372}}}}},")":{"docs":{"part2/136. 只出现一次的数字.html":{"ref":"part2/136. 只出现一次的数字.html","tf":0.041666666666666664},"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.01639344262295082},"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.021052631578947368},"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.015503875968992248}}},"，":{"docs":{},"其":{"docs":{},"数":{"docs":{},"字":{"docs":{},"都":{"docs":{},"在":{"docs":{"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.015503875968992248}}}}}}}},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}}}},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},"s":{"docs":{},")":{"docs":{"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.016129032258064516}},";":{"docs":{"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.016129032258064516}}}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.016666666666666666}}}}}}}}}},",":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}},"l":{"docs":{},"l":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.019230769230769232},"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.024390243902439025},"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.03048780487804878},"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.009174311926605505}},")":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.028846153846153848},"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.012195121951219513},"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.018404907975460124},"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.03048780487804878},"part2/147. 对链表进行插入排序.html":{"ref":"part2/147. 对链表进行插入排序.html","tf":0.03508771929824561},"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.01834862385321101},"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.014598540145985401}}},";":{"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.012269938650306749},"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0051813471502590676},"part2/147. 对链表进行插入排序.html":{"ref":"part2/147. 对链表进行插入排序.html","tf":0.017543859649122806},"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.01834862385321101},"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0072992700729927005}}}}}},")":{"docs":{"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.0070921985815602835},"others/求1+2+…+n.html":{"ref":"others/求1+2+…+n.html","tf":0.02}},")":{"docs":{},"。":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182}}}},";":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667},"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.0070921985815602835}}}},"o":{"docs":{},"w":{"docs":{"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.024390243902439025},"part2/147. 对链表进行插入排序.html":{"ref":"part2/147. 对链表进行插入排序.html","tf":0.017543859649122806}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.036585365853658534},"part2/147. 对链表进行插入排序.html":{"ref":"part2/147. 对链表进行插入排序.html","tf":0.017543859649122806}},";":{"docs":{"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.012195121951219513},"part2/147. 对链表进行插入排序.html":{"ref":"part2/147. 对链表进行插入排序.html","tf":0.017543859649122806}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"part2/147. 对链表进行插入排序.html":{"ref":"part2/147. 对链表进行插入排序.html","tf":0.017543859649122806}}}}}}},";":{"docs":{"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.012195121951219513},"part2/147. 对链表进行插入排序.html":{"ref":"part2/147. 对链表进行插入排序.html","tf":0.017543859649122806}}}},"d":{"docs":{},"e":{"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.012269938650306749},"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.05699481865284974}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.012269938650306749},"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0051813471502590676}},";":{"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374},"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0051813471502590676}},";":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0051813471502590676}},"e":{"docs":{},";":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0051813471502590676}}}}}}}}},";":{"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374},"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.007772020725388601}}},"(":{"docs":{},")":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}},";":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0051813471502590676}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0051813471502590676}}}}},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},",":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0051813471502590676}}}}}}},")":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0051813471502590676}},";":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0051813471502590676}},"(":{"docs":{},")":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}},";":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}}}}}}}}}}}},";":{"docs":{"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.007751937984496124},"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.0070921985815602835},"others/求1+2+…+n.html":{"ref":"others/求1+2+…+n.html","tf":0.02}}},"）":{"docs":{},"。":{"docs":{"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.007751937984496124}}},"，":{"docs":{},"可":{"docs":{},"知":{"docs":{},"至":{"docs":{},"少":{"docs":{},"存":{"docs":{},"在":{"docs":{},"一":{"docs":{},"个":{"docs":{},"重":{"docs":{},"复":{"docs":{},"的":{"docs":{},"整":{"docs":{},"数":{"docs":{},"。":{"docs":{},"假":{"docs":{},"设":{"docs":{},"只":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"重":{"docs":{},"复":{"docs":{},"的":{"docs":{},"整":{"docs":{},"数":{"docs":{},"，":{"docs":{},"找":{"docs":{},"出":{"docs":{},"这":{"docs":{},"个":{"docs":{},"重":{"docs":{},"复":{"docs":{},"的":{"docs":{},"数":{"docs":{},"。":{"docs":{"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.007751937984496124}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},",":{"docs":{"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666}}},"j":{"1":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}},"2":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}},"docs":{}},"+":{"docs":{},"+":{"docs":{},")":{"docs":{"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.0070921985815602835}}}}}},"p":{"docs":{"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.016666666666666666},"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.014598540145985401},"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666}},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{"part1/1. 两数之和.html":{"ref":"part1/1. 两数之和.html","tf":0.023255813953488372},"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.009615384615384616},"part1/3. 无重复字符的最长子串.html":{"ref":"part1/3. 无重复字符的最长子串.html","tf":0.021739130434782608},"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182},"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.03389830508474576},"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.016129032258064516},"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":0.015873015873015872},"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.012195121951219513},"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.012269938650306749},"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.013333333333333334},"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.012195121951219513},"part2/125. 验证回文串.html":{"ref":"part2/125. 验证回文串.html","tf":0.03571428571428571},"part2/136. 只出现一次的数字.html":{"ref":"part2/136. 只出现一次的数字.html","tf":0.041666666666666664},"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.04145077720207254},"part2/147. 对链表进行插入排序.html":{"ref":"part2/147. 对链表进行插入排序.html","tf":0.017543859649122806},"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259},"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.01639344262295082},"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.021052631578947368},"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.01834862385321101},"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.016666666666666666},"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0072992700729927005},"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.015503875968992248},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.012048192771084338},"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.013605442176870748},"part7/680. 验证回文字符串 Ⅱ.html":{"ref":"part7/680. 验证回文字符串 Ⅱ.html","tf":0.03125},"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909},"partmore/1371. 每个元音包含偶数次的最长子字符串.html":{"ref":"partmore/1371. 每个元音包含偶数次的最长子字符串.html","tf":0.029411764705882353},"partmore/1431. 拥有最多糖果的孩子.html":{"ref":"partmore/1431. 拥有最多糖果的孩子.html","tf":0.017543859649122806},"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666},"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403},"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.014184397163120567},"others/求1+2+…+n.html":{"ref":"others/求1+2+…+n.html","tf":0.02}}}}}},"t":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.007772020725388601}}}}},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},",":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}}}}}}},"操":{"docs":{},"作":{"docs":{},"面":{"docs":{},"临":{"docs":{},"的":{"docs":{},"主":{"docs":{},"要":{"docs":{},"问":{"docs":{},"题":{"docs":{},"是":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"只":{"docs":{},"使":{"docs":{},"用":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"数":{"docs":{},"据":{"docs":{},"结":{"docs":{},"构":{"docs":{},"存":{"docs":{},"储":{"docs":{},"，":{"docs":{},"当":{"docs":{},"缓":{"docs":{},"存":{"docs":{},"容":{"docs":{},"量":{"docs":{},"达":{"docs":{},"到":{"docs":{},"上":{"docs":{},"限":{"docs":{},"后":{"docs":{},"，":{"docs":{},"不":{"docs":{},"容":{"docs":{},"易":{"docs":{},"删":{"docs":{},"除":{"docs":{},"最":{"docs":{},"久":{"docs":{},"未":{"docs":{},"使":{"docs":{},"用":{"docs":{},"的":{"docs":{},"数":{"docs":{},"据":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"此":{"docs":{},"时":{"docs":{},"能":{"docs":{},"维":{"docs":{},"护":{"docs":{},"一":{"docs":{},"个":{"docs":{},"类":{"docs":{},"似":{"docs":{},"于":{"docs":{},"优":{"docs":{},"先":{"docs":{},"队":{"docs":{},"列":{"docs":{},"的":{"docs":{},"数":{"docs":{},"据":{"docs":{},"结":{"docs":{},"构":{"docs":{},"，":{"docs":{},"把":{"docs":{},"队":{"docs":{},"列":{"docs":{},"中":{"docs":{},"最":{"docs":{},"久":{"docs":{},"未":{"docs":{},"使":{"docs":{},"用":{"docs":{},"的":{"docs":{},"数":{"docs":{},"据":{"docs":{},"删":{"docs":{},"除":{"docs":{},"就":{"docs":{},"比":{"docs":{},"较":{"docs":{},"容":{"docs":{},"易":{"docs":{},"了":{"docs":{},"。":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.019230769230769232},"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.024539877300613498},"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.027522935779816515}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.019230769230769232},"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374},"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.009174311926605505}},";":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.009615384615384616},"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374}}}}}}}},";":{"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374},"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.01834862385321101}}},"v":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}},",":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}}}}}}},";":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}}}},"r":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666}},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.03333333333333333},"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666}}},",":{"docs":{"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666}}}}}}}}}}}}}},"i":{"docs":{},"v":{"docs":{},"a":{"docs":{},"t":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182},"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756},"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338},"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.018518518518518517},"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.01834862385321101},"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.014598540145985401},"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.007751937984496124},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.012048192771084338}}}}}},"o":{"docs":{},"t":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}}}}}}}},",":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.029197080291970802}}},"、":{"docs":{},"q":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.014598540145985401}},"，":{"docs":{},"最":{"docs":{},"近":{"docs":{},"公":{"docs":{},"共":{"docs":{},"祖":{"docs":{},"先":{"docs":{},"表":{"docs":{},"示":{"docs":{},"为":{"docs":{},"一":{"docs":{},"个":{"docs":{},"结":{"docs":{},"点":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0072992700729927005}}}}}}}}}}}}}}}}}},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.012048192771084338}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}}}}}}}}},"<":{"docs":{},">":{"docs":{},"(":{"docs":{},"i":{"docs":{},",":{"docs":{},"s":{"docs":{},"b":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.016129032258064516},"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0072992700729927005}},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.028368794326241134}},")":{"docs":{"part1/1. 两数之和.html":{"ref":"part1/1. 两数之和.html","tf":0.023255813953488372},"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.02127659574468085}}},"。":{"docs":{},"但":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"2":{"docs":{},")":{"docs":{},"。":{"docs":{"part1/1. 两数之和.html":{"ref":"part1/1. 两数之和.html","tf":0.023255813953488372}}}}},"docs":{}}}}}}}}}}}},"，":{"docs":{},"请":{"docs":{},"你":{"docs":{},"在":{"docs":{},"该":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"找":{"docs":{},"出":{"docs":{},"和":{"docs":{},"为":{"docs":{},"目":{"docs":{},"标":{"docs":{},"值":{"docs":{},"的":{"docs":{},"那":{"docs":{"part1/1. 两数之和.html":{"ref":"part1/1. 两数之和.html","tf":0.023255813953488372}}}}}}}}}}}}}}}}}}},"已":{"docs":{},"知":{"docs":{},"，":{"docs":{},"此":{"docs":{},"时":{"docs":{},"只":{"docs":{},"要":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"a":{"1":{"docs":{},"或":{"docs":{},"者":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"n":{"docs":{},"，":{"docs":{},"都":{"docs":{},"可":{"docs":{},"求":{"docs":{},"得":{"docs":{},"另":{"docs":{},"一":{"docs":{},"个":{"docs":{},"的":{"docs":{},"值":{"docs":{},"，":{"docs":{},"只":{"docs":{},"要":{"docs":{},"判":{"docs":{},"断":{"docs":{},"是":{"docs":{},"否":{"docs":{},"为":{"docs":{},"正":{"docs":{},"整":{"docs":{},"数":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"判":{"docs":{},"断":{"docs":{},"是":{"docs":{},"否":{"docs":{},"存":{"docs":{},"在":{"docs":{},"答":{"docs":{},"案":{"docs":{},"。":{"docs":{"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.0070921985815602835}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}},"i":{"docs":{},"l":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338},"part2/147. 对链表进行插入排序.html":{"ref":"part2/147. 对链表进行插入排序.html","tf":0.017543859649122806}},".":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}},";":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"part2/147. 对链表进行插入排序.html":{"ref":"part2/147. 对链表进行插入排序.html","tf":0.017543859649122806}},";":{"docs":{"part2/147. 对链表进行插入排序.html":{"ref":"part2/147. 对链表进行插入排序.html","tf":0.017543859649122806}}}}}}}},";":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0051813471502590676}}}}}},"w":{"docs":{},"o":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"part1/1. 两数之和.html":{"ref":"part1/1. 两数之和.html","tf":0.023255813953488372}}}}}}}}}}}}},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":0.031746031746031744},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}},";":{"docs":{"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":0.015873015873015872}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.01092896174863388}},";":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.00546448087431694}}}}},"i":{"docs":{},"n":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.01092896174863388}},";":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.00546448087431694}}}}}}}}},"o":{"docs":{},"p":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.013333333333333334}}},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259}},")":{"docs":{"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259}}},"s":{"docs":{},")":{"docs":{"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.018518518518518517}}}}}}}},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.018292682926829267},"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.043795620437956206}}}}}}},"u":{"docs":{},"e":{"docs":{},";":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.024390243902439025},"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666}}},")":{"docs":{},";":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}}}}}}},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},".":{"docs":{},"c":{"docs":{},"a":{"docs":{},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.007772020725388601}}}}}}},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0051813471502590676}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0051813471502590676}}}}}}}}}}},"{":{"docs":{"part1/1. 两数之和.html":{"ref":"part1/1. 两数之和.html","tf":0.023255813953488372},"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.038461538461538464},"part1/3. 无重复字符的最长子串.html":{"ref":"part1/3. 无重复字符的最长子串.html","tf":0.043478260869565216},"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.028409090909090908},"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.03389830508474576},"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.03225806451612903},"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":0.047619047619047616},"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.04878048780487805},"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.049079754601226995},"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.06666666666666667},"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.06097560975609756},"part2/125. 验证回文串.html":{"ref":"part2/125. 验证回文串.html","tf":0.03571428571428571},"part2/136. 只出现一次的数字.html":{"ref":"part2/136. 只出现一次的数字.html","tf":0.041666666666666664},"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.07772020725388601},"part2/147. 对链表进行插入排序.html":{"ref":"part2/147. 对链表进行插入排序.html","tf":0.07017543859649122},"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.06481481481481481},"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.03825136612021858},"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.06315789473684211},"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.045871559633027525},"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.05},"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0364963503649635},"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.03875968992248062},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.04216867469879518},"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.013605442176870748},"part7/680. 验证回文字符串 Ⅱ.html":{"ref":"part7/680. 验证回文字符串 Ⅱ.html","tf":0.03125},"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909},"partmore/1371. 每个元音包含偶数次的最长子字符串.html":{"ref":"partmore/1371. 每个元音包含偶数次的最长子字符串.html","tf":0.029411764705882353},"partmore/1431. 拥有最多糖果的孩子.html":{"ref":"partmore/1431. 拥有最多糖果的孩子.html","tf":0.05263157894736842},"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.03125},"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.017543859649122806},"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.04964539007092199},"others/求1+2+…+n.html":{"ref":"others/求1+2+…+n.html","tf":0.02}}},"两":{"docs":{},"个":{"docs":{"part1/1. 两数之和.html":{"ref":"part1/1. 两数之和.html","tf":0.023255813953488372}},"机":{"docs":{},"器":{"docs":{},"人":{"docs":{},"在":{"docs":{},"任":{"docs":{},"意":{"docs":{},"时":{"docs":{},"刻":{"docs":{},"都":{"docs":{},"不":{"docs":{},"能":{"docs":{},"移":{"docs":{},"动":{"docs":{},"到":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}}}}}}}}}}}},"最":{"docs":{},"后":{"docs":{},"都":{"docs":{},"要":{"docs":{},"到":{"docs":{},"达":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}}}}}}}}}}},"数":{"docs":{},"之":{"docs":{},"和":{"docs":{"part1/1. 两数之和.html":{"ref":"part1/1. 两数之和.html","tf":5}}}},"相":{"docs":{},"加":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":5}}}}}},"但":{"docs":{},"我":{"docs":{},"们":{"docs":{},"可":{"docs":{},"以":{"docs":{},"通":{"docs":{},"过":{"docs":{},"建":{"docs":{},"立":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"表":{"docs":{},"，":{"docs":{},"当":{"docs":{},"读":{"docs":{},"取":{"docs":{},"到":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"时":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"判":{"docs":{},"断":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"表":{"docs":{},"里":{"docs":{},"是":{"docs":{},"否":{"docs":{},"存":{"docs":{},"在":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"part1/1. 两数之和.html":{"ref":"part1/1. 两数之和.html","tf":0.023255813953488372}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"是":{"docs":{},"下":{"docs":{},"面":{"docs":{},"这":{"docs":{},"个":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756}}}}}},"啊":{"docs":{},"，":{"docs":{},"这":{"docs":{},"样":{"docs":{},"写":{"docs":{},"在":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"的":{"docs":{},"执":{"docs":{},"行":{"docs":{},"用":{"docs":{},"时":{"docs":{},"还":{"docs":{},"是":{"docs":{},"比":{"docs":{},"较":{"docs":{},"大":{"docs":{},"的":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{},"后":{"docs":{},"来":{"docs":{},"知":{"docs":{},"道":{"docs":{},"了":{"docs":{},"，":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},"中":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"k":{"docs":{},"e":{"docs":{},"d":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"的":{"docs":{},"数":{"docs":{},"据":{"docs":{},"结":{"docs":{},"构":{"docs":{},"可":{"docs":{},"以":{"docs":{},"很":{"docs":{},"方":{"docs":{},"便":{"docs":{},"的":{"docs":{},"解":{"docs":{},"决":{"docs":{},"这":{"docs":{},"个":{"docs":{},"问":{"docs":{},"题":{"docs":{},"。":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"k":{"docs":{},"e":{"docs":{},"d":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"里":{"docs":{},"面":{"docs":{},"的":{"docs":{},"结":{"docs":{},"点":{"docs":{},"自":{"docs":{},"带":{"docs":{},"一":{"docs":{},"个":{"docs":{},"前":{"docs":{},"驱":{"docs":{},"指":{"docs":{},"针":{"docs":{},"和":{"docs":{},"后":{"docs":{},"继":{"docs":{},"指":{"docs":{},"针":{"docs":{},"，":{"docs":{},"维":{"docs":{},"护":{"docs":{},"了":{"docs":{},"一":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"。":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"这":{"docs":{},"样":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"太":{"docs":{},"大":{"docs":{},"了":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"想":{"docs":{},"到":{"docs":{},"处":{"docs":{},"理":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},"和":{"docs":{},"时":{"docs":{},"最":{"docs":{},"常":{"docs":{},"用":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"是":{"docs":{},"建":{"docs":{},"立":{"docs":{},"一":{"docs":{},"个":{"docs":{},"前":{"docs":{},"缀":{"docs":{},"和":{"docs":{},"数":{"docs":{},"组":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"。":{"docs":{},"那":{"docs":{},"么":{"docs":{},"怎":{"docs":{},"么":{"docs":{},"利":{"docs":{},"用":{"docs":{},"这":{"docs":{},"个":{"docs":{},"前":{"docs":{},"缀":{"docs":{},"和":{"docs":{},"数":{"docs":{},"组":{"docs":{},"优":{"docs":{},"化":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"呢":{"docs":{},"？":{"docs":{},"首":{"docs":{},"先":{"docs":{},"看":{"docs":{},"一":{"docs":{},"个":{"docs":{},"样":{"docs":{},"例":{"docs":{"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"你":{"docs":{},"可":{"docs":{},"以":{"docs":{},"假":{"docs":{},"设":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182}},"每":{"docs":{},"种":{"docs":{},"输":{"docs":{},"入":{"docs":{},"只":{"docs":{},"会":{"docs":{},"对":{"docs":{},"应":{"docs":{},"一":{"docs":{},"个":{"docs":{},"答":{"docs":{},"案":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"，":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"同":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"不":{"docs":{},"能":{"docs":{},"使":{"docs":{},"用":{"docs":{},"两":{"docs":{},"遍":{"docs":{},"。":{"docs":{"part1/1. 两数之和.html":{"ref":"part1/1. 两数之和.html","tf":0.023255813953488372}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"运":{"docs":{},"用":{"docs":{},"递":{"docs":{},"归":{"docs":{},"和":{"docs":{},"迭":{"docs":{},"代":{"docs":{},"两":{"docs":{},"种":{"docs":{},"方":{"docs":{},"法":{"docs":{},"解":{"docs":{},"决":{"docs":{},"这":{"docs":{},"个":{"docs":{},"问":{"docs":{},"题":{"docs":{},"吗":{"docs":{},"？":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756}}}}}}}}}}}}}}}}}}}}},"不":{"docs":{},"使":{"docs":{},"用":{"docs":{},"额":{"docs":{},"外":{"docs":{},"空":{"docs":{},"间":{"docs":{},"来":{"docs":{},"实":{"docs":{},"现":{"docs":{},"吗":{"docs":{},"？":{"docs":{"part2/136. 只出现一次的数字.html":{"ref":"part2/136. 只出现一次的数字.html","tf":0.041666666666666664}}}}}}}}}}}}}},"迭":{"docs":{},"代":{"docs":{},"或":{"docs":{},"递":{"docs":{},"归":{"docs":{},"地":{"docs":{},"反":{"docs":{},"转":{"docs":{},"链":{"docs":{},"表":{"docs":{},"。":{"docs":{},"你":{"docs":{},"能":{"docs":{},"否":{"docs":{},"用":{"docs":{},"两":{"docs":{},"种":{"docs":{},"方":{"docs":{},"法":{"docs":{},"解":{"docs":{},"决":{"docs":{},"这":{"docs":{},"道":{"docs":{},"题":{"docs":{},"？":{"docs":{"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.009174311926605505}}}}}}}}}}}}}}}}}}}}}}}}}}},"认":{"docs":{},"为":{"docs":{},"输":{"docs":{},"入":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"总":{"docs":{},"是":{"docs":{},"有":{"docs":{},"效":{"docs":{},"的":{"docs":{},"；":{"docs":{},"输":{"docs":{},"入":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"中":{"docs":{},"没":{"docs":{},"有":{"docs":{},"额":{"docs":{},"外":{"docs":{},"的":{"docs":{},"空":{"docs":{},"格":{"docs":{},"，":{"docs":{},"且":{"docs":{},"输":{"docs":{},"入":{"docs":{},"的":{"docs":{},"方":{"docs":{},"括":{"docs":{},"号":{"docs":{},"总":{"docs":{},"是":{"docs":{},"符":{"docs":{},"合":{"docs":{},"格":{"docs":{},"式":{"docs":{},"要":{"docs":{},"求":{"docs":{},"的":{"docs":{},"。":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"不":{"docs":{},"能":{"docs":{},"只":{"docs":{},"是":{"docs":{},"单":{"docs":{},"纯":{"docs":{},"的":{"docs":{},"改":{"docs":{},"变":{"docs":{},"节":{"docs":{},"点":{"docs":{},"内":{"docs":{},"部":{"docs":{},"的":{"docs":{},"值":{"docs":{},"，":{"docs":{},"而":{"docs":{},"是":{"docs":{},"需":{"docs":{},"要":{"docs":{},"实":{"docs":{},"际":{"docs":{},"进":{"docs":{},"行":{"docs":{},"节":{"docs":{},"点":{"docs":{},"交":{"docs":{},"换":{"docs":{},"。":{"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"的":{"docs":{},"算":{"docs":{},"法":{"docs":{},"只":{"docs":{},"能":{"docs":{},"使":{"docs":{},"用":{"docs":{},"常":{"docs":{},"数":{"docs":{},"的":{"docs":{},"额":{"docs":{},"外":{"docs":{},"空":{"docs":{},"间":{"docs":{},"。":{"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374}}}}}}}}}}}}}},"应":{"docs":{},"该":{"docs":{},"具":{"docs":{},"有":{"docs":{},"线":{"docs":{},"性":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"。":{"docs":{"part2/136. 只出现一次的数字.html":{"ref":"part2/136. 只出现一次的数字.html","tf":0.041666666666666664}}}}}}}}}}}}}}}}},"是":{"docs":{},"否":{"docs":{},"可":{"docs":{},"以":{"docs":{},"在":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}}}}}},"一":{"docs":{},"个":{"docs":{},"专":{"docs":{},"业":{"docs":{},"的":{"docs":{},"小":{"docs":{},"偷":{"docs":{},"，":{"docs":{},"计":{"docs":{},"划":{"docs":{},"偷":{"docs":{},"窃":{"docs":{},"沿":{"docs":{},"街":{"docs":{},"的":{"docs":{},"房":{"docs":{},"屋":{"docs":{},"。":{"docs":{},"每":{"docs":{},"间":{"docs":{},"房":{"docs":{},"内":{"docs":{},"都":{"docs":{},"藏":{"docs":{},"有":{"docs":{},"一":{"docs":{},"定":{"docs":{},"的":{"docs":{},"现":{"docs":{},"金":{"docs":{},"，":{"docs":{},"影":{"docs":{},"响":{"docs":{},"你":{"docs":{},"偷":{"docs":{},"窃":{"docs":{},"的":{"docs":{},"唯":{"docs":{},"一":{"docs":{},"制":{"docs":{},"约":{"docs":{},"因":{"docs":{},"素":{"docs":{},"就":{"docs":{},"是":{"docs":{},"相":{"docs":{},"邻":{"docs":{},"的":{"docs":{},"房":{"docs":{},"屋":{"docs":{},"装":{"docs":{},"有":{"docs":{},"相":{"docs":{},"互":{"docs":{},"连":{"docs":{},"通":{"docs":{},"的":{"docs":{},"防":{"docs":{},"盗":{"docs":{},"系":{"docs":{},"统":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"两":{"docs":{},"间":{"docs":{},"相":{"docs":{},"邻":{"docs":{},"的":{"docs":{},"房":{"docs":{},"屋":{"docs":{},"在":{"docs":{},"同":{"docs":{},"一":{"docs":{},"晚":{"docs":{},"上":{"docs":{},"被":{"docs":{},"小":{"docs":{},"偷":{"docs":{},"闯":{"docs":{},"入":{"docs":{},"，":{"docs":{},"系":{"docs":{},"统":{"docs":{},"会":{"docs":{},"自":{"docs":{},"动":{"docs":{},"报":{"docs":{},"警":{"docs":{},"。":{"docs":{"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.010526315789473684}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"总":{"docs":{},"共":{"docs":{},"需":{"docs":{},"要":{"docs":{},"上":{"docs":{"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666}}}}}}},"有":{"docs":{},"两":{"docs":{},"个":{"docs":{},"机":{"docs":{},"器":{"docs":{},"人":{"docs":{},"帮":{"docs":{},"你":{"docs":{},"收":{"docs":{},"集":{"docs":{},"樱":{"docs":{},"桃":{"docs":{},"，":{"docs":{},"机":{"docs":{},"器":{"docs":{},"人":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}}}}}}}}}}}}}}}}}},"和":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.017045454545454544},"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338},"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.015503875968992248}},"一":{"docs":{},"个":{"docs":{},"目":{"docs":{},"标":{"docs":{},"值":{"docs":{"part1/1. 两数之和.html":{"ref":"part1/1. 两数之和.html","tf":0.023255813953488372}}}}},"整":{"docs":{},"数":{"docs":{"partmore/1431. 拥有最多糖果的孩子.html":{"ref":"partmore/1431. 拥有最多糖果的孩子.html","tf":0.017543859649122806}}}},"查":{"docs":{},"询":{"docs":{},"对":{"docs":{},"列":{"docs":{},"表":{"docs":{"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666}}}}}}},"直":{"docs":{},"接":{"docs":{},"先":{"docs":{},"修":{"docs":{},"课":{"docs":{},"程":{"docs":{},"数":{"docs":{},"对":{"docs":{},"列":{"docs":{},"表":{"docs":{"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666}}}}}}}}}}}}}},"为":{"docs":{},"k":{"docs":{},"。":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"说":{"docs":{},"这":{"docs":{},"个":{"docs":{},"题":{"docs":{},"转":{"docs":{},"换":{"docs":{},"成":{"docs":{},"了":{"docs":{},"在":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"找":{"docs":{},"出":{"docs":{},"两":{"docs":{},"数":{"docs":{},"之":{"docs":{},"差":{"docs":{},"为":{"docs":{},"k":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"。":{"docs":{},"和":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"1":{"docs":{},"类":{"docs":{},"似":{"docs":{},"，":{"docs":{},"通":{"docs":{},"过":{"docs":{},"建":{"docs":{},"立":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"表":{"docs":{},"的":{"docs":{},"方":{"docs":{},"式":{"docs":{},"可":{"docs":{},"以":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"解":{"docs":{},"决":{"docs":{},"这":{"docs":{},"个":{"docs":{},"问":{"docs":{},"题":{"docs":{},"。":{"docs":{"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"的":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":5}}}}}}},"s":{"docs":{},"的":{"docs":{},"连":{"docs":{},"续":{"docs":{},"正":{"docs":{},"数":{"docs":{},"序":{"docs":{},"列":{"docs":{"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":10}}}}}}}}}}},"可":{"docs":{},"被":{"docs":{"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":2.5}}}}},"思":{"docs":{},"路":{"2":{"docs":{},".":{"1":{"docs":{},".":{"docs":{"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.01694915254237288},"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667},"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756},"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.00546448087431694},"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.009174311926605505},"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.007751937984496124},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169},"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.0070921985815602835}}}},"docs":{}}},"docs":{"part1/1. 两数之和.html":{"ref":"part1/1. 两数之和.html","tf":0.046511627906976744},"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.019230769230769232},"part1/3. 无重复字符的最长子串.html":{"ref":"part1/3. 无重复字符的最长子串.html","tf":0.043478260869565216},"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.011363636363636364},"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.01694915254237288},"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.03225806451612903},"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":0.031746031746031744},"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.024390243902439025},"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.012269938650306749},"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667},"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756},"part2/125. 验证回文串.html":{"ref":"part2/125. 验证回文串.html","tf":0.07142857142857142},"part2/136. 只出现一次的数字.html":{"ref":"part2/136. 只出现一次的数字.html","tf":0.08333333333333333},"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0051813471502590676},"part2/147. 对链表进行插入排序.html":{"ref":"part2/147. 对链表进行插入排序.html","tf":0.03508771929824561},"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.018518518518518517},"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.00546448087431694},"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.021052631578947368},"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.009174311926605505},"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.03333333333333333},"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.014598540145985401},"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.007751937984496124},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169},"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.013605442176870748},"part7/680. 验证回文字符串 Ⅱ.html":{"ref":"part7/680. 验证回文字符串 Ⅱ.html","tf":0.0625},"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.01818181818181818},"partmore/1371. 每个元音包含偶数次的最长子字符串.html":{"ref":"partmore/1371. 每个元音包含偶数次的最长子字符串.html","tf":0.058823529411764705},"partmore/1431. 拥有最多糖果的孩子.html":{"ref":"partmore/1431. 拥有最多糖果的孩子.html","tf":0.03508771929824561},"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.020833333333333332},"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.017543859649122806},"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.0070921985815602835},"others/求1+2+…+n.html":{"ref":"others/求1+2+…+n.html","tf":0.04}},"是":{"docs":{},"一":{"docs":{},"样":{"docs":{},"的":{"docs":{},"，":{"docs":{},"注":{"docs":{},"意":{"docs":{},"好":{"docs":{},"进":{"docs":{},"入":{"docs":{},"队":{"docs":{},"列":{"docs":{},"的":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"。":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756}}}}}}}}}}}}}}}}}},"和":{"docs":{},"判":{"docs":{},"断":{"docs":{},"回":{"docs":{},"文":{"docs":{},"串":{"docs":{},"的":{"docs":{},"思":{"docs":{},"路":{"docs":{},"一":{"docs":{},"样":{"docs":{},"，":{"docs":{},"双":{"docs":{},"指":{"docs":{},"针":{"docs":{},"从":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"两":{"docs":{},"边":{"docs":{},"向":{"docs":{},"里":{"docs":{},"判":{"docs":{},"断":{"docs":{},"，":{"docs":{},"注":{"docs":{},"意":{"docs":{},"处":{"docs":{},"理":{"docs":{},"大":{"docs":{},"小":{"docs":{},"写":{"docs":{},"字":{"docs":{},"母":{"docs":{},"问":{"docs":{},"题":{"docs":{},"和":{"docs":{},"忽":{"docs":{},"略":{"docs":{},"非":{"docs":{},"字":{"docs":{},"母":{"docs":{},"和":{"docs":{},"数":{"docs":{},"字":{"docs":{},"字":{"docs":{},"符":{"docs":{"part2/125. 验证回文串.html":{"ref":"part2/125. 验证回文串.html","tf":0.03571428571428571}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"整":{"docs":{},"数":{"docs":{},"，":{"docs":{},"并":{"docs":{},"返":{"docs":{},"回":{"docs":{},"他":{"docs":{},"们":{"docs":{},"的":{"docs":{},"数":{"docs":{},"组":{"docs":{},"下":{"docs":{},"标":{"docs":{},"。":{"docs":{"part1/1. 两数之和.html":{"ref":"part1/1. 两数之和.html","tf":0.023255813953488372}}}}}}}}}}}}}},"反":{"docs":{},"转":{"docs":{"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":5}}}},"除":{"docs":{},"法":{"docs":{},"只":{"docs":{},"保":{"docs":{},"留":{"docs":{},"整":{"docs":{},"数":{"docs":{},"部":{"docs":{},"分":{"docs":{},"。":{"docs":{"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259}}}}}}}}}}}}},"除":{"docs":{},"的":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":2.5}}}}},"（":{"docs":{},"连":{"docs":{},"续":{"docs":{},"、":{"docs":{},"非":{"docs":{},"空":{"docs":{},"）":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"数":{"docs":{},"目":{"docs":{},"。":{"docs":{"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909}}}}}}}}}}}}}}}}},"：":{"docs":{"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909}}}}},"最":{"docs":{},"简":{"docs":{},"单":{"docs":{},"的":{"docs":{},"想":{"docs":{},"法":{"docs":{},"是":{"docs":{},"通":{"docs":{},"过":{"docs":{},"两":{"docs":{},"个":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"循":{"docs":{},"环":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"判":{"docs":{},"断":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"part1/1. 两数之和.html":{"ref":"part1/1. 两数之和.html","tf":0.023255813953488372}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"长":{"docs":{},"子":{"docs":{},"串":{"docs":{"part1/3. 无重复字符的最长子串.html":{"ref":"part1/3. 无重复字符的最长子串.html","tf":0.021739130434782608}}}},"回":{"docs":{},"文":{"docs":{},"子":{"docs":{},"串":{"docs":{"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":5}}}}}}},"后":{"docs":{},"，":{"docs":{},"还":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"参":{"docs":{},"考":{"docs":{},"了":{"docs":{},"大":{"docs":{},"佬":{"docs":{},"的":{"docs":{},"代":{"docs":{},"码":{"docs":{},"后":{"docs":{},"手":{"docs":{},"写":{"docs":{},"的":{"docs":{},"l":{"docs":{},"r":{"docs":{},"u":{"docs":{},"算":{"docs":{},"法":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{},"直":{"docs":{},"接":{"docs":{},"看":{"docs":{},"代":{"docs":{},"码":{"docs":{},"吧":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"扩":{"docs":{},"展":{"docs":{},"到":{"docs":{},"多":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"，":{"docs":{},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"只":{"docs":{},"有":{"docs":{},"奇":{"docs":{},"数":{"docs":{},"和":{"docs":{},"偶":{"docs":{},"数":{"docs":{},"两":{"docs":{},"种":{"docs":{},"状":{"docs":{},"态":{"docs":{},"，":{"docs":{},"而":{"docs":{},"两":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"会":{"docs":{},"有":{"docs":{},"四":{"docs":{},"种":{"docs":{},"状":{"docs":{},"态":{"docs":{},"(":{"docs":{},"a":{"docs":{},"奇":{"docs":{},"数":{"docs":{},"次":{"docs":{},"b":{"docs":{},"奇":{"docs":{},"数":{"docs":{},"次":{"docs":{},"、":{"docs":{},"a":{"docs":{},"偶":{"docs":{},"数":{"docs":{},"次":{"docs":{},"b":{"docs":{},"奇":{"docs":{},"数":{"docs":{},"次":{"docs":{},"、":{"docs":{},"a":{"docs":{},"奇":{"docs":{},"数":{"docs":{},"次":{"docs":{},"b":{"docs":{},"偶":{"docs":{},"数":{"docs":{},"次":{"docs":{},"、":{"docs":{},"a":{"docs":{},"偶":{"docs":{},"数":{"docs":{},"次":{"docs":{},"b":{"docs":{},"偶":{"docs":{},"数":{"docs":{},"次":{"docs":{},")":{"docs":{},"，":{"docs":{},"五":{"docs":{},"个":{"docs":{},"元":{"docs":{},"音":{"docs":{},"字":{"docs":{},"符":{"docs":{},"会":{"docs":{},"有":{"2":{"docs":{},"的":{"5":{"docs":{},"次":{"docs":{},"方":{"docs":{},"种":{"docs":{},"状":{"docs":{},"态":{"docs":{},"。":{"docs":{},"我":{"docs":{},"们":{"docs":{},"可":{"docs":{},"以":{"docs":{},"通":{"docs":{},"过":{"docs":{},"二":{"docs":{},"进":{"docs":{},"制":{"docs":{},"来":{"docs":{},"表":{"docs":{},"示":{"docs":{},"这":{"docs":{},"些":{"docs":{},"状":{"docs":{},"态":{"docs":{},"，":{"docs":{},"例":{"docs":{},"如":{"docs":{},"偶":{"docs":{},"数":{"docs":{},"次":{"docs":{},"就":{"docs":{},"是":{"0":{"docs":{},"，":{"docs":{},"奇":{"docs":{},"数":{"docs":{},"次":{"docs":{},"就":{"docs":{},"是":{"1":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"出":{"docs":{},"现":{"docs":{},"了":{"docs":{},"某":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"可":{"docs":{},"以":{"docs":{},"让":{"docs":{},"上":{"docs":{},"一":{"docs":{},"个":{"docs":{},"状":{"docs":{},"态":{"docs":{},"和":{"1":{"docs":{},"进":{"docs":{},"行":{"docs":{},"异":{"docs":{},"或":{"docs":{},"运":{"docs":{},"算":{"docs":{},"，":{"docs":{},"更":{"docs":{},"新":{"docs":{},"状":{"docs":{},"态":{"docs":{},"。":{"5":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"应":{"docs":{},"该":{"5":{"docs":{},"位":{"docs":{},"二":{"docs":{},"进":{"docs":{},"制":{"docs":{},"数":{"docs":{},"表":{"docs":{},"示":{"docs":{},"，":{"docs":{},"初":{"docs":{},"始":{"docs":{},"为":{"0":{"0":{"0":{"0":{"0":{"docs":{},"。":{"docs":{"partmore/1371. 每个元音包含偶数次的最长子字符串.html":{"ref":"partmore/1371. 每个元音包含偶数次的最长子字符串.html","tf":0.029411764705882353}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}},"docs":{}}}}}}},"docs":{}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"多":{"docs":{"partmore/1431. 拥有最多糖果的孩子.html":{"ref":"partmore/1431. 拥有最多糖果的孩子.html","tf":0.03508771929824561}}},"底":{"docs":{},"下":{"docs":{},"一":{"docs":{},"行":{"docs":{},"。":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}}}}}}},"给":{"docs":{},"定":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667}},"一":{"docs":{},"个":{"docs":{},"整":{"docs":{},"数":{"docs":{},"数":{"docs":{},"组":{"docs":{"part1/1. 两数之和.html":{"ref":"part1/1. 两数之和.html","tf":0.023255813953488372},"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909}},"和":{"docs":{},"一":{"docs":{},"个":{"docs":{},"整":{"docs":{},"数":{"docs":{"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374}}}}}}}}}}},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.01694915254237288}},"，":{"docs":{},"请":{"docs":{},"你":{"docs":{},"找":{"docs":{},"出":{"docs":{},"其":{"docs":{},"中":{"docs":{},"不":{"docs":{},"含":{"docs":{},"有":{"docs":{},"重":{"docs":{},"复":{"docs":{},"字":{"docs":{},"符":{"docs":{},"的":{"docs":{"part1/3. 无重复字符的最长子串.html":{"ref":"part1/3. 无重复字符的最长子串.html","tf":0.021739130434782608}}}}}}}}}}}}}}}},"验":{"docs":{},"证":{"docs":{},"它":{"docs":{},"是":{"docs":{},"否":{"docs":{},"是":{"docs":{},"回":{"docs":{},"文":{"docs":{},"串":{"docs":{},"，":{"docs":{},"只":{"docs":{},"考":{"docs":{},"虑":{"docs":{},"字":{"docs":{},"母":{"docs":{},"和":{"docs":{},"数":{"docs":{},"字":{"docs":{},"字":{"docs":{},"符":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"忽":{"docs":{},"略":{"docs":{},"字":{"docs":{},"母":{"docs":{},"的":{"docs":{},"大":{"docs":{},"小":{"docs":{},"写":{"docs":{},"。":{"docs":{"part2/125. 验证回文串.html":{"ref":"part2/125. 验证回文串.html","tf":0.03571428571428571}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"，":{"docs":{},"检":{"docs":{},"查":{"docs":{},"它":{"docs":{},"是":{"docs":{},"否":{"docs":{},"是":{"docs":{},"镜":{"docs":{},"像":{"docs":{},"对":{"docs":{},"称":{"docs":{},"的":{"docs":{},"。":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756}}}}}}}}}}}}}}},",":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0072992700729927005}}}}}},"非":{"docs":{},"空":{"docs":{},"整":{"docs":{},"数":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"除":{"docs":{},"了":{"docs":{},"某":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"只":{"docs":{},"出":{"docs":{},"现":{"docs":{},"一":{"docs":{},"次":{"docs":{},"以":{"docs":{},"外":{"docs":{},"，":{"docs":{},"其":{"docs":{},"余":{"docs":{},"每":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"均":{"docs":{},"出":{"docs":{},"现":{"docs":{},"两":{"docs":{},"次":{"docs":{},"。":{"docs":{},"找":{"docs":{},"出":{"docs":{},"那":{"docs":{},"个":{"docs":{},"只":{"docs":{},"出":{"docs":{},"现":{"docs":{},"了":{"docs":{},"一":{"docs":{},"次":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{"part2/136. 只出现一次的数字.html":{"ref":"part2/136. 只出现一次的数字.html","tf":0.041666666666666664}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{"part7/680. 验证回文字符串 Ⅱ.html":{"ref":"part7/680. 验证回文字符串 Ⅱ.html","tf":0.03125}}}}}}},"代":{"docs":{},"表":{"docs":{},"每":{"docs":{},"个":{"docs":{},"房":{"docs":{},"屋":{"docs":{},"存":{"docs":{},"放":{"docs":{},"金":{"docs":{},"额":{"docs":{},"的":{"docs":{},"非":{"docs":{},"负":{"docs":{},"整":{"docs":{},"数":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"计":{"docs":{},"算":{"docs":{},"你":{"docs":{"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.010526315789473684}}}}}}}}}}}}}}}}}}}}}}},"包":{"docs":{},"含":{"docs":{"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.007751937984496124}}}},"经":{"docs":{},"过":{"docs":{},"编":{"docs":{},"码":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"它":{"docs":{},"解":{"docs":{},"码":{"docs":{},"后":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"。":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}}}}}}}}}}}}}}}}}}}}},"两":{"docs":{},"个":{"docs":{},"大":{"docs":{},"小":{"docs":{},"为":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182}}}}}}},"逆":{"docs":{},"波":{"docs":{},"兰":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"总":{"docs":{},"是":{"docs":{},"有":{"docs":{},"效":{"docs":{},"的":{"docs":{},"。":{"docs":{},"换":{"docs":{},"句":{"docs":{},"话":{"docs":{},"说":{"docs":{},"，":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"总":{"docs":{},"会":{"docs":{},"得":{"docs":{},"出":{"docs":{},"有":{"docs":{},"效":{"docs":{},"数":{"docs":{},"值":{"docs":{},"且":{"docs":{},"不":{"docs":{},"存":{"docs":{},"在":{"docs":{},"除":{"docs":{},"数":{"docs":{},"为":{"docs":{"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"课":{"docs":{},"程":{"docs":{},"总":{"docs":{},"量":{"docs":{},"以":{"docs":{},"及":{"docs":{},"它":{"docs":{},"们":{"docs":{},"的":{"docs":{},"先":{"docs":{},"决":{"docs":{},"条":{"docs":{},"件":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"你":{"docs":{},"为":{"docs":{},"了":{"docs":{},"学":{"docs":{},"完":{"docs":{},"所":{"docs":{},"有":{"docs":{},"课":{"docs":{},"程":{"docs":{},"所":{"docs":{},"安":{"docs":{},"排":{"docs":{},"的":{"docs":{},"学":{"docs":{},"习":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"。":{"docs":{"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.016666666666666666}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"出":{"docs":{},"两":{"docs":{},"个":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.009615384615384616}}}},"一":{"docs":{},"个":{"docs":{"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":0.015873015873015872}}}}},"你":{"docs":{},"一":{"docs":{},"个":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}},"链":{"docs":{},"表":{"docs":{},"，":{"docs":{},"每":{"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374}}}}}},"整":{"docs":{},"数":{"docs":{},"数":{"docs":{},"组":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.00546448087431694}}}}}},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{"partmore/1371. 每个元音包含偶数次的最长子字符串.html":{"ref":"partmore/1371. 每个元音包含偶数次的最长子字符串.html","tf":0.029411764705882353}}}}},"数":{"docs":{},"组":{"docs":{"partmore/1431. 拥有最多糖果的孩子.html":{"ref":"partmore/1431. 拥有最多糖果的孩子.html","tf":0.017543859649122806}}}}}},"这":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"：":{"1":{"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374}}},"docs":{}}}}}},"课":{"docs":{},"程":{"docs":{},"总":{"docs":{},"数":{"docs":{"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666}}}}}}}},"题":{"docs":{},"目":{"docs":{},"描":{"docs":{},"述":{"2":{"docs":{},".":{"docs":{"part1/1. 两数之和.html":{"ref":"part1/1. 两数之和.html","tf":0.023255813953488372},"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.009615384615384616},"part1/3. 无重复字符的最长子串.html":{"ref":"part1/3. 无重复字符的最长子串.html","tf":0.021739130434782608},"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182},"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.01694915254237288},"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.016129032258064516},"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":0.015873015873015872},"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.012195121951219513},"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374},"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667},"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756},"part2/125. 验证回文串.html":{"ref":"part2/125. 验证回文串.html","tf":0.03571428571428571},"part2/136. 只出现一次的数字.html":{"ref":"part2/136. 只出现一次的数字.html","tf":0.041666666666666664},"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338},"part2/147. 对链表进行插入排序.html":{"ref":"part2/147. 对链表进行插入排序.html","tf":0.017543859649122806},"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259},"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.00546448087431694},"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.010526315789473684},"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.009174311926605505},"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.016666666666666666},"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0072992700729927005},"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.007751937984496124},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169},"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374},"part7/680. 验证回文字符串 Ⅱ.html":{"ref":"part7/680. 验证回文字符串 Ⅱ.html","tf":0.03125},"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909},"partmore/1371. 每个元音包含偶数次的最长子字符串.html":{"ref":"partmore/1371. 每个元音包含偶数次的最长子字符串.html","tf":0.029411764705882353},"partmore/1431. 拥有最多糖果的孩子.html":{"ref":"partmore/1431. 拥有最多糖果的孩子.html","tf":0.017543859649122806},"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666},"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403},"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.0070921985815602835},"others/求1+2+…+n.html":{"ref":"others/求1+2+…+n.html","tf":0.02}}}},"docs":{"part1/1. 两数之和.html":{"ref":"part1/1. 两数之和.html","tf":0.023255813953488372},"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.009615384615384616},"part1/3. 无重复字符的最长子串.html":{"ref":"part1/3. 无重复字符的最长子串.html","tf":0.021739130434782608},"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182},"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.01694915254237288},"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.016129032258064516},"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":0.015873015873015872},"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.012195121951219513},"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374},"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667},"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756},"part2/125. 验证回文串.html":{"ref":"part2/125. 验证回文串.html","tf":0.03571428571428571},"part2/136. 只出现一次的数字.html":{"ref":"part2/136. 只出现一次的数字.html","tf":0.041666666666666664},"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338},"part2/147. 对链表进行插入排序.html":{"ref":"part2/147. 对链表进行插入排序.html","tf":0.017543859649122806},"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259},"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.00546448087431694},"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.010526315789473684},"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.009174311926605505},"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.016666666666666666},"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0072992700729927005},"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.007751937984496124},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169},"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374},"part7/680. 验证回文字符串 Ⅱ.html":{"ref":"part7/680. 验证回文字符串 Ⅱ.html","tf":0.03125},"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909},"partmore/1371. 每个元音包含偶数次的最长子字符串.html":{"ref":"partmore/1371. 每个元音包含偶数次的最长子字符串.html","tf":0.029411764705882353},"partmore/1431. 拥有最多糖果的孩子.html":{"ref":"partmore/1431. 拥有最多糖果的孩子.html","tf":0.017543859649122806},"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666},"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403},"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.0070921985815602835},"others/求1+2+…+n.html":{"ref":"others/求1+2+…+n.html","tf":0.02}}}}}},"!":{"docs":{},"=":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.038461538461538464},"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":0.015873015873015872},"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.024390243902439025},"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.018404907975460124},"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756},"part2/147. 对链表进行插入排序.html":{"ref":"part2/147. 对链表进行插入排序.html","tf":0.017543859649122806},"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.009174311926605505},"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0072992700729927005}}}},"%":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.009615384615384616},"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":0.015873015873015872},"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.045454545454545456},"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.0070921985815602835}}},"/":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.009615384615384616},"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.028409090909090908},"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":0.031746031746031744},"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.024390243902439025},"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.018518518518518517},"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.0070921985815602835}},"=":{"docs":{"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":0.015873015873015872},"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.0070921985815602835}}},"/":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"用":{"docs":{},"于":{"docs":{},"完":{"docs":{},"成":{"docs":{},"对":{"docs":{},"反":{"docs":{},"转":{"docs":{},"后":{"docs":{},"链":{"docs":{},"表":{"docs":{},"的":{"docs":{},"连":{"docs":{},"接":{"docs":{},"，":{"docs":{},"默":{"docs":{},"认":{"docs":{},"先":{"docs":{},"指":{"docs":{},"向":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"，":{"docs":{},"考":{"docs":{},"虑":{"docs":{},"整":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"都":{"docs":{},"不":{"docs":{},"反":{"docs":{},"转":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"用":{"docs":{},"于":{"docs":{},"最":{"docs":{},"后":{"docs":{},"返":{"docs":{},"回":{"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374}}}}}}}}}}},"开":{"docs":{},"始":{"docs":{},"找":{"docs":{},"k":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"后":{"docs":{},"的":{"docs":{},"尾":{"docs":{},"节":{"docs":{},"点":{"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374}}}}}}}}}}}}}},"特":{"docs":{},"判":{"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374},"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667}}}},"出":{"docs":{},"栈":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667}}}},"建":{"docs":{},"立":{"docs":{},"栈":{"docs":{},"，":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},"官":{"docs":{},"方":{"docs":{},"推":{"docs":{},"荐":{"docs":{},"的":{"docs":{},"是":{"docs":{},"使":{"docs":{},"用":{"docs":{},"双":{"docs":{},"端":{"docs":{},"队":{"docs":{},"列":{"docs":{},"作":{"docs":{},"为":{"docs":{},"栈":{"docs":{},"来":{"docs":{},"使":{"docs":{},"用":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"数":{"docs":{},"组":{"docs":{"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374}}}}}}},"一":{"docs":{},"个":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"表":{"docs":{},"，":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"表":{"docs":{},"存":{"docs":{},"储":{"docs":{},"的":{"docs":{},"是":{"docs":{},"某":{"docs":{},"种":{"docs":{},"状":{"docs":{},"态":{"docs":{},"第":{"docs":{},"一":{"docs":{},"次":{"docs":{},"出":{"docs":{},"现":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"。":{"docs":{"partmore/1371. 每个元音包含偶数次的最长子字符串.html":{"ref":"partmore/1371. 每个元音包含偶数次的最长子字符串.html","tf":0.029411764705882353}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"当":{"docs":{},"栈":{"docs":{},"不":{"docs":{},"为":{"docs":{},"空":{"docs":{},"时":{"docs":{},"，":{"docs":{},"把":{"docs":{},"栈":{"docs":{},"顶":{"docs":{},"元":{"docs":{},"素":{"docs":{},"出":{"docs":{},"栈":{"docs":{},"，":{"docs":{},"进":{"docs":{},"行":{"docs":{},"计":{"docs":{},"算":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667}}}}}}}}}}}}}}}}}}}},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.0070921985815602835}}}}}}}},"计":{"docs":{},"算":{"docs":{},"面":{"docs":{},"积":{"docs":{},"时":{"docs":{},"要":{"docs":{},"注":{"docs":{},"意":{"docs":{},"确":{"docs":{},"定":{"docs":{},"好":{"docs":{},"区":{"docs":{},"间":{"docs":{},"的":{"docs":{},"范":{"docs":{},"围":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667}}}}}}}}}}}}}}}}}},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},"记":{"docs":{},"录":{"docs":{},"大":{"docs":{},"于":{"0":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"没":{"docs":{},"有":{"docs":{},"记":{"docs":{},"录":{"docs":{},"为":{"0":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.00546448087431694}}},"docs":{}}}}}}}}}}}}}}}},"docs":{}}}}}}},"1":{"docs":{},"]":{"docs":{},"记":{"docs":{},"录":{"docs":{},"小":{"docs":{},"于":{"0":{"docs":{},"的":{"docs":{},"最":{"docs":{},"小":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"没":{"docs":{},"有":{"docs":{},"记":{"docs":{},"录":{"docs":{},"为":{"0":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.00546448087431694}}},"docs":{}}}}}}}}}}}}}}}},"docs":{}}}}}}},"docs":{}}}}}}},"更":{"docs":{},"新":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.00546448087431694}}}}},"i":{"docs":{},"的":{"docs":{},"值":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}}}},"剪":{"docs":{},"枝":{"docs":{},"一":{"docs":{},"下":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0072992700729927005}}}}}},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"是":{"docs":{},"否":{"docs":{},"包":{"docs":{},"含":{"docs":{},"p":{"docs":{},",":{"docs":{},"q":{"docs":{},"中":{"docs":{},"的":{"docs":{},"一":{"docs":{},"个":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0072992700729927005}}}}}}}}}}}}}}}},"如":{"docs":{},"果":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"为":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"返":{"docs":{},"回":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0072992700729927005}}}}}}}}}}}}}}},"p":{"docs":{},"或":{"docs":{},"者":{"docs":{},"q":{"docs":{},",":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"的":{"docs":{},"左":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"中":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"包":{"docs":{},"含":{"docs":{},"p":{"docs":{},"或":{"docs":{},"q":{"docs":{},"即":{"docs":{},"可":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0072992700729927005}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"节":{"docs":{},"点":{"docs":{},"等":{"docs":{},"于":{"docs":{},"p":{"docs":{},"或":{"docs":{},"q":{"docs":{},"，":{"docs":{},"或":{"docs":{},"者":{"docs":{},"它":{"docs":{},"的":{"docs":{},"左":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"包":{"docs":{},"含":{"docs":{},"过":{"docs":{},"p":{"docs":{},"或":{"docs":{},"q":{"docs":{},"，":{"docs":{},"就":{"docs":{},"返":{"docs":{},"回":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},"，":{"docs":{},"否":{"docs":{},"则":{"docs":{},"返":{"docs":{},"回":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0072992700729927005}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"寻":{"docs":{},"找":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"的":{"docs":{},"左":{"docs":{},"右":{"docs":{},"节":{"docs":{},"点":{"docs":{},"或":{"docs":{},"者":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"本":{"docs":{},"身":{"docs":{},"是":{"docs":{},"否":{"docs":{},"包":{"docs":{},"含":{"docs":{},"p":{"docs":{},",":{"docs":{},"q":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0072992700729927005}}}}}}}}}}}}}}}}}}}}}}}}}}}},"左":{"docs":{},"子":{"docs":{},"树":{"docs":{},"是":{"docs":{},"否":{"docs":{},"包":{"docs":{},"含":{"docs":{},"p":{"docs":{},",":{"docs":{},"q":{"docs":{},"中":{"docs":{},"的":{"docs":{},"一":{"docs":{},"个":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0072992700729927005}}}}}}}}}}}}}}}},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"为":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},"的":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"节":{"docs":{},"点":{"docs":{},"即":{"docs":{},"为":{"docs":{},"结":{"docs":{},"果":{"docs":{},"，":{"docs":{},"通":{"docs":{},"过":{"docs":{},"一":{"docs":{},"个":{"docs":{},"全":{"docs":{},"局":{"docs":{},"变":{"docs":{},"量":{"docs":{},"存":{"docs":{},"储":{"docs":{},"。":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0072992700729927005}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"加":{"docs":{},"入":{"docs":{},"当":{"docs":{},"前":{"docs":{},"加":{"docs":{},"入":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"b":{"docs":{},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"中":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}}}}}}}}}}}}}}}}}}},"最":{"docs":{},"后":{"docs":{},"处":{"docs":{},"理":{"docs":{},"一":{"docs":{},"下":{"docs":{},"返":{"docs":{},"回":{"docs":{},"结":{"docs":{},"果":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"返":{"docs":{},"回":{"docs":{},"了":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}}}}}}}}}}}}}}},"碰":{"docs":{},"到":{"docs":{},"'":{"docs":{},"]":{"docs":{},"‘":{"docs":{},"即":{"docs":{},"可":{"docs":{},"退":{"docs":{},"出":{"docs":{},"当":{"docs":{},"前":{"docs":{},"递":{"docs":{},"归":{"docs":{},"了":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}}}}}}}}}}}}},"因":{"docs":{},"为":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374}}}}}}}}}},"所":{"docs":{},"以":{"docs":{},"需":{"docs":{},"要":{"docs":{},"给":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"数":{"docs":{},"组":{"docs":{},"前":{"docs":{},"添":{"docs":{},"加":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"0":{"docs":{},"，":{"docs":{},"确":{"docs":{},"保":{"docs":{},"可":{"docs":{},"以":{"docs":{},"判":{"docs":{},"断":{"docs":{},"到":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374}}}},"docs":{}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}},"这":{"docs":{},"里":{"docs":{},"的":{"docs":{},"两":{"docs":{},"个":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"循":{"docs":{},"环":{"docs":{},"是":{"docs":{},"枚":{"docs":{},"举":{"docs":{},"能":{"docs":{},"到":{"docs":{},"达":{"docs":{},"j":{"1":{"docs":{},",":{"docs":{},"j":{"2":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"的":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"记":{"docs":{},"录":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}}}}}}}}}}}}}},"docs":{}}}},"docs":{}}}}}}}}}}}}}}}}}}},"*":{"docs":{},"*":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0072992700729927005}}}}},":":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.009615384615384616},"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.011363636363636364},"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.01694915254237288},"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.012195121951219513},"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.046296296296296294},"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.01092896174863388},"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.016666666666666666},"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.013605442176870748},"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909},"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.020833333333333332}}},"?":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.009615384615384616},"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.011363636363636364},"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.01694915254237288},"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.012195121951219513},"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.01092896174863388}}},"a":{"1":{"docs":{"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.028368794326241134}},";":{"docs":{"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.0070921985815602835}}}},"docs":{},"d":{"docs":{},"d":{"docs":{},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.009615384615384616}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}}}}}}}}}}}}},"n":{"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374},"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.007751937984496124}}},"r":{"docs":{},"r":{"docs":{},")":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.013333333333333334}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},";":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.013333333333333334},"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909}}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.0070921985815602835}}}},"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},"]":{"docs":{},")":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"]":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.02666666666666667}}}}}},"]":{"docs":{"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.0070921985815602835}}}},",":{"docs":{"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.007751937984496124},"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909}}},"a":{"docs":{},"y":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"<":{"docs":{},">":{"docs":{"partmore/1431. 拥有最多糖果的孩子.html":{"ref":"partmore/1431. 拥有最多糖果的孩子.html","tf":0.017543859649122806},"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666}},"(":{"docs":{},")":{"docs":{},";":{"docs":{"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.014184397163120567}}}}}}}}}}}}}}},",":{"docs":{"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259}}},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"其":{"docs":{},"中":{"docs":{},"元":{"docs":{},"素":{"docs":{},"之":{"docs":{},"和":{"docs":{},"可":{"docs":{},"被":{"docs":{"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909}}}}}}}}}}}}}},"r":{"docs":{"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.016129032258064516}},"e":{"docs":{"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":0.015873015873015872},"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.012195121951219513},"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374},"part2/136. 只出现一次的数字.html":{"ref":"part2/136. 只出现一次的数字.html","tf":0.041666666666666664},"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.009174311926605505},"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.014598540145985401},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169},"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.013605442176870748},"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909},"partmore/1431. 拥有最多糖果的孩子.html":{"ref":"partmore/1431. 拥有最多糖果的孩子.html","tf":0.017543859649122806},"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666},"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.0070921985815602835}},"t":{"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374}},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.009615384615384616},"part1/3. 无重复字符的最长子串.html":{"ref":"part1/3. 无重复字符的最长子串.html","tf":0.021739130434782608},"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.022727272727272728},"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.016129032258064516},"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":0.015873015873015872},"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.012195121951219513},"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.024539877300613498},"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.013333333333333334},"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.04878048780487805},"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.018134715025906734},"part2/147. 对链表进行插入排序.html":{"ref":"part2/147. 对链表进行插入排序.html","tf":0.017543859649122806},"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.06481481481481481},"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.01092896174863388},"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.042105263157894736},"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.03669724770642202},"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.016666666666666666},"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.029197080291970802},"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.007751937984496124},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.018072289156626505},"partmore/1431. 拥有最多糖果的孩子.html":{"ref":"partmore/1431. 拥有最多糖果的孩子.html","tf":0.017543859649122806},"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666},"others/求1+2+…+n.html":{"ref":"others/求1+2+…+n.html","tf":0.02}}}}},";":{"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":0.015873015873015872}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.009174311926605505}}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.009174311926605505}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.009174311926605505}}}}}}}}}},"k":{"docs":{},"g":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.012269938650306749}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},",":{"docs":{},"a":{"docs":{},"n":{"docs":{},"s":{"docs":{},")":{"docs":{},";":{"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374}}}}}}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.01834862385321101}}}}}}}}}}}}}}}}}}},"s":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},";":{"docs":{"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.012195121951219513}}}}}}},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"partmore/1431. 拥有最多糖果的孩子.html":{"ref":"partmore/1431. 拥有最多糖果的孩子.html","tf":0.017543859649122806}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"partmore/1431. 拥有最多糖果的孩子.html":{"ref":"partmore/1431. 拥有最多糖果的孩子.html","tf":0.017543859649122806}}}}}}}},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"r":{"docs":{},"y":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},"]":{"docs":{},"[":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"r":{"docs":{},"y":{"docs":{},"[":{"1":{"docs":{},"]":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666}}}}}}},"docs":{}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}},";":{"docs":{"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.01834862385321101},"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0072992700729927005},"partmore/1431. 拥有最多糖果的孩子.html":{"ref":"partmore/1431. 拥有最多糖果的孩子.html","tf":0.017543859649122806},"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666}}}},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}},"e":{"docs":{},")":{"docs":{},";":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}}}}}}}}},"e":{"docs":{},"l":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"r":{"docs":{},"y":{"docs":{},"(":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}}}}}}}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182},"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.03048780487804878},"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.015503875968992248},"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.0070921985815602835}},")":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756}},")":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182}}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756}},")":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756}}}}}}},";":{"docs":{"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.007751937984496124}}}}}}},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.01834862385321101},"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.021897810218978103}},")":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.012195121951219513}}},".":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.009174311926605505}},";":{"docs":{"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.009174311926605505}}}}}}}},";":{"docs":{"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.009174311926605505},"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0072992700729927005}}},",":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.014598540145985401}}},"为":{"docs":{},"p":{"docs":{},"或":{"docs":{},"q":{"docs":{},",":{"docs":{},"它":{"docs":{},"的":{"docs":{},"左":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"中":{"docs":{},"的":{"docs":{},"一":{"docs":{},"个":{"docs":{},"为":{"docs":{},"另":{"docs":{},"一":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0072992700729927005}}}}}}}}}}}}}}}}}}}}}}}},"的":{"docs":{},"左":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"分":{"docs":{},"别":{"docs":{},"包":{"docs":{},"含":{"docs":{},"p":{"docs":{},",":{"docs":{},"q":{"docs":{},"。":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0072992700729927005}}}}}}}}}}}}}}}}},"b":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.021052631578947368}}}}}}}}},"w":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.038461538461538464}},"u":{"docs":{},"e":{"docs":{},")":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.015544041450777202},"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.007751937984496124}},";":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.007772020725388601}}}},";":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.015544041450777202}}}}},"i":{"docs":{},"d":{"docs":{},"p":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"part7/680. 验证回文字符串 Ⅱ.html":{"ref":"part7/680. 验证回文字符串 Ⅱ.html","tf":0.03125}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"i":{"docs":{},"d":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.012953367875647668}}}}}},"|":{"docs":{},"|":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.009615384615384616},"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":0.015873015873015872},"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.018292682926829267},"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.027777777777777776},"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.009174311926605505},"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.043795620437956206}}}},"}":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.038461538461538464},"part1/3. 无重复字符的最长子串.html":{"ref":"part1/3. 无重复字符的最长子串.html","tf":0.021739130434782608},"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.028409090909090908},"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.01694915254237288},"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.016129032258064516},"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":0.015873015873015872},"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.04878048780487805},"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.03680981595092025},"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.06666666666666667},"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.06097560975609756},"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.08031088082901554},"part2/147. 对链表进行插入排序.html":{"ref":"part2/147. 对链表进行插入排序.html","tf":0.03508771929824561},"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.06481481481481481},"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.04371584699453552},"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.042105263157894736},"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.045871559633027525},"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.03333333333333333},"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0364963503649635},"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.031007751937984496},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.04216867469879518},"partmore/1431. 拥有最多糖果的孩子.html":{"ref":"partmore/1431. 拥有最多糖果的孩子.html","tf":0.07017543859649122},"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.03125},"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.0070921985815602835},"others/求1+2+…+n.html":{"ref":"others/求1+2+…+n.html","tf":0.02}}},"一":{"docs":{},"位":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.009615384615384616}}}},"之":{"docs":{},"外":{"docs":{},"，":{"docs":{},"这":{"docs":{},"两":{"docs":{},"个":{"docs":{},"数":{"docs":{},"都":{"docs":{},"不":{"docs":{},"会":{"docs":{},"以":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.009615384615384616}}}}}}}}}}}},"后":{"docs":{},"，":{"docs":{},"你":{"docs":{},"的":{"docs":{},"输":{"docs":{},"出":{"docs":{},"需":{"docs":{},"要":{"docs":{},"从":{"docs":{},"左":{"docs":{},"往":{"docs":{},"右":{"docs":{},"逐":{"docs":{},"行":{"docs":{},"读":{"docs":{},"取":{"docs":{},"，":{"docs":{},"产":{"docs":{},"生":{"docs":{},"出":{"docs":{},"一":{"docs":{},"个":{"docs":{},"新":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"，":{"docs":{},"比":{"docs":{},"如":{"docs":{},"：":{"docs":{},"\"":{"docs":{},"l":{"docs":{},"c":{"docs":{},"i":{"docs":{},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"o":{"docs":{},"e":{"docs":{},"s":{"docs":{},"i":{"docs":{},"i":{"docs":{},"g":{"docs":{},"e":{"docs":{},"d":{"docs":{},"h":{"docs":{},"n":{"docs":{},"\"":{"docs":{},"。":{"docs":{"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.016129032258064516}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"间":{"docs":{},"（":{"docs":{},"包":{"docs":{},"括":{"docs":{"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.015503875968992248}}}}}}},"基":{"docs":{},"本":{"docs":{},"的":{"docs":{},"链":{"docs":{},"表":{"docs":{},"操":{"docs":{},"作":{"docs":{},"，":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"链":{"docs":{},"表":{"docs":{},"，":{"docs":{},"处":{"docs":{},"理":{"docs":{},"好":{"docs":{},"进":{"docs":{},"位":{"docs":{},"问":{"docs":{},"题":{"docs":{},"就":{"docs":{},"好":{"docs":{},"了":{"docs":{},"。":{"docs":{},"注":{"docs":{},"意":{"docs":{},"循":{"docs":{},"环":{"docs":{},"的":{"docs":{},"退":{"docs":{},"出":{"docs":{},"条":{"docs":{},"件":{"docs":{},"，":{"docs":{},"以":{"docs":{},"及":{"docs":{},"最":{"docs":{},"后":{"docs":{},"也":{"docs":{},"要":{"docs":{},"对":{"docs":{},"f":{"docs":{},"l":{"docs":{},"a":{"docs":{},"g":{"docs":{},"进":{"docs":{},"行":{"docs":{},"判":{"docs":{},"断":{"docs":{},"。":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.009615384615384616}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"础":{"docs":{},"的":{"docs":{},"链":{"docs":{},"表":{"docs":{},"题":{"docs":{},"目":{"docs":{},"，":{"docs":{},"看":{"docs":{},"代":{"docs":{},"码":{"docs":{},"：":{"docs":{"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.012195121951219513}}}}}}}}}}}}}},"如":{"docs":{},"果":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"将":{"docs":{},"这":{"docs":{},"两":{"docs":{},"个":{"docs":{},"数":{"docs":{},"相":{"docs":{},"加":{"docs":{},"起":{"docs":{},"来":{"docs":{},"，":{"docs":{},"则":{"docs":{},"会":{"docs":{},"返":{"docs":{},"回":{"docs":{},"一":{"docs":{},"个":{"docs":{},"新":{"docs":{},"的":{"docs":{},"链":{"docs":{},"表":{"docs":{},"来":{"docs":{},"表":{"docs":{},"示":{"docs":{},"它":{"docs":{},"们":{"docs":{},"的":{"docs":{},"和":{"docs":{},"。":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.009615384615384616}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"和":{"docs":{},"s":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"不":{"docs":{},"相":{"docs":{},"等":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"下":{"docs":{},"，":{"docs":{},"d":{"docs":{},"p":{"docs":{},"(":{"docs":{},"i":{"docs":{},",":{"docs":{},"j":{"docs":{},")":{"docs":{},"一":{"docs":{},"定":{"docs":{},"为":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},"；":{"docs":{"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.01694915254237288}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"相":{"docs":{},"等":{"docs":{},"，":{"docs":{},"d":{"docs":{},"p":{"docs":{},"(":{"docs":{},"i":{"docs":{},",":{"docs":{},"j":{"docs":{},")":{"docs":{"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.01694915254237288}}}}}}}}}}}},"不":{"docs":{},"借":{"docs":{},"助":{"docs":{},"额":{"docs":{},"外":{"docs":{},"空":{"docs":{},"间":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"需":{"docs":{},"要":{"docs":{},"单":{"docs":{},"独":{"docs":{},"实":{"docs":{},"现":{"docs":{},"一":{"docs":{},"个":{"docs":{},"函":{"docs":{},"数":{"docs":{},"，":{"docs":{},"能":{"docs":{},"够":{"docs":{},"以":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"的":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"完":{"docs":{},"成":{"docs":{},"反":{"docs":{},"转":{"docs":{},"，":{"docs":{},"这":{"docs":{},"个":{"docs":{},"可":{"docs":{},"以":{"docs":{},"通":{"docs":{},"过":{"docs":{},"迭":{"docs":{},"代":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"实":{"docs":{},"现":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"参":{"docs":{},"考":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"2":{"0":{"6":{"docs":{},"题":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"反":{"docs":{},"转":{"docs":{},"完":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"后":{"docs":{},"返":{"docs":{},"回":{"docs":{},"新":{"docs":{},"链":{"docs":{},"表":{"docs":{},"的":{"docs":{},"头":{"docs":{},"部":{"docs":{},"，":{"docs":{},"代":{"docs":{},"码":{"docs":{},"如":{"docs":{},"下":{"docs":{},"：":{"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}},"考":{"docs":{},"虑":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"，":{"docs":{},"则":{"docs":{},"可":{"docs":{},"以":{"docs":{},"利":{"docs":{},"用":{"docs":{},"栈":{"docs":{},"+":{"docs":{},"递":{"docs":{},"归":{"docs":{},"轻":{"docs":{},"松":{"docs":{},"完":{"docs":{},"成":{"docs":{},"反":{"docs":{},"转":{"docs":{},":":{"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374}}}}}}}}}}}}}}}}}}}}}}}},"说":{"docs":{},"明":{"docs":{},"的":{"docs":{},"话":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"建":{"docs":{},"立":{"docs":{},"一":{"docs":{},"个":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"表":{"docs":{},"轻":{"docs":{},"松":{"docs":{},"解":{"docs":{},"决":{"docs":{},"这":{"docs":{},"个":{"docs":{},"问":{"docs":{},"题":{"docs":{},"。":{"docs":{"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.007751937984496124}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"节":{"docs":{},"点":{"docs":{},"总":{"docs":{},"数":{"docs":{},"不":{"docs":{},"是":{"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374}}}}}}}},"栈":{"docs":{},"为":{"docs":{},"空":{"docs":{},"或":{"docs":{},"者":{"docs":{},"要":{"docs":{},"入":{"docs":{},"栈":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"i":{"docs":{},"大":{"docs":{},"于":{"docs":{},"栈":{"docs":{},"顶":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"就":{"docs":{},"直":{"docs":{},"接":{"docs":{},"入":{"docs":{},"栈":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667}}}}}}}}}}}}}}}}}}}}}}}}}},"密":{"docs":{},"钥":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}},"已":{"docs":{},"经":{"docs":{},"存":{"docs":{},"在":{"docs":{},"，":{"docs":{},"则":{"docs":{},"变":{"docs":{},"更":{"docs":{},"其":{"docs":{},"数":{"docs":{},"据":{"docs":{},"值":{"docs":{},"；":{"docs":{},"如":{"docs":{},"果":{"docs":{},"密":{"docs":{},"钥":{"docs":{},"不":{"docs":{},"存":{"docs":{},"在":{"docs":{},"，":{"docs":{},"则":{"docs":{},"插":{"docs":{},"入":{"docs":{},"该":{"docs":{},"组":{"docs":{},"「":{"docs":{},"密":{"docs":{},"钥":{"docs":{},"/":{"docs":{},"数":{"docs":{},"据":{"docs":{},"值":{"docs":{},"」":{"docs":{},"。":{"docs":{},"当":{"docs":{},"缓":{"docs":{},"存":{"docs":{},"容":{"docs":{},"量":{"docs":{},"达":{"docs":{},"到":{"docs":{},"上":{"docs":{},"限":{"docs":{},"时":{"docs":{},"，":{"docs":{},"它":{"docs":{},"应":{"docs":{},"该":{"docs":{},"在":{"docs":{},"写":{"docs":{},"入":{"docs":{},"新":{"docs":{},"数":{"docs":{},"据":{"docs":{},"之":{"docs":{},"前":{"docs":{},"删":{"docs":{},"除":{"docs":{},"最":{"docs":{},"久":{"docs":{},"未":{"docs":{},"使":{"docs":{},"用":{"docs":{},"的":{"docs":{},"数":{"docs":{},"据":{"docs":{},"值":{"docs":{},"，":{"docs":{},"从":{"docs":{},"而":{"docs":{},"为":{"docs":{},"新":{"docs":{},"的":{"docs":{},"数":{"docs":{},"据":{"docs":{},"值":{"docs":{},"留":{"docs":{},"出":{"docs":{},"空":{"docs":{},"间":{"docs":{},"。":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"头":{"docs":{},"节":{"docs":{},"点":{"docs":{},"比":{"docs":{},"当":{"docs":{},"前":{"docs":{},"节":{"docs":{},"点":{"docs":{},"大":{"docs":{},"，":{"docs":{},"就":{"docs":{},"说":{"docs":{},"明":{"docs":{},"当":{"docs":{},"前":{"docs":{},"节":{"docs":{},"点":{"docs":{},"要":{"docs":{},"插":{"docs":{},"入":{"docs":{},"到":{"docs":{},"头":{"docs":{},"节":{"docs":{},"点":{"docs":{},"之":{"docs":{},"前":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"最":{"docs":{},"后":{"docs":{},"要":{"docs":{},"更":{"docs":{},"新":{"docs":{},"头":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{"part2/147. 对链表进行插入排序.html":{"ref":"part2/147. 对链表进行插入排序.html","tf":0.017543859649122806}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"尾":{"docs":{},"节":{"docs":{},"点":{"docs":{},"比":{"docs":{},"当":{"docs":{},"前":{"docs":{},"节":{"docs":{},"点":{"docs":{},"小":{"docs":{},"，":{"docs":{},"说":{"docs":{},"明":{"docs":{},"当":{"docs":{},"前":{"docs":{},"节":{"docs":{},"点":{"docs":{},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"进":{"docs":{},"行":{"docs":{},"插":{"docs":{},"入":{"docs":{},"。":{"docs":{"part2/147. 对链表进行插入排序.html":{"ref":"part2/147. 对链表进行插入排序.html","tf":0.017543859649122806}}}}}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"为":{"docs":{},"正":{"docs":{},"数":{"docs":{},"：":{"docs":{},"要":{"docs":{},"知":{"docs":{},"道":{"docs":{},"以":{"docs":{},"i":{"docs":{},"结":{"docs":{},"尾":{"docs":{},"的":{"docs":{},"乘":{"docs":{},"积":{"docs":{},"最":{"docs":{},"大":{"docs":{},"的":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},"我":{"docs":{},"们":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"知":{"docs":{},"道":{"docs":{},"以":{"docs":{},"i":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.00546448087431694}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"负":{"docs":{},"数":{"docs":{},"：":{"docs":{},"要":{"docs":{},"知":{"docs":{},"道":{"docs":{},"以":{"docs":{},"i":{"docs":{},"结":{"docs":{},"尾":{"docs":{},"的":{"docs":{},"乘":{"docs":{},"积":{"docs":{},"最":{"docs":{},"大":{"docs":{},"的":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},"我":{"docs":{},"们":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"知":{"docs":{},"道":{"docs":{},"以":{"docs":{},"i":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.00546448087431694}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"一":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"是":{"docs":{},"这":{"docs":{},"两":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"最":{"docs":{},"近":{"docs":{},"公":{"docs":{},"共":{"docs":{},"祖":{"docs":{},"先":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"这":{"docs":{},"两":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"一":{"docs":{},"定":{"docs":{},"分":{"docs":{},"别":{"docs":{},"存":{"docs":{},"在":{"docs":{},"于":{"docs":{},"它":{"docs":{},"们":{"docs":{},"最":{"docs":{},"近":{"docs":{},"公":{"docs":{},"共":{"docs":{},"祖":{"docs":{},"先":{"docs":{},"的":{"docs":{},"左":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"里":{"docs":{},"面":{"docs":{},"。":{"docs":{},"或":{"docs":{},"者":{"docs":{},"p":{"docs":{},"，":{"docs":{},"q":{"docs":{},"这":{"docs":{},"两":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"中":{"docs":{},"一":{"docs":{},"定":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"是":{"docs":{},"它":{"docs":{},"们":{"docs":{},"的":{"docs":{},"最":{"docs":{},"近":{"docs":{},"公":{"docs":{},"共":{"docs":{},"祖":{"docs":{},"先":{"docs":{},"。":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0072992700729927005}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"碰":{"docs":{},"到":{"docs":{},"数":{"docs":{},"字":{"docs":{},"，":{"docs":{},"获":{"docs":{},"取":{"docs":{},"数":{"docs":{},"字":{"docs":{},"的":{"docs":{},"值":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"递":{"docs":{},"归":{"docs":{},"获":{"docs":{},"得":{"docs":{},"数":{"docs":{},"字":{"docs":{},"和":{"docs":{},"后":{"docs":{},"面":{"docs":{},"对":{"docs":{},"应":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"解":{"docs":{},"码":{"docs":{},"后":{"docs":{},"的":{"docs":{},"值":{"docs":{},"，":{"docs":{},"加":{"docs":{},"入":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"b":{"docs":{},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"中":{"docs":{},"；":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"选":{"docs":{},"择":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"a":{"1":{"docs":{},"，":{"docs":{},"在":{"docs":{},"求":{"docs":{},"n":{"docs":{},"的":{"docs":{},"过":{"docs":{},"程":{"docs":{},"中":{"docs":{},"要":{"docs":{},"用":{"docs":{},"到":{"docs":{},"s":{"docs":{},"q":{"docs":{},"r":{"docs":{},"t":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"n":{"docs":{},",":{"docs":{},"则":{"docs":{},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"选":{"docs":{},"择":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"n":{"docs":{},"。":{"docs":{"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.0070921985815602835}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}},"开":{"docs":{},"头":{"docs":{},"。":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.009615384615384616}}}}},"您":{"docs":{},"可":{"docs":{},"以":{"docs":{},"假":{"docs":{},"设":{"docs":{},"除":{"docs":{},"了":{"docs":{},"数":{"docs":{},"字":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.009615384615384616}}}}}}}}}}},"数":{"docs":{},"字":{"docs":{},"。":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.009615384615384616}}},"字":{"docs":{},"符":{"docs":{},"：":{"docs":{},"把":{"docs":{},"数":{"docs":{},"字":{"docs":{},"字":{"docs":{},"符":{"docs":{},"转":{"docs":{},"换":{"docs":{},"为":{"docs":{},"数":{"docs":{},"字":{"docs":{},"入":{"docs":{},"栈":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}}}}}}}}}}}}}}},"组":{"docs":{},"中":{"docs":{},"只":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"重":{"docs":{},"复":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"，":{"docs":{},"但":{"docs":{},"它":{"docs":{},"可":{"docs":{},"能":{"docs":{},"不":{"docs":{},"止":{"docs":{},"重":{"docs":{},"复":{"docs":{},"出":{"docs":{},"现":{"docs":{},"一":{"docs":{},"次":{"docs":{},"。":{"docs":{"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.007751937984496124}},"这":{"docs":{},"个":{"docs":{},"倒":{"docs":{},"无":{"docs":{},"所":{"docs":{},"谓":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.007751937984496124}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"元":{"docs":{},"素":{"docs":{},"的":{"docs":{},"范":{"docs":{},"围":{"docs":{},"是":{"docs":{"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374}}}}}}}}},"的":{"docs":{},"长":{"docs":{},"度":{"docs":{},"为":{"docs":{"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374}}}}}}},"对":{"docs":{},"的":{"docs":{},"形":{"docs":{},"式":{"docs":{},"给":{"docs":{},"出":{"docs":{},"先":{"docs":{},"修":{"docs":{},"课":{"docs":{},"程":{"docs":{},"数":{"docs":{},"对":{"docs":{},"。":{"docs":{"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666}}}}}}}}}}}}}}}},"的":{"docs":{},"方":{"docs":{},"式":{"docs":{},"存":{"docs":{},"储":{"docs":{},"的":{"docs":{},"，":{"docs":{},"并":{"docs":{},"且":{"docs":{},"它":{"docs":{},"们":{"docs":{},"的":{"docs":{},"每":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"只":{"docs":{},"能":{"docs":{},"存":{"docs":{},"储":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.009615384615384616}}}}}}}}}}}}}}}}}}}}},"链":{"docs":{},"表":{"docs":{},"用":{"docs":{},"来":{"docs":{},"表":{"docs":{},"示":{"docs":{},"两":{"docs":{},"个":{"docs":{},"非":{"docs":{},"负":{"docs":{},"的":{"docs":{},"整":{"docs":{},"数":{"docs":{},"。":{"docs":{},"其":{"docs":{},"中":{"docs":{},"，":{"docs":{},"它":{"docs":{},"们":{"docs":{},"各":{"docs":{},"自":{"docs":{},"的":{"docs":{},"位":{"docs":{},"数":{"docs":{},"是":{"docs":{},"按":{"docs":{},"照":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.009615384615384616}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"长":{"docs":{},"度":{"docs":{},"。":{"docs":{"part1/3. 无重复字符的最长子串.html":{"ref":"part1/3. 无重复字符的最长子串.html","tf":0.021739130434782608}}}}},"正":{"docs":{},"序":{"docs":{},"（":{"docs":{},"从":{"docs":{},"小":{"docs":{},"到":{"docs":{},"大":{"docs":{},"）":{"docs":{},"数":{"docs":{},"组":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182}}}}}}}}}}}},"最":{"docs":{},"大":{"docs":{},"长":{"docs":{},"度":{"docs":{},"为":{"docs":{"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.01694915254237288}}}}}}},"整":{"docs":{},"数":{"docs":{},"倍":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"请":{"docs":{},"将":{"docs":{},"最":{"docs":{},"后":{"docs":{},"剩":{"docs":{},"余":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{},"保":{"docs":{},"持":{"docs":{},"原":{"docs":{},"有":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"。":{"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374}}}}}}}}}}}}}}}}}}}}}}}},"情":{"docs":{},"况":{"docs":{},"。":{"docs":{"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259}}}}},"两":{"docs":{},"个":{"docs":{},"结":{"docs":{},"点":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0072992700729927005}}}}}},"深":{"docs":{},"度":{"docs":{},"尽":{"docs":{},"可":{"docs":{},"能":{"docs":{},"大":{"docs":{},"（":{"docs":{},"一":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"也":{"docs":{},"可":{"docs":{},"以":{"docs":{},"是":{"docs":{},"它":{"docs":{},"自":{"docs":{},"己":{"docs":{},"的":{"docs":{},"祖":{"docs":{},"先":{"docs":{},"）":{"docs":{},"。":{"docs":{},"”":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0072992700729927005}}}}}}}}}}}}}}}}}}}}}}}}}},"祖":{"docs":{},"先":{"docs":{},"且":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0072992700729927005}}}}},"空":{"docs":{},"间":{"docs":{},"。":{"docs":{"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.007751937984496124}},"不":{"docs":{},"能":{"docs":{},"用":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"表":{"docs":{},"了":{"docs":{},"！":{"docs":{"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.007751937984496124}}}}}}}}}}}}}}},"输":{"docs":{},"入":{"docs":{},"。":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}},"范":{"docs":{},"围":{"docs":{},"是":{"docs":{"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374}}}}},"连":{"docs":{},"续":{"docs":{},"的":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"个":{"docs":{},"数":{"docs":{},"。":{"docs":{"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374}}}}}}}}}}}},"小":{"docs":{},"写":{"docs":{},"字":{"docs":{},"母":{"docs":{},"。":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"长":{"docs":{},"度":{"docs":{},"是":{"5":{"0":{"0":{"0":{"0":{"docs":{},"。":{"docs":{"part7/680. 验证回文字符串 Ⅱ.html":{"ref":"part7/680. 验证回文字符串 Ⅱ.html","tf":0.03125}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}},"糖":{"docs":{},"果":{"docs":{},"。":{"docs":{},"注":{"docs":{},"意":{"docs":{},"，":{"docs":{},"允":{"docs":{},"许":{"docs":{},"有":{"docs":{},"多":{"docs":{},"个":{"docs":{},"孩":{"docs":{},"子":{"docs":{},"同":{"docs":{},"时":{"docs":{},"拥":{"docs":{},"有":{"docs":{"partmore/1431. 拥有最多糖果的孩子.html":{"ref":"partmore/1431. 拥有最多糖果的孩子.html","tf":0.017543859649122806}}}}}}}}}}}}}}}}},"数":{"docs":{},"目":{"docs":{},"。":{"docs":{"partmore/1431. 拥有最多糖果的孩子.html":{"ref":"partmore/1431. 拥有最多糖果的孩子.html","tf":0.017543859649122806}}}}}}},"先":{"docs":{},"修":{"docs":{},"课":{"docs":{},"程":{"docs":{},"。":{"docs":{"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.020833333333333332}}},"且":{"docs":{},"课":{"docs":{},"程":{"docs":{"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666}}}}},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"课":{"docs":{},"程":{"docs":{"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666}}}}}}}}}}},"矩":{"docs":{},"阵":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}}}},"逆":{"docs":{},"序":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.009615384615384616}}},"波":{"docs":{},"兰":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"求":{"docs":{},"值":{"docs":{"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":5}}}}}}}}}},"非":{"docs":{},"空":{"docs":{"part1/2. 两数相加.html":{"ref":"part1/2. 两数相加.html","tf":0.009615384615384616}}}},"c":{"docs":{"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.016129032258064516},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.018072289156626505},"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.020833333333333332}},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"part1/3. 无重复字符的最长子串.html":{"ref":"part1/3. 无重复字符的最长子串.html","tf":0.021739130434782608}}}}},"n":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.03225806451612903}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"u":{"docs":{},"e":{"docs":{},";":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756}}}}}}}}},"l":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.017543859649122806}}}},"a":{"docs":{},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},")":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.012953367875647668}}},";":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.018134715025906734}}}}}}}}},"s":{"docs":{},"e":{"docs":{"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.037037037037037035}}}},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{"partmore/1431. 拥有最多糖果的孩子.html":{"ref":"partmore/1431. 拥有最多糖果的孩子.html","tf":0.017543859649122806}},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"partmore/1431. 拥有最多糖果的孩子.html":{"ref":"partmore/1431. 拥有最多糖果的孩子.html","tf":0.017543859649122806}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"partmore/1431. 拥有最多糖果的孩子.html":{"ref":"partmore/1431. 拥有最多糖果的孩子.html","tf":0.017543859649122806}}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.015544041450777202},"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.014184397163120567}}}}}},")":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}},"n":{"docs":{},"t":{"docs":{"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374}}}},"h":{"docs":{},"e":{"docs":{},"c":{"docs":{},"k":{"docs":{},"i":{"docs":{},"f":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"r":{"docs":{},"y":{"docs":{},"p":{"docs":{},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{},"u":{"docs":{},"p":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{},"[":{"docs":{},"]":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}}}}}}}}}}}}}}}}}}}}},"j":{"1":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.017543859649122806}},",":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}},"可":{"docs":{},"以":{"docs":{},"从":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}}}}},"2":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}},"docs":{"part1/3. 无重复字符的最长子串.html":{"ref":"part1/3. 无重复字符的最长子串.html","tf":0.021739130434782608},"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.03389830508474576},"part2/125. 验证回文串.html":{"ref":"part2/125. 验证回文串.html","tf":0.03571428571428571},"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374},"part7/680. 验证回文字符串 Ⅱ.html":{"ref":"part7/680. 验证回文字符串 Ⅱ.html","tf":0.03125},"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}},")":{"docs":{"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.01694915254237288},"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}},"u":{"docs":{},"d":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},".":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.007751937984496124}}}}}}}}}}}},"+":{"1":{"docs":{},")":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}}},"docs":{}}},"s":{"docs":{"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.03389830508474576},"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.016129032258064516},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.018072289156626505},"partmore/1371. 每个元音包含偶数次的最长子字符串.html":{"ref":"partmore/1371. 每个元音包含偶数次的最长子字符串.html","tf":0.029411764705882353}},")":{"docs":{"part1/3. 无重复字符的最长子串.html":{"ref":"part1/3. 无重复字符的最长子串.html","tf":0.021739130434782608},"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.03389830508474576},"part2/125. 验证回文串.html":{"ref":"part2/125. 验证回文串.html","tf":0.03571428571428571},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.012048192771084338},"part7/680. 验证回文字符串 Ⅱ.html":{"ref":"part7/680. 验证回文字符串 Ⅱ.html","tf":0.03125},"partmore/1371. 每个元音包含偶数次的最长子字符串.html":{"ref":"partmore/1371. 每个元音包含偶数次的最长子字符串.html","tf":0.029411764705882353}}},".":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"j":{"docs":{},")":{"docs":{},"为":{"docs":{},"止":{"docs":{},"。":{"docs":{},"返":{"docs":{},"回":{"docs":{},"这":{"docs":{},"个":{"docs":{},"过":{"docs":{},"程":{"docs":{},"中":{"docs":{},"滑":{"docs":{},"动":{"docs":{},"窗":{"docs":{},"口":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"长":{"docs":{},"度":{"docs":{},"即":{"docs":{},"为":{"docs":{},"答":{"docs":{},"案":{"docs":{},"。":{"docs":{"part1/3. 无重复字符的最长子串.html":{"ref":"part1/3. 无重复字符的最长子串.html","tf":0.021739130434782608}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.01694915254237288},"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.016129032258064516},"part2/125. 验证回文串.html":{"ref":"part2/125. 验证回文串.html","tf":0.03571428571428571},"part7/680. 验证回文字符串 Ⅱ.html":{"ref":"part7/680. 验证回文字符串 Ⅱ.html","tf":0.03125}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"1":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.017045454545454544}},",":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182}}}},"2":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.022727272727272728}},",":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182}}}},"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374}},")":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}},";":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}},"c":{"docs":{},"k":{"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.012269938650306749},"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667},"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259}},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374}}}}}}}},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},"+":{"docs":{},"+":{"docs":{},")":{"docs":{},";":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667}}}}}},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"t":{"docs":{},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"o":{"docs":{},"l":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"a":{"docs":{},",":{"docs":{},"b":{"docs":{},",":{"docs":{},"t":{"docs":{},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259}}}}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.012269938650306749}}}}}},"l":{"docs":{},"l":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.013333333333333334},"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.027777777777777776}}}}}}}}}}}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667}},")":{"docs":{},")":{"docs":{},";":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667}}}}}}}}}}}}}}},"<":{"docs":{},">":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374}}}}}}}}}},"r":{"docs":{},".":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"i":{"docs":{"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.01694915254237288}}}}}}}}}}}}},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"(":{"docs":{},"\"":{"docs":{"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259}},"*":{"docs":{},"\"":{"docs":{},")":{"docs":{"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259}}}}},"+":{"docs":{},"\"":{"docs":{},")":{"docs":{"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259}}}}},"/":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.03389830508474576},"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.03225806451612903},"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.018072289156626505}},"b":{"docs":{},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.016129032258064516},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.012048192771084338}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.016129032258064516},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.012048192771084338}}}}}}}}}}}}}}},")":{"docs":{"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}}}}}},"，":{"docs":{},"找":{"docs":{},"到":{"docs":{"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.01694915254237288}}}},"最":{"docs":{},"多":{"docs":{},"删":{"docs":{},"除":{"docs":{},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"。":{"docs":{},"判":{"docs":{},"断":{"docs":{},"是":{"docs":{},"否":{"docs":{},"能":{"docs":{},"成":{"docs":{},"为":{"docs":{},"回":{"docs":{},"文":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"。":{"docs":{"part7/680. 验证回文字符串 Ⅱ.html":{"ref":"part7/680. 验证回文字符串 Ⅱ.html","tf":0.03125}}}}}}}}}}}}}}}}}}}}}}}}},",":{"docs":{"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.03225806451612903},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}},";":{"docs":{"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.016129032258064516}}},"b":{"docs":{"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.016129032258064516},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"p":{"docs":{},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}}}}}}}}}}}}}}}},"s":{"docs":{},".":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}}}}}}}}}}}},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},")":{"docs":{},";":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"part2/136. 只出现一次的数字.html":{"ref":"part2/136. 只出现一次的数字.html","tf":0.041666666666666664}}}}}}}}}}}}}}}}}},"z":{"docs":{},"e":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0051813471502590676}},"(":{"docs":{},")":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}}}},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}}}}},";":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}}}}}},"u":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"c":{"docs":{},"a":{"docs":{},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},",":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}}}}}}}}}}}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"f":{"docs":{},"a":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"(":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},",":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"(":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},",":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}}}}}}}}}}}}}},"b":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.013605442176870748}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"v":{"docs":{},"b":{"docs":{},"y":{"docs":{},"k":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.02040816326530612},"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909},"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.014184397163120567}},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.013605442176870748},"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.02727272727272727}},")":{"docs":{"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"others/求1+2+…+n.html":{"ref":"others/求1+2+…+n.html","tf":0.02}}}}},"n":{"docs":{"others/求1+2+…+n.html":{"ref":"others/求1+2+…+n.html","tf":0.06}}}}}}}}}},"o":{"docs":{},"l":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259}}}}}}}},"u":{"docs":{},"t":{"docs":{"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.014184397163120567}}}}}},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259}}}}}}},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.010526315789473684}}}}}}}},"判":{"docs":{},"断":{"docs":{},"是":{"docs":{},"否":{"docs":{},"存":{"docs":{},"在":{"docs":{},"重":{"docs":{},"复":{"docs":{},"字":{"docs":{},"符":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"表":{"docs":{},"的":{"docs":{},"方":{"docs":{},"式":{"docs":{},"判":{"docs":{},"断":{"docs":{},"，":{"docs":{},"当":{"docs":{},"前":{"docs":{},"字":{"docs":{},"符":{"docs":{},"是":{"docs":{},"否":{"docs":{},"在":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"表":{"docs":{},"中":{"docs":{},"出":{"docs":{},"现":{"docs":{},"过":{"docs":{},"，":{"docs":{},"同":{"docs":{},"时":{"docs":{},"当":{"docs":{},"i":{"docs":{},"往":{"docs":{},"前":{"docs":{},"移":{"docs":{},"动":{"docs":{},"时":{"docs":{},"也":{"docs":{},"要":{"docs":{},"更":{"docs":{},"新":{"docs":{},"好":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"表":{"docs":{},"即":{"docs":{},"可":{"docs":{},"。":{"docs":{},"因":{"docs":{},"为":{"docs":{},"i":{"docs":{},"，":{"docs":{},"j":{"docs":{},"都":{"docs":{},"不":{"docs":{},"会":{"docs":{},"回":{"docs":{},"退":{"docs":{},"，":{"docs":{},"最":{"docs":{},"大":{"docs":{},"为":{"docs":{},"n":{"docs":{},"，":{"docs":{},"算":{"docs":{},"法":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"。":{"docs":{"part1/3. 无重复字符的最长子串.html":{"ref":"part1/3. 无重复字符的最长子串.html","tf":0.021739130434782608}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"无":{"docs":{},"重":{"docs":{},"复":{"docs":{},"字":{"docs":{},"符":{"docs":{},"的":{"docs":{},"最":{"docs":{},"长":{"docs":{},"子":{"docs":{},"串":{"docs":{"part1/3. 无重复字符的最长子串.html":{"ref":"part1/3. 无重复字符的最长子串.html","tf":5}}}}}}}}}}}},"维":{"docs":{},"护":{"docs":{},"一":{"docs":{},"个":{"docs":{},"滑":{"docs":{},"动":{"docs":{},"窗":{"docs":{},"口":{"docs":{},"[":{"docs":{},"i":{"docs":{},",":{"docs":{},"j":{"docs":{},"]":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"[":{"docs":{},"i":{"docs":{},",":{"docs":{},"j":{"docs":{},"]":{"docs":{},"中":{"docs":{},"不":{"docs":{},"存":{"docs":{},"在":{"docs":{},"重":{"docs":{},"复":{"docs":{},"字":{"docs":{},"符":{"docs":{},"，":{"docs":{},"则":{"docs":{},"j":{"docs":{},"+":{"docs":{},"+":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"存":{"docs":{},"在":{"docs":{},"重":{"docs":{},"复":{"docs":{},"字":{"docs":{},"符":{"docs":{},"，":{"docs":{},"则":{"docs":{},"重":{"docs":{},"复":{"docs":{},"字":{"docs":{},"符":{"docs":{},"一":{"docs":{},"定":{"docs":{},"为":{"docs":{},"s":{"docs":{},".":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"j":{"docs":{},")":{"docs":{},",":{"docs":{},"则":{"docs":{},"i":{"docs":{},"+":{"docs":{},"+":{"docs":{},"一":{"docs":{},"直":{"docs":{},"到":{"docs":{},"s":{"docs":{},".":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{"part1/3. 无重复字符的最长子串.html":{"ref":"part1/3. 无重复字符的最长子串.html","tf":0.021739130434782608}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"*":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182},"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.02666666666666667},"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259},"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.04371584699453552},"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.014598540145985401},"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.04964539007092199}},",":{"docs":{"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259}}},"/":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0072992700729927005}}},"最":{"docs":{},"终":{"docs":{},"判":{"docs":{},"断":{"docs":{},"为":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},"的":{"docs":{},"标":{"docs":{},"准":{"docs":{},"为":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0072992700729927005}}}}}}}}}}}}}}}},">":{"1":{"docs":{"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.012195121951219513},"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.012269938650306749},"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.009174311926605505}}},"2":{"docs":{"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.024390243902439025},"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.012269938650306749},"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.01834862385321101}}},"3":{"docs":{"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.024390243902439025},"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.012269938650306749},"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.01834862385321101}}},"4":{"docs":{"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.036585365853658534},"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.018404907975460124},"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.01834862385321101}},",":{"docs":{"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.012195121951219513}}}},"5":{"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.018404907975460124},"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.009174311926605505}}},"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.017045454545454544},"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":0.031746031746031744},"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.012195121951219513},"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338},"part2/147. 对链表进行插入排序.html":{"ref":"part2/147. 对链表进行插入排序.html","tf":0.017543859649122806},"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.007751937984496124},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169},"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.0070921985815602835},"others/求1+2+…+n.html":{"ref":"others/求1+2+…+n.html","tf":0.12}},"=":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0051813471502590676},"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.01092896174863388},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.01834862385321101}}}}}}},"d":{"docs":{"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.016129032258064516}},"o":{"docs":{},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182}}}}}},"p":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.00546448087431694},"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.010526315789473684},"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666},"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}},"(":{"docs":{},"i":{"docs":{"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.01694915254237288}},",":{"docs":{},"j":{"docs":{},")":{"docs":{},"表":{"docs":{},"示":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},",":{"docs":{},"j":{"docs":{},")":{"docs":{},"是":{"docs":{},"否":{"docs":{},"为":{"docs":{},"回":{"docs":{},"文":{"docs":{},"串":{"docs":{},"。":{"docs":{"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.01694915254237288}}}}}}}}}}}}}}}}}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.010526315789473684}},"[":{"0":{"docs":{},"]":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.00546448087431694}},"[":{"docs":{},"m":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}}}}},"1":{"docs":{},"]":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.00546448087431694}}}},"docs":{}}}},"1":{"docs":{},"]":{"docs":{"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.010526315789473684}}}},"docs":{},"i":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.02185792349726776}},"]":{"docs":{"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.010526315789473684}},"[":{"0":{"docs":{},"]":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.01092896174863388}}}},"1":{"docs":{},"]":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.01092896174863388}}}},"docs":{}}}},"p":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},"]":{"docs":{},"[":{"docs":{},"p":{"docs":{},"[":{"1":{"docs":{},"]":{"docs":{},"]":{"docs":{"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666}}}}},"docs":{}}}}}}},"docs":{}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.01092896174863388}},")":{"docs":{},";":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.01092896174863388}}}}}},"i":{"docs":{},"n":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.01092896174863388}},")":{"docs":{},";":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.01092896174863388}}}}}}},"过":{"docs":{},"程":{"docs":{},"中":{"docs":{},"，":{"docs":{},"只":{"docs":{},"涉":{"docs":{},"及":{"docs":{},"i":{"docs":{"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.010526315789473684}}}}}}}}}}},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667},"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.012048192771084338}}}},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.012048192771084338}}}}}}}}}}}}}}}}},"f":{"docs":{},"s":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},",":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0072992700729927005}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0072992700729927005}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{},"p":{"docs":{},",":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0072992700729927005}}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0072992700729927005}}}}}}}}}}}}},"e":{"docs":{"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.04838709677419355}},"n":{"docs":{},"d":{"1":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.017045454545454544}},",":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182}}}},"2":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.017045454545454544}},",":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182}}}},"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374}},";":{"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374}}}},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"d":{"docs":{},"_":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}}}}}}}}},"l":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}}}}}}}},"x":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}}}}},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{"partmore/1431. 拥有最多糖果的孩子.html":{"ref":"partmore/1431. 拥有最多糖果的孩子.html","tf":0.03508771929824561}},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"partmore/1431. 拥有最多糖果的孩子.html":{"ref":"partmore/1431. 拥有最多糖果的孩子.html","tf":0.017543859649122806}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"r":{"docs":{},"p":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"[":{"docs":{},"]":{"docs":{"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259}}}}}}}}}}}}}}}}}},"g":{"docs":{"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.016129032258064516}},"e":{"docs":{},"t":{"docs":{},"k":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"1":{"docs":{},",":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"1":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182}}},"docs":{}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"1":{"docs":{},",":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"1":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"2":{"docs":{},",":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"2":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182}}},"docs":{}}}}}}}},"docs":{}}}}}}},"docs":{}}}}}},"docs":{}}}}}}}},"2":{"docs":{},",":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"2":{"docs":{},",":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"2":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"1":{"docs":{},",":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"1":{"docs":{},",":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"1":{"docs":{},",":{"docs":{},"k":{"docs":{},")":{"docs":{},";":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182}}}}}}},"docs":{}}}}}},"docs":{}}}}}}}},"docs":{}}}}}}},"docs":{}}}}}},"docs":{}}}}}}}},"docs":{}}}}}}}}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.007772020725388601}}}}},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},")":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}}}}}}},"操":{"docs":{},"作":{"docs":{},"如":{"docs":{},"果":{"docs":{},"要":{"docs":{},"达":{"docs":{},"到":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"还":{"docs":{},"是":{"docs":{},"比":{"docs":{},"较":{"docs":{},"简":{"docs":{},"单":{"docs":{},"的":{"docs":{},"，":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"通":{"docs":{},"过":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"数":{"docs":{},"据":{"docs":{},"结":{"docs":{},"构":{"docs":{},"存":{"docs":{},"储":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"通":{"docs":{},"过":{"docs":{},"查":{"docs":{},"找":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},"在":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"里":{"docs":{},"找":{"docs":{},"到":{"docs":{},"对":{"docs":{},"应":{"docs":{},"的":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"。":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},",":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.012048192771084338}}},"t":{"docs":{},"r":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.03508771929824561}},")":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},";":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},";":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}}},"docs":{},"m":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}}}}},"docs":{}}}}},"o":{"docs":{},"o":{"docs":{},"d":{"docs":{"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.0070921985815602835}}}}}},"k":{"1":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.017543859649122806}}},"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.017045454545454544},"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":3.370143149284253},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.018072289156626505},"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.034013605442176874},"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":2.5727272727272728},"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.020833333333333332}},")":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182},"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.012269938650306749},"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.013605442176870748},"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909}}},";":{"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374}}},"e":{"docs":{},"y":{"docs":{},")":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.007772020725388601}}},",":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.012953367875647668}}},";":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.010362694300518135}}}}},"[":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"d":{"docs":{},"_":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"]":{"docs":{},"，":{"docs":{},"表":{"docs":{},"示":{"docs":{},"其":{"docs":{},"中":{"docs":{},"方":{"docs":{},"括":{"docs":{},"号":{"docs":{},"内":{"docs":{},"部":{"docs":{},"的":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"即":{"docs":{},"可":{"docs":{},"确":{"docs":{},"保":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"j":{"docs":{"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374}}}}}}}}}}}},"，":{"docs":{},"你":{"docs":{},"需":{"docs":{},"要":{"docs":{},"找":{"docs":{},"到":{"docs":{},"该":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"和":{"docs":{},"为":{"docs":{"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374}}}}}}}}}}}}}},"。":{"docs":{"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909}}},"i":{"docs":{},"d":{"docs":{},"s":{"docs":{},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"c":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"partmore/1431. 拥有最多糖果的孩子.html":{"ref":"partmore/1431. 拥有最多糖果的孩子.html","tf":0.017543859649122806}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.016129032258064516}},"(":{"1":{"docs":{},")":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338},"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.015503875968992248}}}},"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"(":{"docs":{},"m":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182}}}}}}},"n":{"2":{"docs":{},")":{"docs":{"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.015503875968992248}}}},"docs":{}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"others/":{"ref":"others/","tf":10}}}}}}},"不":{"docs":{},"会":{"docs":{},"同":{"docs":{},"时":{"docs":{},"为":{"docs":{},"空":{"docs":{},"。":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182}}}}}}}},"能":{"docs":{},"同":{"docs":{},"时":{"docs":{},"选":{"docs":{},"择":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"相":{"docs":{},"邻":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"。":{"docs":{"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.010526315789473684}}}}}}}}}}}}}}},"更":{"docs":{},"改":{"docs":{},"原":{"docs":{},"数":{"docs":{},"组":{"docs":{},"（":{"docs":{},"假":{"docs":{},"设":{"docs":{},"数":{"docs":{},"组":{"docs":{},"是":{"docs":{},"只":{"docs":{},"读":{"docs":{},"的":{"docs":{},"）":{"docs":{},"。":{"docs":{"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.007751937984496124}},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"说":{"docs":{},"不":{"docs":{},"能":{"docs":{},"通":{"docs":{},"过":{"docs":{},"类":{"docs":{},"似":{"docs":{},"排":{"docs":{},"序":{"docs":{},"的":{"docs":{},"方":{"docs":{},"式":{"docs":{},"解":{"docs":{},"决":{"docs":{},"这":{"docs":{},"个":{"docs":{},"问":{"docs":{},"题":{"docs":{"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.007751937984496124}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"触":{"docs":{},"动":{"docs":{},"警":{"docs":{},"报":{"docs":{},"装":{"docs":{},"置":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"下":{"docs":{"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.010526315789473684}}}}}}}}}}}}},"寻":{"docs":{},"找":{"docs":{},"两":{"docs":{},"个":{"docs":{},"正":{"docs":{},"序":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"中":{"docs":{},"位":{"docs":{},"数":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":5}}}}}}}}}}}},"重":{"docs":{},"复":{"docs":{},"数":{"docs":{"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":5}}}}}}},"请":{"docs":{},"你":{"docs":{},"找":{"docs":{},"出":{"docs":{},"这":{"docs":{},"两":{"docs":{},"个":{"docs":{},"正":{"docs":{},"序":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"中":{"docs":{},"位":{"docs":{},"数":{"docs":{},"，":{"docs":{},"并":{"docs":{},"且":{"docs":{},"要":{"docs":{},"求":{"docs":{},"算":{"docs":{},"法":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"实":{"docs":{},"现":{"docs":{},"这":{"docs":{},"个":{"docs":{},"将":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"进":{"docs":{},"行":{"docs":{},"指":{"docs":{},"定":{"docs":{},"行":{"docs":{},"数":{"docs":{},"变":{"docs":{},"换":{"docs":{},"的":{"docs":{},"函":{"docs":{},"数":{"docs":{},"：":{"docs":{"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.016129032258064516}}}}}}}}}}}}}}}}}}}}}},"按":{"docs":{},"照":{"docs":{},"如":{"docs":{},"下":{"docs":{},"规":{"docs":{},"则":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"两":{"docs":{},"个":{"docs":{},"机":{"docs":{},"器":{"docs":{},"人":{"docs":{},"能":{"docs":{},"收":{"docs":{},"集":{"docs":{},"的":{"docs":{},"最":{"docs":{},"多":{"docs":{},"樱":{"docs":{},"桃":{"docs":{},"数":{"docs":{},"目":{"docs":{},"：":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}}}}}}}}}}}}}}}}}}}}}}}}}}},"返":{"docs":{},"回":{"docs":{},"一":{"docs":{},"个":{"docs":{},"布":{"docs":{},"尔":{"docs":{},"值":{"docs":{},"列":{"docs":{},"表":{"docs":{},"，":{"docs":{},"列":{"docs":{},"表":{"docs":{},"中":{"docs":{},"每":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"依":{"docs":{},"次":{"docs":{},"分":{"docs":{},"别":{"docs":{},"对":{"docs":{},"应":{"docs":{"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666}}}}}}}}}}}}}}}}}}}}}}}}}},"这":{"docs":{},"个":{"docs":{},"题":{"docs":{},"目":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{},"作":{"docs":{},"为":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"的":{"docs":{},"第":{"4":{"docs":{},"个":{"docs":{},"题":{"docs":{},"目":{"docs":{},"，":{"docs":{},"这":{"docs":{},"难":{"docs":{},"度":{"docs":{},"是":{"docs":{},"要":{"docs":{},"劝":{"docs":{},"退":{"docs":{},"刚":{"docs":{},"刚":{"docs":{},"刷":{"docs":{},"题":{"docs":{},"的":{"docs":{},"萌":{"docs":{},"新":{"docs":{},"(":{"docs":{},"我":{"docs":{},")":{"docs":{},"啊":{"docs":{},"！":{"docs":{},"这":{"docs":{},"题":{"docs":{},"以":{"docs":{},"后":{"docs":{},"有":{"docs":{},"时":{"docs":{},"间":{"docs":{},"再":{"docs":{},"补":{"docs":{},"题":{"docs":{},"解":{"docs":{},"吧":{"docs":{},"，":{"docs":{},"就":{"docs":{},"贴":{"docs":{},"个":{"docs":{},"代":{"docs":{},"码":{"docs":{},"先":{"docs":{},"。":{"docs":{"part1/4. 寻找两个正序数组的中位数.html":{"ref":"part1/4. 寻找两个正序数组的中位数.html","tf":0.005681818181818182}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}},"涉":{"docs":{},"及":{"docs":{},"到":{"docs":{},"的":{"docs":{},"知":{"docs":{},"识":{"docs":{},"点":{"docs":{},"很":{"docs":{},"多":{"docs":{},"：":{"docs":{},"位":{"docs":{},"运":{"docs":{},"算":{"docs":{},"，":{"docs":{},"前":{"docs":{},"缀":{"docs":{},"和":{"docs":{},"，":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"表":{"docs":{},"，":{"docs":{},"状":{"docs":{},"态":{"docs":{},"压":{"docs":{},"缩":{"docs":{},"(":{"docs":{},"这":{"docs":{},"是":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"的":{"docs":{},"中":{"docs":{},"等":{"docs":{},"难":{"docs":{},"度":{"docs":{},"？":{"docs":{},")":{"docs":{},"，":{"docs":{},"自":{"docs":{},"己":{"docs":{},"第":{"docs":{},"一":{"docs":{},"次":{"docs":{},"做":{"docs":{},"也":{"docs":{},"没":{"docs":{},"有":{"docs":{},"想":{"docs":{},"到":{"docs":{},"，":{"docs":{},"看":{"docs":{},"了":{"docs":{},"题":{"docs":{},"解":{"docs":{},"后":{"docs":{},"才":{"docs":{},"慢":{"docs":{},"慢":{"docs":{},"理":{"docs":{},"解":{"docs":{},"的":{"docs":{},"，":{"docs":{},"其":{"docs":{},"实":{"docs":{},"涉":{"docs":{},"及":{"docs":{},"到":{"docs":{},"的":{"docs":{},"知":{"docs":{},"识":{"docs":{},"都":{"docs":{},"不":{"docs":{},"难":{"docs":{},"，":{"docs":{},"但":{"docs":{},"整":{"docs":{},"合":{"docs":{},"到":{"docs":{},"一":{"docs":{},"起":{"docs":{},"就":{"docs":{},"很":{"docs":{},"难":{"docs":{},"想":{"docs":{},"到":{"docs":{},"了":{"docs":{},"。":{"docs":{"partmore/1371. 每个元音包含偶数次的最长子字符串.html":{"ref":"partmore/1371. 每个元音包含偶数次的最长子字符串.html","tf":0.029411764705882353}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"和":{"docs":{},"数":{"docs":{},"塔":{"docs":{},"题":{"docs":{},"目":{"docs":{},"类":{"docs":{},"似":{"docs":{},"，":{"docs":{},"只":{"docs":{},"不":{"docs":{},"过":{"docs":{},"从":{"docs":{},"一":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"开":{"docs":{},"始":{"docs":{},"变":{"docs":{},"成":{"docs":{},"从":{"docs":{},"两":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"同":{"docs":{},"时":{"docs":{},"开":{"docs":{},"始":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"在":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"方":{"docs":{},"程":{"docs":{},"上":{"docs":{},"要":{"docs":{},"多":{"docs":{},"记":{"docs":{},"录":{"docs":{},"一":{"docs":{},"种":{"docs":{},"状":{"docs":{},"态":{"docs":{},"。":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"样":{"docs":{},"我":{"docs":{},"们":{"docs":{},"就":{"docs":{},"能":{"docs":{},"找":{"docs":{},"到":{"docs":{},"栈":{"docs":{},"顶":{"docs":{},"位":{"docs":{},"置":{"docs":{},"的":{"docs":{},"对":{"docs":{},"于":{"docs":{},"枚":{"docs":{},"举":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"了":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"栈":{"docs":{},"可":{"docs":{},"能":{"docs":{},"不":{"docs":{},"是":{"docs":{},"为":{"docs":{},"空":{"docs":{},"，":{"docs":{},"再":{"docs":{},"把":{"docs":{},"栈":{"docs":{},"里":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"依":{"docs":{},"次":{"docs":{},"出":{"docs":{},"栈":{"docs":{},"，":{"docs":{},"计":{"docs":{},"算":{"docs":{},"面":{"docs":{},"积":{"docs":{},"即":{"docs":{},"可":{"docs":{},"。":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"题":{"docs":{},"第":{"docs":{},"一":{"docs":{},"时":{"docs":{},"间":{"docs":{},"应":{"docs":{},"该":{"docs":{},"想":{"docs":{},"到":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"，":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"表":{"docs":{},"示":{"docs":{},"数":{"docs":{},"组":{"docs":{},"前":{"docs":{},"i":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"能":{"docs":{},"获":{"docs":{},"取":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"，":{"docs":{},"在":{"docs":{},"i":{"docs":{},"位":{"docs":{},"置":{"docs":{},"有":{"docs":{},"两":{"docs":{},"种":{"docs":{},"选":{"docs":{},"择":{"docs":{},"，":{"docs":{},"一":{"docs":{},"个":{"docs":{},"是":{"docs":{},"选":{"docs":{},"择":{"docs":{},"i":{"docs":{},"位":{"docs":{},"置":{"docs":{},"的":{"docs":{},"数":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"一":{"docs":{},"定":{"docs":{},"是":{"docs":{},"从":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.010526315789473684}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"里":{"docs":{},"先":{"docs":{},"解":{"docs":{},"释":{"docs":{},"一":{"docs":{},"下":{"docs":{},"我":{"docs":{},"的":{"docs":{},"代":{"docs":{},"码":{"docs":{},"都":{"docs":{},"干":{"docs":{},"了":{"docs":{},"些":{"docs":{},"什":{"docs":{},"么":{"docs":{},"，":{"docs":{},"之":{"docs":{},"后":{"docs":{},"在":{"docs":{},"一":{"docs":{},"步":{"docs":{},"步":{"docs":{},"解":{"docs":{},"释":{"docs":{},"为":{"docs":{},"什":{"docs":{},"么":{"docs":{},"这":{"docs":{},"样":{"docs":{},"想":{"docs":{},"。":{"docs":{"partmore/1371. 每个元音包含偶数次的最长子字符串.html":{"ref":"partmore/1371. 每个元音包含偶数次的最长子字符串.html","tf":0.029411764705882353}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"\"":{"2":{"docs":{},"[":{"docs":{},"a":{"docs":{},"b":{"docs":{},"c":{"docs":{},"]":{"3":{"docs":{},"[":{"docs":{},"c":{"docs":{},"d":{"docs":{},"]":{"docs":{},"e":{"docs":{},"f":{"docs":{},"\"":{"docs":{},",":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}}}}}}}},"docs":{}}}}}}},"3":{"docs":{},"[":{"docs":{},"a":{"2":{"docs":{},"[":{"docs":{},"c":{"docs":{},"]":{"docs":{},"]":{"docs":{},"\"":{"docs":{},",":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}}}}}},"docs":{},"]":{"2":{"docs":{},"[":{"docs":{},"b":{"docs":{},"c":{"docs":{},"]":{"docs":{},"\"":{"docs":{},",":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}}}}}},"docs":{}}}}},"docs":{"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.018518518518518517}},"\"":{"docs":{},";":{"docs":{"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.01694915254237288}}}},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{},"i":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"\"":{"docs":{"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.016129032258064516}}}}}}}}}}}}}}}}}}},")":{"docs":{"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259}}},"*":{"docs":{},"\"":{"docs":{"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259}}}},"+":{"docs":{},"\"":{"docs":{"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259}}}},"/":{"docs":{},"\"":{"docs":{"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259}}}},"a":{"docs":{},"a":{"docs":{},"a":{"docs":{},"b":{"docs":{},"c":{"docs":{},"b":{"docs":{},"c":{"docs":{},"\"":{"docs":{},".":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}}}}}}},"b":{"docs":{},"c":{"docs":{},"a":{"docs":{},"b":{"docs":{},"c":{"docs":{},"c":{"docs":{},"d":{"docs":{},"c":{"docs":{},"d":{"docs":{},"c":{"docs":{},"d":{"docs":{},"e":{"docs":{},"f":{"docs":{},"\"":{"docs":{},".":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}}}}}}}}}}}}}},"c":{"docs":{},"c":{"docs":{},"a":{"docs":{},"c":{"docs":{},"c":{"docs":{},"a":{"docs":{},"c":{"docs":{},"c":{"docs":{},"\"":{"docs":{},".":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}}}}}}}}}}},"&":{"docs":{},"&":{"docs":{"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.01694915254237288},"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":0.015873015873015872},"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.012195121951219513},"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374},"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.024390243902439025},"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.014598540145985401},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.012048192771084338},"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.017543859649122806},"others/求1+2+…+n.html":{"ref":"others/求1+2+…+n.html","tf":0.04}}}},"中":{"docs":{},"心":{"docs":{},"扩":{"docs":{},"展":{"docs":{},"法":{"docs":{"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.03389830508474576}}}}}},"最":{"docs":{},"长":{"docs":{},"的":{"docs":{},"回":{"docs":{},"文":{"docs":{},"子":{"docs":{},"串":{"docs":{},"。":{"docs":{},"你":{"docs":{},"可":{"docs":{},"以":{"docs":{},"假":{"docs":{},"设":{"docs":{"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.01694915254237288}}}}}}}}}}}}}}},"每":{"docs":{},"个":{"docs":{},"格":{"docs":{},"子":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"表":{"docs":{},"示":{"docs":{},"你":{"docs":{},"能":{"docs":{},"获":{"docs":{},"得":{"docs":{},"的":{"docs":{},"樱":{"docs":{},"桃":{"docs":{},"数":{"docs":{},"目":{"docs":{},"。":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}}}}}}}}}}}}}}}}}}}}},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"2":{"docs":{},".":{"2":{"docs":{},".":{"docs":{"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.01694915254237288}}}},"3":{"docs":{},".":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.00546448087431694}}}},"docs":{}}},"docs":{"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.01694915254237288},"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.00546448087431694}}}}}},"枚":{"docs":{},"举":{"2":{"docs":{},".":{"2":{"docs":{},".":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667},"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.00546448087431694}}}},"docs":{}}},"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667},"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.00546448087431694}},"每":{"docs":{},"一":{"docs":{},"个":{"docs":{},"以":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"或":{"docs":{},"者":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"和":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{},"为":{"docs":{},"中":{"docs":{},"心":{"docs":{},"的":{"docs":{},"最":{"docs":{},"长":{"docs":{},"回":{"docs":{},"文":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"，":{"docs":{},"枚":{"docs":{},"举":{"docs":{},"的":{"docs":{},"次":{"docs":{},"数":{"docs":{},"为":{"docs":{},"n":{"docs":{},"，":{"docs":{},"求":{"docs":{},"最":{"docs":{},"长":{"docs":{},"回":{"docs":{},"文":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"这":{"docs":{},"个":{"docs":{},"写":{"docs":{},"法":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"2":{"docs":{},")":{"docs":{"part1/5. 最长回文子串.html":{"ref":"part1/5. 最长回文子串.html","tf":0.01694915254237288}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}},"思":{"docs":{},"路":{"docs":{},"里":{"docs":{},"，":{"docs":{},"最":{"docs":{},"重":{"docs":{},"要":{"docs":{},"的":{"docs":{},"目":{"docs":{},"的":{"docs":{},"是":{"docs":{},"获":{"docs":{},"得":{"docs":{},"第":{"docs":{},"i":{"docs":{},"个":{"docs":{},"位":{"docs":{},"置":{"docs":{},"左":{"docs":{},"边":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"小":{"docs":{},"于":{"docs":{},"它":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"和":{"docs":{},"右":{"docs":{},"边":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"小":{"docs":{},"于":{"docs":{},"它":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"为":{"docs":{},"什":{"docs":{},"么":{"docs":{},"利":{"docs":{},"用":{"docs":{},"单":{"docs":{},"调":{"docs":{},"栈":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"求":{"docs":{},"得":{"docs":{},"这":{"docs":{},"两":{"docs":{},"个":{"docs":{},"位":{"docs":{},"置":{"docs":{},"呢":{"docs":{},"？":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"数":{"docs":{},"组":{"docs":{},"每":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"从":{"docs":{},"该":{"docs":{},"元":{"docs":{},"素":{"docs":{},"向":{"docs":{},"左":{"docs":{},"右":{"docs":{},"两":{"docs":{},"边":{"docs":{},"扩":{"docs":{},"展":{"docs":{},"，":{"docs":{},"找":{"docs":{},"到":{"docs":{},"左":{"docs":{},"右":{"docs":{},"两":{"docs":{},"边":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"小":{"docs":{},"于":{"docs":{},"它":{"docs":{},"的":{"docs":{},"数":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"计":{"docs":{},"算":{"docs":{},"面":{"docs":{},"积":{"docs":{},"即":{"docs":{},"可":{"docs":{},"。":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"2":{"docs":{},")":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"法":{"docs":{},"的":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"2":{"docs":{},")":{"docs":{},"，":{"docs":{},"枚":{"docs":{},"举":{"docs":{},"了":{"docs":{},"每":{"docs":{},"一":{"docs":{},"种":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"但":{"docs":{},"我":{"docs":{},"们":{"docs":{},"真":{"docs":{},"的":{"docs":{},"有":{"docs":{},"必":{"docs":{},"要":{"docs":{},"知":{"docs":{},"道":{"docs":{},"每":{"docs":{},"一":{"docs":{},"个":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},"吗":{"docs":{},"？":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.00546448087431694}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}},"z":{"docs":{"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":3.3494623655913975},"part7/680. 验证回文字符串 Ⅱ.html":{"ref":"part7/680. 验证回文字符串 Ⅱ.html","tf":0.03125}}},"字":{"docs":{},"形":{"docs":{},"变":{"docs":{},"换":{"docs":{"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":3.333333333333333}}}},"排":{"docs":{},"列":{"docs":{},"。":{"docs":{"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.016129032258064516}}}}}},"符":{"docs":{},"'":{"docs":{},"[":{"docs":{},"'":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}},"]":{"docs":{},"'":{"docs":{},"：":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}}},"串":{"docs":{},"解":{"docs":{},"码":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":5}}}},"只":{"docs":{},"包":{"docs":{},"含":{"docs":{},"从":{"docs":{"part7/680. 验证回文字符串 Ⅱ.html":{"ref":"part7/680. 验证回文字符串 Ⅱ.html","tf":0.03125}}}}}}}}},"将":{"docs":{},"一":{"docs":{},"个":{"docs":{},"给":{"docs":{},"定":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"根":{"docs":{},"据":{"docs":{},"给":{"docs":{},"定":{"docs":{},"的":{"docs":{},"行":{"docs":{},"数":{"docs":{},"，":{"docs":{},"以":{"docs":{},"从":{"docs":{},"上":{"docs":{},"往":{"docs":{},"下":{"docs":{},"、":{"docs":{},"从":{"docs":{},"左":{"docs":{},"到":{"docs":{},"右":{"docs":{},"进":{"docs":{},"行":{"docs":{"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.016129032258064516}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"两":{"docs":{},"个":{"docs":{},"升":{"docs":{},"序":{"docs":{},"链":{"docs":{},"表":{"docs":{},"合":{"docs":{},"并":{"docs":{},"为":{"docs":{},"一":{"docs":{},"个":{"docs":{},"新":{"docs":{},"的":{"docs":{},"升":{"docs":{},"序":{"docs":{},"链":{"docs":{},"表":{"docs":{},"并":{"docs":{},"返":{"docs":{},"回":{"docs":{},"。":{"docs":{},"新":{"docs":{},"链":{"docs":{},"表":{"docs":{},"是":{"docs":{},"通":{"docs":{},"过":{"docs":{},"拼":{"docs":{},"接":{"docs":{},"给":{"docs":{},"定":{"docs":{},"的":{"docs":{},"两":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"的":{"docs":{},"所":{"docs":{},"有":{"docs":{},"节":{"docs":{},"点":{"docs":{},"组":{"docs":{},"成":{"docs":{},"的":{"docs":{},"。":{"docs":{"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.012195121951219513}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"找":{"docs":{},"规":{"docs":{},"律":{"docs":{},"，":{"docs":{},"根":{"docs":{},"据":{"docs":{},"每":{"docs":{},"行":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"的":{"docs":{},"对":{"docs":{},"应":{"docs":{},"关":{"docs":{},"系":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"简":{"docs":{},"单":{"docs":{},"的":{"docs":{},"推":{"docs":{},"出":{"docs":{},"来":{"docs":{},"。":{"docs":{"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.016129032258064516}}}}}}}}}}}}}}}}}}}}}}}}}}},"到":{"docs":{},"该":{"docs":{},"树":{"docs":{},"中":{"docs":{},"两":{"docs":{},"个":{"docs":{},"指":{"docs":{},"定":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"最":{"docs":{},"近":{"docs":{},"公":{"docs":{},"共":{"docs":{},"祖":{"docs":{},"先":{"docs":{},"。":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0072992700729927005}}}}}}}}}}}}}}}}}}}}},"时":{"docs":{},"，":{"docs":{},"排":{"docs":{},"列":{"docs":{},"如":{"docs":{},"下":{"docs":{},"：":{"docs":{"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.016129032258064516}}}}}}},"应":{"docs":{},"当":{"docs":{},"返":{"docs":{},"回":{"docs":{},":":{"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.012269938650306749}}}}}}}},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"。":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667}}}}}}}},"内":{"docs":{},"完":{"docs":{},"成":{"docs":{},"这":{"docs":{},"两":{"docs":{},"种":{"docs":{},"操":{"docs":{},"作":{"docs":{},"？":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}}}}}}}}}}},"小":{"docs":{},"于":{"docs":{"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.015503875968992248}}}}}}}}},"比":{"docs":{},"如":{"docs":{},"输":{"docs":{},"入":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"为":{"docs":{"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.016129032258064516}}}}}}}}}},"行":{"docs":{},"数":{"docs":{},"为":{"docs":{"part1/6. Z 字形变换.html":{"ref":"part1/6. Z 字形变换.html","tf":0.016129032258064516}}}}},"[":{"0":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.016666666666666666}}}},"docs":{"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909}},"i":{"docs":{},"]":{"docs":{},"是":{"docs":{},"否":{"docs":{},"为":{"docs":{},"偶":{"docs":{},"数":{"docs":{},"，":{"docs":{},"j":{"docs":{"partmore/1371. 每个元音包含偶数次的最长子字符串.html":{"ref":"partmore/1371. 每个元音包含偶数次的最长子字符串.html","tf":0.029411764705882353}}}}}}}}}}}},"]":{"docs":{},",":{"docs":{"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909}}}}},"1":{"docs":{},",":{"0":{"docs":{},",":{"2":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"0":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{},",":{"docs":{"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"]":{"docs":{"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666}}}},"1":{"docs":{},",":{"1":{"docs":{},"]":{"docs":{},",":{"docs":{"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374}}}}},"3":{"docs":{},",":{"3":{"docs":{},",":{"3":{"docs":{},",":{"3":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"]":{"docs":{"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.013605442176870748}}}},"2":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},",":{"4":{"docs":{},",":{"4":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"3":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756}}}},"docs":{}}}}}}}},"docs":{}}}}}}}},"docs":{}}},"docs":{"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374}}}},"2":{"docs":{},",":{"1":{"docs":{},",":{"5":{"docs":{},",":{"6":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667}},"。":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"4":{"docs":{},",":{"5":{"docs":{},",":{"0":{"docs":{},",":{"docs":{"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909}}}},"docs":{}}},"docs":{"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909}}}},"5":{"docs":{},",":{"docs":{"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.01818181818181818}}},"]":{"docs":{},",":{"docs":{"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909}}}}},"docs":{"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.013605442176870748},"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909}},"−":{"2":{"3":{"1":{"docs":{},",":{"docs":{"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":0.015873015873015872}}}},"docs":{}},"docs":{}},"docs":{}},"j":{"1":{"docs":{},"]":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}}},"2":{"docs":{},"]":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}}},"docs":{}}},"x":{"docs":{"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":0.031746031746031744},"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.014598540145985401},"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}},")":{"docs":{"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":0.015873015873015872}}},"，":{"docs":{},"满":{"docs":{},"足":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0072992700729927005}}}}}},"−":{"docs":{"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":0.015873015873015872}}},"位":{"docs":{},"的":{"docs":{},"有":{"docs":{},"符":{"docs":{},"号":{"docs":{},"整":{"docs":{},"数":{"docs":{},"，":{"docs":{},"你":{"docs":{},"需":{"docs":{},"要":{"docs":{},"将":{"docs":{},"这":{"docs":{},"个":{"docs":{},"整":{"docs":{},"数":{"docs":{},"中":{"docs":{},"每":{"docs":{},"位":{"docs":{},"上":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"进":{"docs":{},"行":{"docs":{},"反":{"docs":{},"转":{"docs":{},"。":{"docs":{"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":0.015873015873015872}}}}}}}}}}}}}}}}}}}}}},"则":{"docs":{},"其":{"docs":{},"数":{"docs":{},"值":{"docs":{},"范":{"docs":{},"围":{"docs":{},"为":{"docs":{"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":0.015873015873015872}}}}}}}}}}}}}}}}},"假":{"docs":{},"设":{"docs":{},"我":{"docs":{},"们":{"docs":{},"的":{"docs":{},"环":{"docs":{},"境":{"docs":{},"只":{"docs":{},"能":{"docs":{},"存":{"docs":{},"储":{"docs":{},"得":{"docs":{},"下":{"docs":{"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":0.015873015873015872}}}}}}}}}}}}}}},"注":{"docs":{},"意":{"docs":{},":":{"docs":{"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":0.015873015873015872},"part7/680. 验证回文字符串 Ⅱ.html":{"ref":"part7/680. 验证回文字符串 Ⅱ.html","tf":0.03125}}},"处":{"docs":{},"理":{"docs":{},"好":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"越":{"docs":{},"界":{"docs":{},"就":{"docs":{},"好":{"docs":{},"了":{"docs":{},"。":{"docs":{"part1/7. 整数反转.html":{"ref":"part1/7. 整数反转.html","tf":0.015873015873015872}}}}}}}}}}}}}},"：":{"docs":{},"如":{"docs":{},"果":{"docs":{},"课":{"docs":{},"程":{"docs":{"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666}}}}}}}}},"合":{"docs":{},"并":{"docs":{},"两":{"docs":{},"个":{"docs":{},"有":{"docs":{},"序":{"docs":{},"链":{"docs":{},"表":{"docs":{"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":5}}}}}}}}}},"示":{"docs":{},"例":{"docs":{"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374},"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909}},"：":{"docs":{"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.012195121951219513},"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374}}},":":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667},"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.009174311926605505},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}},"输":{"docs":{},"入":{"docs":{},"：":{"1":{"docs":{"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.012195121951219513}}},"docs":{},"a":{"docs":{"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909}}}},":":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667},"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.009174311926605505}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374}}}}}}},"出":{"docs":{},"：":{"1":{"docs":{"part1/21. 合并两个有序链表.html":{"ref":"part1/21. 合并两个有序链表.html","tf":0.012195121951219513}}},"7":{"docs":{"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909}}},"docs":{}},":":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667},"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.009174311926605505},"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374}}}}},";":{"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374},"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}},"上":{"docs":{},"面":{"docs":{},"的":{"docs":{},"代":{"docs":{},"码":{"docs":{},"中":{"docs":{},"主":{"docs":{},"要":{"docs":{},"是":{"docs":{},"在":{"docs":{},"反":{"docs":{},"转":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"借":{"docs":{},"助":{"docs":{},"了":{"docs":{},"栈":{"docs":{},"，":{"docs":{},"使":{"docs":{},"用":{"docs":{},"了":{"docs":{},"额":{"docs":{},"外":{"docs":{},"空":{"docs":{},"间":{"docs":{},"。":{"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"个":{"docs":{},"一":{"docs":{},"组":{"docs":{},"翻":{"docs":{},"转":{"docs":{},"链":{"docs":{},"表":{"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":3.333333333333333}}}}}}}},"节":{"docs":{},"点":{"docs":{},"一":{"docs":{},"组":{"docs":{},"进":{"docs":{},"行":{"docs":{},"翻":{"docs":{},"转":{"docs":{},"，":{"docs":{},"请":{"docs":{},"你":{"docs":{},"返":{"docs":{},"回":{"docs":{},"翻":{"docs":{},"转":{"docs":{},"后":{"docs":{},"的":{"docs":{},"链":{"docs":{},"表":{"docs":{},"。":{"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374}}}}}}}}}}}}}}}}}}}}}},"单":{"docs":{},"位":{"docs":{},"。":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667}}}}},"非":{"docs":{},"负":{"docs":{},"整":{"docs":{},"数":{"docs":{},"，":{"docs":{},"用":{"docs":{},"来":{"docs":{},"表":{"docs":{},"示":{"docs":{},"柱":{"docs":{},"状":{"docs":{},"图":{"docs":{},"中":{"docs":{},"各":{"docs":{},"个":{"docs":{},"柱":{"docs":{},"子":{"docs":{},"的":{"docs":{},"高":{"docs":{},"度":{"docs":{},"。":{"docs":{},"每":{"docs":{},"个":{"docs":{},"柱":{"docs":{},"子":{"docs":{},"彼":{"docs":{},"此":{"docs":{},"相":{"docs":{},"邻":{"docs":{},"，":{"docs":{},"且":{"docs":{},"宽":{"docs":{},"度":{"docs":{},"为":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"整":{"docs":{},"数":{"docs":{},"的":{"docs":{},"数":{"docs":{},"组":{"docs":{"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.015503875968992248}}}}}}},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},"满":{"docs":{},"足":{"docs":{},"其":{"docs":{},"元":{"docs":{},"素":{"docs":{},"之":{"docs":{},"和":{"docs":{},"可":{"docs":{},"被":{"docs":{"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909}}}}}}}}}}}}}},"孩":{"docs":{},"子":{"docs":{},"拥":{"docs":{},"有":{"docs":{},"的":{"docs":{},"糖":{"docs":{},"果":{"docs":{},"数":{"docs":{},"目":{"docs":{},"。":{"docs":{"partmore/1431. 拥有最多糖果的孩子.html":{"ref":"partmore/1431. 拥有最多糖果的孩子.html","tf":0.017543859649122806}}}}}}}}}}}},"糖":{"docs":{},"果":{"docs":{},"分":{"docs":{},"配":{"docs":{},"给":{"docs":{},"孩":{"docs":{},"子":{"docs":{},"们":{"docs":{},"之":{"docs":{},"后":{"docs":{},"，":{"docs":{},"此":{"docs":{},"孩":{"docs":{},"子":{"docs":{},"有":{"docs":{"partmore/1431. 拥有最多糖果的孩子.html":{"ref":"partmore/1431. 拥有最多糖果的孩子.html","tf":0.017543859649122806}}}}}}}}}}}}}}}}}},"当":{"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.012269938650306749}},"一":{"docs":{},"个":{"docs":{},"机":{"docs":{},"器":{"docs":{},"人":{"docs":{},"经":{"docs":{},"过":{"docs":{},"某":{"docs":{},"个":{"docs":{},"格":{"docs":{},"子":{"docs":{},"时":{"docs":{},"，":{"docs":{},"它":{"docs":{},"会":{"docs":{},"把":{"docs":{},"该":{"docs":{},"格":{"docs":{},"子":{"docs":{},"内":{"docs":{},"所":{"docs":{},"有":{"docs":{},"的":{"docs":{},"樱":{"docs":{},"桃":{"docs":{},"都":{"docs":{},"摘":{"docs":{},"走":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"这":{"docs":{},"个":{"docs":{},"位":{"docs":{},"置":{"docs":{},"会":{"docs":{},"变":{"docs":{},"成":{"docs":{},"空":{"docs":{},"格":{"docs":{},"子":{"docs":{},"，":{"docs":{},"即":{"docs":{},"没":{"docs":{},"有":{"docs":{},"樱":{"docs":{},"桃":{"docs":{},"的":{"docs":{},"格":{"docs":{},"子":{"docs":{},"。":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"两":{"docs":{},"个":{"docs":{},"机":{"docs":{},"器":{"docs":{},"人":{"docs":{},"同":{"docs":{},"时":{"docs":{},"到":{"docs":{},"达":{"docs":{},"同":{"docs":{},"一":{"docs":{},"个":{"docs":{},"格":{"docs":{},"子":{"docs":{},"时":{"docs":{},"，":{"docs":{},"它":{"docs":{},"们":{"docs":{},"中":{"docs":{},"只":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"可":{"docs":{},"以":{"docs":{},"摘":{"docs":{},"到":{"docs":{},"樱":{"docs":{},"桃":{"docs":{},"。":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"是":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0072992700729927005}},"一":{"docs":{},"个":{"docs":{},"正":{"docs":{},"整":{"docs":{},"数":{"docs":{},"，":{"docs":{},"它":{"docs":{},"的":{"docs":{},"值":{"docs":{},"小":{"docs":{},"于":{"docs":{},"或":{"docs":{},"等":{"docs":{},"于":{"docs":{},"链":{"docs":{},"表":{"docs":{},"的":{"docs":{},"长":{"docs":{},"度":{"docs":{},"。":{"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374}}}}}}}}}}}}}}}}}}}}}},"对":{"docs":{},"称":{"docs":{},"的":{"docs":{},"。":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756}}}}}},"否":{"docs":{},"是":{"docs":{"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666}}}},"课":{"docs":{},"程":{"docs":{"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.020833333333333332}}}}},"说":{"docs":{},"明":{"docs":{"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374}},"：":{"docs":{"part1/25. K 个一组翻转链表.html":{"ref":"part1/25. K 个一组翻转链表.html","tf":0.006134969325153374},"part2/136. 只出现一次的数字.html":{"ref":"part2/136. 只出现一次的数字.html","tf":0.041666666666666664},"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259},"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.007751937984496124}},"本":{"docs":{},"题":{"docs":{},"中":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"将":{"docs":{},"空":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"定":{"docs":{},"义":{"docs":{},"为":{"docs":{},"有":{"docs":{},"效":{"docs":{},"的":{"docs":{},"回":{"docs":{},"文":{"docs":{},"串":{"docs":{},"。":{"docs":{"part2/125. 验证回文串.html":{"ref":"part2/125. 验证回文串.html","tf":0.03571428571428571}}}}}}}}}}}}}}}}}}}}}}}},":":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0072992700729927005}}}}},"。":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667},"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338},"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.007751937984496124},"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.020833333333333332},"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}},"每":{"docs":{},"个":{"docs":{},"运":{"docs":{},"算":{"docs":{},"对":{"docs":{},"象":{"docs":{},"可":{"docs":{},"以":{"docs":{},"是":{"docs":{},"整":{"docs":{},"数":{"docs":{},"，":{"docs":{},"也":{"docs":{},"可":{"docs":{},"以":{"docs":{},"是":{"docs":{},"另":{"docs":{},"一":{"docs":{},"个":{"docs":{},"逆":{"docs":{},"波":{"docs":{},"兰":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"。":{"docs":{"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259}}}}}}}}}}}}}}}}}}}}}}}}}}}},"别":{"docs":{},"想":{"docs":{},"暴":{"docs":{},"力":{"docs":{},"解":{"docs":{},"决":{"docs":{},"这":{"docs":{},"个":{"docs":{},"问":{"docs":{},"题":{"docs":{},"！":{"docs":{"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.007751937984496124}}}}}}}}}}}}}},"单":{"docs":{},"调":{"docs":{},"栈":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.013333333333333334}}}}},"右":{"docs":{},"边":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"小":{"docs":{},"于":{"docs":{},"它":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"是":{"docs":{},"即":{"docs":{},"将":{"docs":{},"入":{"docs":{},"栈":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"i":{"docs":{},"。":{"docs":{},"当":{"docs":{},"然":{"docs":{},"入":{"docs":{},"栈":{"docs":{},"元":{"docs":{},"素":{"docs":{},"i":{"docs":{},"也":{"docs":{},"可":{"docs":{},"能":{"docs":{},"等":{"docs":{},"于":{"docs":{},"栈":{"docs":{},"顶":{"docs":{},"元":{"docs":{},"素":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"，":{"docs":{},"但":{"docs":{},"这":{"docs":{},"对":{"docs":{},"最":{"docs":{},"终":{"docs":{},"结":{"docs":{},"果":{"docs":{},"是":{"docs":{},"没":{"docs":{},"有":{"docs":{},"影":{"docs":{},"响":{"docs":{},"的":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"i":{"docs":{},"位":{"docs":{},"置":{"docs":{},"求":{"docs":{},"得":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"一":{"docs":{},"定":{"docs":{},"大":{"docs":{},"于":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"位":{"docs":{},"置":{"docs":{},"求":{"docs":{},"得":{"docs":{},"都":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"否":{"docs":{},"则":{"docs":{},"把":{"docs":{},"栈":{"docs":{},"顶":{"docs":{},"元":{"docs":{},"素":{"docs":{},"出":{"docs":{},"栈":{"docs":{},"。":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667}}}}}}}}}},"就":{"docs":{},"不":{"docs":{},"断":{"docs":{},"的":{"docs":{},"往":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"b":{"docs":{},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"中":{"docs":{},"加":{"docs":{},"入":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"返":{"docs":{},"回":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"。":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"图":{"docs":{},"中":{"docs":{},"阴":{"docs":{},"影":{"docs":{},"部":{"docs":{},"分":{"docs":{},"为":{"docs":{},"所":{"docs":{},"能":{"docs":{},"勾":{"docs":{},"勒":{"docs":{},"出":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"面":{"docs":{},"积":{"docs":{},"，":{"docs":{},"其":{"docs":{},"面":{"docs":{},"积":{"docs":{},"为":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667}}}}}}}}}}}}}}}}}}}}}}}}}},"左":{"docs":{},"边":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"小":{"docs":{},"于":{"docs":{},"它":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"一":{"docs":{},"定":{"docs":{},"是":{"docs":{},"它":{"docs":{},"的":{"docs":{},"下":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"(":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"把":{"docs":{},"当":{"docs":{},"前":{"docs":{},"栈":{"docs":{},"顶":{"docs":{},"出":{"docs":{},"栈":{"docs":{},"后":{"docs":{},"的":{"docs":{},"新":{"docs":{},"栈":{"docs":{},"顶":{"docs":{},"元":{"docs":{},"素":{"docs":{},")":{"docs":{},"。":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"柱":{"docs":{},"状":{"docs":{},"图":{"docs":{},"中":{"docs":{},"最":{"docs":{},"大":{"docs":{},"的":{"docs":{},"矩":{"docs":{},"形":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":5}}}}}}}},"的":{"docs":{},"示":{"docs":{},"例":{"docs":{},"，":{"docs":{},"其":{"docs":{},"中":{"docs":{},"每":{"docs":{},"个":{"docs":{},"柱":{"docs":{},"子":{"docs":{},"的":{"docs":{},"宽":{"docs":{},"度":{"docs":{},"为":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667}}}}}}}}}}}}}}}}}}},"求":{"1":{"docs":{},"+":{"2":{"docs":{},"+":{"docs":{},"…":{"docs":{},"+":{"docs":{},"n":{"docs":{"others/求1+2+…+n.html":{"ref":"others/求1+2+…+n.html","tf":10}}}}}}},"docs":{}}},"docs":{"others/求1+2+…+n.html":{"ref":"others/求1+2+…+n.html","tf":0.02}},"在":{"docs":{},"该":{"docs":{},"柱":{"docs":{},"状":{"docs":{},"图":{"docs":{},"中":{"docs":{},"，":{"docs":{},"能":{"docs":{},"够":{"docs":{},"勾":{"docs":{},"勒":{"docs":{},"出":{"docs":{},"来":{"docs":{},"的":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"面":{"docs":{},"积":{"docs":{},"。":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667}}}}}}}}}}}}}}}}}}}}}}}},"和":{"docs":{},"公":{"docs":{},"式":{"docs":{"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.0070921985815602835}}}}}},"通":{"docs":{},"过":{"docs":{},"这":{"docs":{},"种":{"docs":{},"规":{"docs":{},"则":{"docs":{},"，":{"docs":{},"栈":{"docs":{},"里":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"一":{"docs":{},"定":{"docs":{},"是":{"docs":{},"递":{"docs":{},"增":{"docs":{},"的":{"docs":{},"。":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667}}}}}}}}}}}}}}}}}}},"两":{"docs":{},"个":{"docs":{},"栈":{"docs":{},"，":{"docs":{},"分":{"docs":{},"别":{"docs":{},"存":{"docs":{},"储":{"docs":{},"数":{"docs":{},"字":{"docs":{},"和":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"。":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}}}}}}}}}}}}}},"一":{"docs":{},"些":{"docs":{},"数":{"docs":{},"论":{"docs":{},"知":{"docs":{},"识":{"docs":{},"(":{"docs":{},"具":{"docs":{},"体":{"docs":{},"我":{"docs":{},"也":{"docs":{},"不":{"docs":{},"太":{"docs":{},"清":{"docs":{},"楚":{"docs":{},")":{"docs":{},"可":{"docs":{},"以":{"docs":{},"转":{"docs":{},"换":{"docs":{},"为":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"y":{"docs":{},"d":{"docs":{},"算":{"docs":{},"法":{"docs":{},"打":{"docs":{},"表":{"docs":{},"，":{"docs":{},"建":{"docs":{},"立":{"docs":{},"任":{"docs":{},"意":{"docs":{},"节":{"docs":{},"点":{"docs":{},"i":{"docs":{},",":{"docs":{},"j":{"docs":{},"的":{"docs":{},"连":{"docs":{},"通":{"docs":{},"关":{"docs":{},"系":{"docs":{},"，":{"docs":{},"在":{"docs":{},"查":{"docs":{},"询":{"docs":{},"时":{"docs":{},"直":{"docs":{},"接":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"查":{"docs":{},"询":{"docs":{},"打":{"docs":{},"好":{"docs":{},"的":{"docs":{},"表":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"了":{"docs":{},"。":{"docs":{"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"求":{"docs":{},"和":{"docs":{},"公":{"docs":{},"式":{"docs":{},"来":{"docs":{},"解":{"docs":{"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.014184397163120567}}}}}}}}}},"那":{"docs":{},"么":{"docs":{},"，":{"docs":{},"对":{"docs":{},"于":{"docs":{},"要":{"docs":{},"出":{"docs":{},"栈":{"docs":{},"的":{"docs":{},"栈":{"docs":{},"顶":{"docs":{},"元":{"docs":{},"素":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"：":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667}}}}}}}}}}}}}}}}},"d":{"docs":{},"p":{"docs":{},"关":{"docs":{},"系":{"docs":{},"就":{"docs":{},"推":{"docs":{},"出":{"docs":{},"来":{"docs":{},"了":{"docs":{},"，":{"docs":{},"代":{"docs":{},"码":{"docs":{},"如":{"docs":{},"下":{"docs":{},"：":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.00546448087431694}}}}}}}}}}}}}}}}},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"方":{"docs":{},"程":{"docs":{},"为":{"docs":{},"：":{"docs":{"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.010526315789473684}}}}}}}}}},"我":{"docs":{},"们":{"docs":{},"接":{"docs":{},"着":{"docs":{},"分":{"docs":{},"析":{"docs":{},"题":{"docs":{},"目":{"docs":{},"：":{"docs":{},"给":{"docs":{},"定":{"docs":{},"一":{"docs":{},"个":{"docs":{},"包":{"docs":{},"含":{"docs":{"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.007751937984496124}}}}}}}}}}}}}}}}},"重":{"docs":{},"点":{"docs":{},"就":{"docs":{},"是":{"docs":{},"进":{"docs":{},"行":{"docs":{},"怎":{"docs":{},"样":{"docs":{},"的":{"docs":{},"判":{"docs":{},"断":{"docs":{},"了":{"docs":{},"：":{"docs":{},"我":{"docs":{},"们":{"docs":{},"思":{"docs":{},"考":{"docs":{},"一":{"docs":{},"下":{"docs":{},"，":{"docs":{},"假":{"docs":{},"设":{"docs":{},"最":{"docs":{},"终":{"docs":{},"答":{"docs":{},"案":{"docs":{},"x":{"docs":{},"出":{"docs":{},"现":{"docs":{},"了":{"2":{"docs":{},"次":{"docs":{},"，":{"docs":{},"且":{"docs":{},"x":{"docs":{},"在":{"docs":{},"[":{"1":{"docs":{},",":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{},"中":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"[":{"1":{"docs":{},",":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{},"的":{"docs":{},"个":{"docs":{},"数":{"docs":{},"一":{"docs":{},"定":{"docs":{},"为":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.007751937984496124}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}},"docs":{}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"首":{"docs":{},"先":{"docs":{},"看":{"docs":{},"我":{"docs":{},"们":{"docs":{},"是":{"docs":{},"怎":{"docs":{},"么":{"docs":{},"维":{"docs":{},"护":{"docs":{},"的":{"docs":{},"单":{"docs":{},"调":{"docs":{},"栈":{"docs":{},"：":{"docs":{"part1/84. 柱状图中最大的矩形.html":{"ref":"part1/84. 柱状图中最大的矩形.html","tf":0.006666666666666667}}}}}}}}}}}}}}},"是":{"docs":{},"想":{"docs":{},"到":{"docs":{},"暴":{"docs":{},"力":{"docs":{},"的":{"docs":{},"思":{"docs":{},"路":{"docs":{},"，":{"docs":{},"两":{"docs":{},"层":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"循":{"docs":{},"环":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"，":{"docs":{},"枚":{"docs":{},"举":{"docs":{},"每":{"docs":{},"一":{"docs":{},"个":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},"和":{"docs":{},"是":{"docs":{},"否":{"docs":{},"等":{"docs":{},"于":{"docs":{},"k":{"docs":{},"。":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"2":{"docs":{},")":{"docs":{},"。":{"docs":{"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"我":{"docs":{},"们":{"docs":{},"想":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"只":{"docs":{},"看":{"docs":{},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"出":{"docs":{},"现":{"docs":{},"的":{"docs":{},"次":{"docs":{},"数":{"docs":{},"是":{"docs":{},"否":{"docs":{},"为":{"docs":{},"偶":{"docs":{},"数":{"docs":{},"次":{"docs":{},"，":{"docs":{},"应":{"docs":{},"该":{"docs":{},"可":{"docs":{},"以":{"docs":{},"想":{"docs":{},"到":{"docs":{},"用":{"docs":{},"前":{"docs":{},"缀":{"docs":{},"和":{"docs":{},"，":{"docs":{},"统":{"docs":{},"计":{"docs":{},"[":{"0":{"docs":{},",":{"docs":{},"i":{"docs":{},"]":{"docs":{},"该":{"docs":{},"字":{"docs":{},"符":{"docs":{},"出":{"docs":{},"现":{"docs":{},"的":{"docs":{},"个":{"docs":{},"数":{"docs":{},"；":{"docs":{},"找":{"docs":{},"一":{"docs":{},"个":{"docs":{},"位":{"docs":{},"置":{"docs":{},"j":{"docs":{},"，":{"docs":{},"判":{"docs":{},"断":{"docs":{},"[":{"0":{"docs":{},",":{"docs":{},"j":{"docs":{},"]":{"docs":{"partmore/1371. 每个元音包含偶数次的最长子字符串.html":{"ref":"partmore/1371. 每个元音包含偶数次的最长子字符串.html","tf":0.029411764705882353}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"\\":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.036585365853658534}}},"b":{"docs":{"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259},"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.020833333333333332}},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.018292682926829267},"part2/125. 验证回文串.html":{"ref":"part2/125. 验证回文串.html","tf":0.03571428571428571},"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338},"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259},"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0364963503649635},"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.007751937984496124},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169},"part7/680. 验证回文字符串 Ⅱ.html":{"ref":"part7/680. 验证回文字符串 Ⅱ.html","tf":0.03125},"others/求1+2+…+n.html":{"ref":"others/求1+2+…+n.html","tf":0.02}},"[":{"docs":{},"]":{"docs":{},"[":{"docs":{},"]":{"docs":{"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666}}}}},"n":{"docs":{},"]":{"docs":{},"[":{"docs":{},"n":{"docs":{},"]":{"docs":{},";":{"docs":{"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666}}}}}}}}}}}}}}},",":{"docs":{"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259}}},";":{"docs":{"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.037037037037037035}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{},";":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}}}}},"q":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0072992700729927005}},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.012195121951219513},"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.03333333333333333}},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756}}}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756}}}}}}}}}}}}}},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756}}}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"l":{"docs":{},"l":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.012195121951219513}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.03125}},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.020833333333333332}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666}},"[":{"0":{"docs":{},"]":{"docs":{"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666}}}},"1":{"docs":{},"]":{"docs":{"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666}}}},"docs":{}}}}}}}}}}},")":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.021897810218978103}},";":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.021897810218978103}}}}},"例":{"docs":{},"如":{"docs":{},"，":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756}}}}},"想":{"docs":{},"要":{"docs":{},"学":{"docs":{},"习":{"docs":{},"课":{"docs":{},"程":{"docs":{"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.016666666666666666}}}}}}}}}}},"则":{"docs":{},"不":{"docs":{},"是":{"docs":{},"镜":{"docs":{},"像":{"docs":{},"对":{"docs":{},"称":{"docs":{},"的":{"docs":{},":":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756}}}}}}}}}}},"在":{"docs":{},"判":{"docs":{},"断":{"docs":{},"左":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"对":{"docs":{},"称":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"当":{"docs":{},"前":{"docs":{},"左":{"docs":{},"右":{"docs":{},"节":{"docs":{},"点":{"docs":{},"相":{"docs":{},"等":{"docs":{},"的":{"docs":{},"话":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"还":{"docs":{},"需":{"docs":{},"要":{"docs":{},"判":{"docs":{},"断":{"docs":{},"左":{"docs":{},"子":{"docs":{},"树":{"docs":{},"的":{"docs":{},"左":{"docs":{},"子":{"docs":{},"树":{"docs":{},"和":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"的":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"是":{"docs":{},"否":{"docs":{},"对":{"docs":{},"称":{"docs":{},"，":{"docs":{},"以":{"docs":{},"及":{"docs":{},"左":{"docs":{},"子":{"docs":{},"树":{"docs":{},"的":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"和":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"的":{"docs":{},"左":{"docs":{},"子":{"docs":{},"树":{"docs":{},"是":{"docs":{},"否":{"docs":{},"对":{"docs":{},"称":{"docs":{},"。":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"选":{"docs":{},"修":{"docs":{},"某":{"docs":{},"些":{"docs":{},"课":{"docs":{},"程":{"docs":{},"之":{"docs":{},"前":{"docs":{},"需":{"docs":{},"要":{"docs":{},"一":{"docs":{},"些":{"docs":{},"先":{"docs":{},"修":{"docs":{},"课":{"docs":{},"程":{"docs":{},"。":{"docs":{"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.016666666666666666}}}}}}}}}}}}}}}}}}},"枚":{"docs":{},"举":{"docs":{},"j":{"1":{"docs":{},",":{"docs":{},"j":{"2":{"docs":{},"时":{"docs":{},"，":{"docs":{},"要":{"docs":{},"注":{"docs":{},"意":{"docs":{},"有":{"docs":{},"些":{"docs":{},"j":{"1":{"docs":{},"，":{"docs":{},"j":{"2":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"还":{"docs":{},"并":{"docs":{},"不":{"docs":{},"能":{"docs":{},"到":{"docs":{},"达":{"docs":{},"，":{"docs":{},"例":{"docs":{},"如":{"docs":{},"在":{"docs":{},"i":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}}}}}}}}}}}}}}}},"docs":{}}}},"docs":{}}}}}}}}}},"docs":{}}}},"docs":{}}}}},"对":{"docs":{},"称":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":5}}}}}},"链":{"docs":{},"表":{"docs":{},"进":{"docs":{},"行":{"docs":{},"插":{"docs":{},"入":{"docs":{},"排":{"docs":{},"序":{"docs":{"part2/147. 对链表进行插入排序.html":{"ref":"part2/147. 对链表进行插入排序.html","tf":5}},"。":{"docs":{"part2/147. 对链表进行插入排序.html":{"ref":"part2/147. 对链表进行插入排序.html","tf":0.017543859649122806}}}}}}}}}}},"于":{"docs":{},"第":{"docs":{},"i":{"docs":{},"个":{"docs":{},"位":{"docs":{},"置":{"docs":{},"的":{"docs":{},"数":{"docs":{},"：":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.00546448087431694}}}}}}}}}},"每":{"docs":{},"个":{"docs":{},"查":{"docs":{},"询":{"docs":{},"对":{"docs":{"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666}}}}}}}},"应":{"docs":{},"的":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"数":{"docs":{},"组":{"docs":{},"为":{"docs":{"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374}}}}}}}}},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},"的":{"docs":{},"计":{"docs":{},"算":{"docs":{},"部":{"docs":{},"分":{"docs":{},"即":{"docs":{},"可":{"docs":{},"，":{"docs":{},"同":{"docs":{},"时":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"表":{"docs":{},"中":{"docs":{},"的":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},"也":{"docs":{},"要":{"docs":{},"为":{"docs":{},"取":{"docs":{},"模":{"docs":{},"后":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"每":{"docs":{},"一":{"docs":{},"个":{"docs":{},"孩":{"docs":{},"子":{"docs":{},"，":{"docs":{},"检":{"docs":{},"查":{"docs":{},"是":{"docs":{},"否":{"docs":{},"存":{"docs":{},"在":{"docs":{},"一":{"docs":{},"种":{"docs":{},"方":{"docs":{},"案":{"docs":{},"，":{"docs":{},"将":{"docs":{},"额":{"docs":{},"外":{"docs":{},"的":{"docs":{"partmore/1431. 拥有最多糖果的孩子.html":{"ref":"partmore/1431. 拥有最多糖果的孩子.html","tf":0.017543859649122806}}}}}}}}}}}}}}}}}}}}}}}},"我":{"docs":{},"们":{"docs":{},"要":{"docs":{},"确":{"docs":{},"保":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"镜":{"docs":{},"像":{"docs":{},"对":{"docs":{},"称":{"docs":{},"，":{"docs":{},"要":{"docs":{},"确":{"docs":{},"保":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"左":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"是":{"docs":{},"对":{"docs":{},"称":{"docs":{},"的":{"docs":{},"。":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"先":{"docs":{},"思":{"docs":{},"考":{"docs":{},"最":{"docs":{},"容":{"docs":{},"易":{"docs":{},"想":{"docs":{},"到":{"docs":{},"的":{"docs":{},"枚":{"docs":{},"举":{"docs":{},"法":{"docs":{},"，":{"docs":{},"枚":{"docs":{},"举":{"docs":{},"每":{"docs":{},"一":{"docs":{},"种":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"乘":{"docs":{},"积":{"docs":{},"，":{"docs":{},"记":{"docs":{},"录":{"docs":{},"其":{"docs":{},"中":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"即":{"docs":{},"可":{"docs":{},"。":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.00546448087431694}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"只":{"docs":{},"要":{"docs":{},"从":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"，":{"docs":{},"找":{"docs":{},"出":{"docs":{},"两":{"docs":{},"个":{"docs":{},"数":{"docs":{"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374}}}}}}}}}}}}}}}}},"可":{"docs":{},"以":{"docs":{},"想":{"docs":{},"一":{"docs":{},"下":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"没":{"docs":{},"有":{"docs":{},"必":{"docs":{},"要":{"docs":{},"统":{"docs":{},"计":{"docs":{},"它":{"docs":{},"的":{"docs":{},"准":{"docs":{},"确":{"docs":{},"数":{"docs":{},"量":{"docs":{},"，":{"docs":{},"只":{"docs":{},"要":{"docs":{},"知":{"docs":{},"道":{"docs":{},"它":{"docs":{},"是":{"docs":{},"奇":{"docs":{},"数":{"docs":{},"个":{"docs":{},"还":{"docs":{},"是":{"docs":{},"偶":{"docs":{},"数":{"docs":{},"个":{"docs":{},"就":{"docs":{},"好":{"docs":{},"了":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"我":{"docs":{},"们":{"docs":{},"也":{"docs":{},"没":{"docs":{},"必":{"docs":{},"要":{"docs":{},"枚":{"docs":{},"举":{"docs":{},"i":{"docs":{},"和":{"docs":{},"j":{"docs":{},"，":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"知":{"docs":{},"道":{"docs":{},"第":{"docs":{},"一":{"docs":{},"次":{"docs":{},"出":{"docs":{},"现":{"docs":{},"奇":{"docs":{},"数":{"docs":{},"个":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"和":{"docs":{},"最":{"docs":{},"后":{"docs":{},"出":{"docs":{},"现":{"docs":{},"奇":{"docs":{},"数":{"docs":{},"个":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"，":{"docs":{},"第":{"docs":{},"一":{"docs":{},"次":{"docs":{},"出":{"docs":{},"现":{"docs":{},"偶":{"docs":{},"数":{"docs":{},"个":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"和":{"docs":{},"最":{"docs":{},"后":{"docs":{},"出":{"docs":{},"现":{"docs":{},"偶":{"docs":{},"数":{"docs":{},"个":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"奇":{"docs":{},"数":{"docs":{},"减":{"docs":{},"奇":{"docs":{},"数":{"docs":{},"为":{"docs":{},"偶":{"docs":{},"数":{"docs":{},"，":{"docs":{},"偶":{"docs":{},"数":{"docs":{},"减":{"docs":{},"偶":{"docs":{},"数":{"docs":{},"为":{"docs":{},"偶":{"docs":{},"数":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"最":{"docs":{},"长":{"docs":{},"长":{"docs":{},"度":{"docs":{},"就":{"docs":{},"是":{"docs":{},"这":{"docs":{},"两":{"docs":{},"种":{"docs":{},"位":{"docs":{},"置":{"docs":{},"中":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"就":{"docs":{},"通":{"docs":{},"过":{"docs":{},"题":{"docs":{},"目":{"docs":{},"的":{"docs":{},"出":{"docs":{},"现":{"docs":{},"偶":{"docs":{},"数":{"docs":{},"次":{"docs":{},"这":{"docs":{},"个":{"docs":{},"条":{"docs":{},"件":{"docs":{},"进":{"docs":{},"行":{"docs":{},"了":{"docs":{},"状":{"docs":{},"态":{"docs":{},"压":{"docs":{},"缩":{"docs":{},"。":{"docs":{"partmore/1371. 每个元音包含偶数次的最长子字符串.html":{"ref":"partmore/1371. 每个元音包含偶数次的最长子字符串.html","tf":0.029411764705882353}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"定":{"docs":{},"义":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}}}}}}}}}},"进":{"docs":{},"阶":{"docs":{},"：":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756}}},":":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338},"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.009174311926605505}}}}},"迭":{"docs":{},"代":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.012195121951219513}},"写":{"docs":{},"法":{"docs":{},"：":{"2":{"docs":{},".":{"2":{"docs":{},".":{"docs":{"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.009174311926605505}}}},"docs":{}}},"docs":{"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.009174311926605505}}}}}}},"递":{"docs":{},"归":{"2":{"docs":{},".":{"2":{"docs":{},".":{"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}},"docs":{}}},"docs":{"part2/101. 对称二叉树.html":{"ref":"part2/101. 对称二叉树.html","tf":0.006097560975609756},"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}},"写":{"docs":{},"法":{"docs":{},"：":{"docs":{"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.01834862385321101}}}}}}},"验":{"docs":{},"证":{"docs":{},"回":{"docs":{},"文":{"docs":{},"串":{"docs":{"part2/125. 验证回文串.html":{"ref":"part2/125. 验证回文串.html","tf":5}}},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{"part7/680. 验证回文字符串 Ⅱ.html":{"ref":"part7/680. 验证回文字符串 Ⅱ.html","tf":3.333333333333333}}}}}}}}},"利":{"docs":{},"用":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"特":{"docs":{},"性":{"docs":{},"，":{"docs":{},"异":{"docs":{},"或":{"docs":{},"操":{"docs":{},"作":{"docs":{},"解":{"docs":{},"决":{"docs":{},"这":{"docs":{},"个":{"docs":{},"问":{"docs":{},"题":{"docs":{},"。":{"docs":{"part2/136. 只出现一次的数字.html":{"ref":"part2/136. 只出现一次的数字.html","tf":0.041666666666666664}}}}}}}}}}}}}}}}}}},"逻":{"docs":{},"辑":{"docs":{},"运":{"docs":{},"算":{"docs":{},"的":{"docs":{},"短":{"docs":{},"路":{"docs":{},"性":{"docs":{},"质":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"n":{"docs":{"others/求1+2+…+n.html":{"ref":"others/求1+2+…+n.html","tf":0.02}}}}}}}}}}}}}}}}},"只":{"docs":{},"出":{"docs":{},"现":{"docs":{},"一":{"docs":{},"次":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{"part2/136. 只出现一次的数字.html":{"ref":"part2/136. 只出现一次的数字.html","tf":5}}}}}}}}},"能":{"docs":{},"使":{"docs":{},"用":{"docs":{},"额":{"docs":{},"外":{"docs":{},"的":{"docs":{"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.015503875968992248}}}}}}}}},"@":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}}}}}}}}}},"存":{"docs":{},"在":{"docs":{},"于":{"docs":{},"缓":{"docs":{},"存":{"docs":{},"中":{"docs":{},"，":{"docs":{},"则":{"docs":{},"获":{"docs":{},"取":{"docs":{},"密":{"docs":{},"钥":{"docs":{},"的":{"docs":{},"值":{"docs":{},"（":{"docs":{},"总":{"docs":{},"是":{"docs":{},"正":{"docs":{},"数":{"docs":{},"）":{"docs":{},"，":{"docs":{},"否":{"docs":{},"则":{"docs":{},"返":{"docs":{},"回":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}}}}}}}}}}}}}}}}}}}}}}}}}}},"所":{"docs":{},"以":{"docs":{},"最":{"docs":{},"后":{"docs":{},"采":{"docs":{},"用":{"docs":{},"的":{"docs":{},"是":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"+":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"k":{"docs":{},"e":{"docs":{},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"来":{"docs":{},"存":{"docs":{},"储":{"docs":{},"数":{"docs":{},"据":{"docs":{},"，":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"操":{"docs":{},"作":{"docs":{},"时":{"docs":{},"，":{"docs":{},"把":{"docs":{},"数":{"docs":{},"据":{"docs":{},"存":{"docs":{},"储":{"docs":{},"到":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"和":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"k":{"docs":{},"e":{"docs":{},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"中":{"docs":{},"，":{"docs":{},"其":{"docs":{},"中":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"k":{"docs":{},"e":{"docs":{},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"存":{"docs":{},"储":{"docs":{},"到":{"docs":{},"链":{"docs":{},"表":{"docs":{},"头":{"docs":{},"部":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"要":{"docs":{},"删":{"docs":{},"除":{"docs":{},"最":{"docs":{},"久":{"docs":{},"未":{"docs":{},"使":{"docs":{},"用":{"docs":{},"数":{"docs":{},"据":{"docs":{},"时":{"docs":{},"，":{"docs":{},"则":{"docs":{},"删":{"docs":{},"除":{"docs":{},"链":{"docs":{},"表":{"docs":{},"尾":{"docs":{},"部":{"docs":{},"的":{"docs":{},"数":{"docs":{},"据":{"docs":{},"即":{"docs":{},"可":{"docs":{},"。":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"操":{"docs":{},"作":{"docs":{},"直":{"docs":{},"接":{"docs":{},"从":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"中":{"docs":{},"取":{"docs":{},"数":{"docs":{},"据":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"更":{"docs":{},"新":{"docs":{},"链":{"docs":{},"表":{"docs":{},"中":{"docs":{},"对":{"docs":{},"应":{"docs":{},"数":{"docs":{},"据":{"docs":{},"的":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"即":{"docs":{},"可":{"docs":{},"。":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"如":{"docs":{},"果":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"，":{"docs":{},"元":{"docs":{},"素":{"docs":{},"值":{"docs":{},"在":{"docs":{},"[":{"1":{"docs":{},",":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{},"之":{"docs":{},"间":{"docs":{},"的":{"docs":{},"个":{"docs":{},"数":{"docs":{},"小":{"docs":{},"于":{"docs":{},"等":{"docs":{},"于":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"[":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{},"中":{"docs":{},"一":{"docs":{},"定":{"docs":{},"不":{"docs":{},"存":{"docs":{},"在":{"docs":{},"最":{"docs":{},"终":{"docs":{},"的":{"docs":{},"答":{"docs":{},"案":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"要":{"docs":{},"从":{"docs":{},"[":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.007751937984496124}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"修":{"docs":{},"改":{"docs":{"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909}}}}}}}},"有":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"值":{"docs":{},"都":{"docs":{},"是":{"docs":{},"唯":{"docs":{},"一":{"docs":{},"的":{"docs":{},"。":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0072992700729927005}}}}}}}}}}}}}},"缓":{"docs":{},"存":{"docs":{},"机":{"docs":{},"制":{"docs":{},"。":{"docs":{},"它":{"docs":{},"应":{"docs":{},"该":{"docs":{},"支":{"docs":{},"持":{"docs":{},"以":{"docs":{},"下":{"docs":{},"操":{"docs":{},"作":{"docs":{},"：":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}}}}}}}}}}}}}}}}},"获":{"docs":{},"取":{"docs":{},"数":{"docs":{},"据":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0051813471502590676}}}}}},"运":{"docs":{},"用":{"docs":{},"你":{"docs":{},"所":{"docs":{},"掌":{"docs":{},"握":{"docs":{},"的":{"docs":{},"数":{"docs":{},"据":{"docs":{},"结":{"docs":{},"构":{"docs":{},"，":{"docs":{},"设":{"docs":{},"计":{"docs":{},"和":{"docs":{},"实":{"docs":{},"现":{"docs":{},"一":{"docs":{},"个":{"docs":{"part2/146. LRU缓存机制.html":{"ref":"part2/146. LRU缓存机制.html","tf":0.0025906735751295338}}}}}}}}}}}}}}}}}}}}},"剩":{"docs":{},"余":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"就":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"链":{"docs":{},"表":{"docs":{},"，":{"docs":{},"找":{"docs":{},"到":{"docs":{},"要":{"docs":{},"插":{"docs":{},"入":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"进":{"docs":{},"行":{"docs":{},"插":{"docs":{},"入":{"docs":{},"就":{"docs":{},"好":{"docs":{},"了":{"docs":{},"。":{"docs":{"part2/147. 对链表进行插入排序.html":{"ref":"part2/147. 对链表进行插入排序.html","tf":0.017543859649122806}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"插":{"docs":{},"入":{"docs":{},"排":{"docs":{},"序":{"docs":{},"是":{"docs":{},"迭":{"docs":{},"代":{"docs":{},"的":{"docs":{},"，":{"docs":{},"每":{"docs":{},"次":{"docs":{},"只":{"docs":{},"移":{"docs":{},"动":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"直":{"docs":{},"到":{"docs":{},"所":{"docs":{},"有":{"docs":{},"元":{"docs":{},"素":{"docs":{},"可":{"docs":{},"以":{"docs":{},"形":{"docs":{},"成":{"docs":{},"一":{"docs":{},"个":{"docs":{},"有":{"docs":{},"序":{"docs":{},"的":{"docs":{},"输":{"docs":{},"出":{"docs":{},"列":{"docs":{},"表":{"docs":{},"。":{"docs":{"part2/147. 对链表进行插入排序.html":{"ref":"part2/147. 对链表进行插入排序.html","tf":0.017543859649122806}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"的":{"docs":{},"动":{"docs":{},"画":{"docs":{},"演":{"docs":{},"示":{"docs":{},"如":{"docs":{},"上":{"docs":{},"。":{"docs":{},"从":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"开":{"docs":{},"始":{"docs":{},"，":{"docs":{},"该":{"docs":{},"链":{"docs":{},"表":{"docs":{},"可":{"docs":{},"以":{"docs":{},"被":{"docs":{},"认":{"docs":{},"为":{"docs":{},"已":{"docs":{},"经":{"docs":{},"部":{"docs":{},"分":{"docs":{},"排":{"docs":{},"序":{"docs":{},"（":{"docs":{},"用":{"docs":{},"黑":{"docs":{},"色":{"docs":{},"表":{"docs":{},"示":{"docs":{},"）":{"docs":{},"。":{"docs":{"part2/147. 对链表进行插入排序.html":{"ref":"part2/147. 对链表进行插入排序.html","tf":0.017543859649122806}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"算":{"docs":{},"法":{"docs":{},"：":{"docs":{"part2/147. 对链表进行插入排序.html":{"ref":"part2/147. 对链表进行插入排序.html","tf":0.017543859649122806}}}}}}},"时":{"docs":{},"从":{"docs":{},"头":{"docs":{},"部":{"docs":{},"判":{"docs":{},"断":{"docs":{},"，":{"docs":{},"有":{"docs":{},"两":{"docs":{},"个":{"docs":{},"特":{"docs":{},"殊":{"docs":{},"情":{"docs":{},"况":{"docs":{},"：":{"docs":{"part2/147. 对链表进行插入排序.html":{"ref":"part2/147. 对链表进行插入排序.html","tf":0.017543859649122806}}}}}}}}}}}}}}}}}}},"每":{"docs":{},"次":{"docs":{},"迭":{"docs":{},"代":{"docs":{},"中":{"docs":{},"，":{"docs":{},"插":{"docs":{},"入":{"docs":{},"排":{"docs":{},"序":{"docs":{},"只":{"docs":{},"从":{"docs":{},"输":{"docs":{},"入":{"docs":{},"数":{"docs":{},"据":{"docs":{},"中":{"docs":{},"移":{"docs":{},"除":{"docs":{},"一":{"docs":{},"个":{"docs":{},"待":{"docs":{},"排":{"docs":{},"序":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"找":{"docs":{},"到":{"docs":{},"它":{"docs":{},"在":{"docs":{},"序":{"docs":{},"列":{"docs":{},"中":{"docs":{},"适":{"docs":{},"当":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"，":{"docs":{},"并":{"docs":{},"将":{"docs":{},"其":{"docs":{},"插":{"docs":{},"入":{"docs":{},"。":{"docs":{"part2/147. 对链表进行插入排序.html":{"ref":"part2/147. 对链表进行插入排序.html","tf":0.017543859649122806}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"时":{"docs":{},"，":{"docs":{},"从":{"docs":{},"输":{"docs":{},"入":{"docs":{},"数":{"docs":{},"据":{"docs":{},"中":{"docs":{},"移":{"docs":{},"除":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"（":{"docs":{},"用":{"docs":{},"红":{"docs":{},"色":{"docs":{},"表":{"docs":{},"示":{"docs":{},"）":{"docs":{},"，":{"docs":{},"并":{"docs":{},"原":{"docs":{},"地":{"docs":{},"将":{"docs":{},"其":{"docs":{},"插":{"docs":{},"入":{"docs":{},"到":{"docs":{},"已":{"docs":{},"排":{"docs":{},"好":{"docs":{},"序":{"docs":{},"的":{"docs":{},"链":{"docs":{},"表":{"docs":{},"中":{"docs":{},"。":{"docs":{"part2/147. 对链表进行插入排序.html":{"ref":"part2/147. 对链表进行插入排序.html","tf":0.017543859649122806}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"个":{"docs":{},"元":{"docs":{},"音":{"docs":{},"包":{"docs":{},"含":{"docs":{},"偶":{"docs":{},"数":{"docs":{},"次":{"docs":{},"的":{"docs":{},"最":{"docs":{},"长":{"docs":{},"子":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{"partmore/1371. 每个元音包含偶数次的最长子字符串.html":{"ref":"partmore/1371. 每个元音包含偶数次的最长子字符串.html","tf":5}}}}}}}}}}}}}}}},"查":{"docs":{},"询":{"docs":{},"对":{"docs":{},"的":{"docs":{},"判":{"docs":{},"断":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666}}}}}}}}}}}}},"重":{"docs":{},"复":{"docs":{},"直":{"docs":{},"到":{"docs":{},"所":{"docs":{},"有":{"docs":{},"输":{"docs":{},"入":{"docs":{},"数":{"docs":{},"据":{"docs":{},"插":{"docs":{},"入":{"docs":{},"完":{"docs":{},"为":{"docs":{},"止":{"docs":{},"。":{"docs":{"part2/147. 对链表进行插入排序.html":{"ref":"part2/147. 对链表进行插入排序.html","tf":0.017543859649122806}}}}}}}}}}}}}}}}}},",":{"docs":{"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259},"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.013605442176870748}}},"有":{"docs":{"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909}},"效":{"docs":{},"的":{"docs":{},"运":{"docs":{},"算":{"docs":{},"符":{"docs":{},"包":{"docs":{},"括":{"docs":{"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259}}}}}}}}},"点":{"docs":{},"水":{"docs":{},"的":{"docs":{},"题":{"docs":{},"目":{"docs":{},"，":{"docs":{},"找":{"docs":{},"出":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"比":{"docs":{},"较":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"每":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"加":{"docs":{},"上":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{},"e":{"docs":{},"s":{"docs":{},"是":{"docs":{},"否":{"docs":{},"比":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"大":{"docs":{},"即":{"docs":{},"可":{"docs":{},"。":{"docs":{"partmore/1431. 拥有最多糖果的孩子.html":{"ref":"partmore/1431. 拥有最多糖果的孩子.html","tf":0.017543859649122806}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"的":{"docs":{},"课":{"docs":{},"会":{"docs":{},"有":{"docs":{},"直":{"docs":{},"接":{"docs":{},"的":{"docs":{},"先":{"docs":{},"修":{"docs":{},"课":{"docs":{},"程":{"docs":{},"，":{"docs":{},"比":{"docs":{},"如":{"docs":{},"如":{"docs":{},"果":{"docs":{},"想":{"docs":{},"上":{"docs":{},"课":{"docs":{},"程":{"docs":{"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666}}}}}}}}}}}}}}}}}}}}}}},"根":{"docs":{},"据":{"docs":{},"逆":{"docs":{},"波":{"docs":{},"兰":{"docs":{},"表":{"docs":{},"示":{"docs":{},"法":{"docs":{},"，":{"docs":{},"求":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"的":{"docs":{},"值":{"docs":{},"。":{"docs":{"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259}}}}}}}}}}}}}}}}}},"碰":{"docs":{},"到":{"docs":{},"符":{"docs":{},"号":{"docs":{},"就":{"docs":{},"出":{"docs":{},"栈":{"docs":{},"两":{"docs":{},"个":{"docs":{},"数":{"docs":{},"，":{"docs":{},"计":{"docs":{},"算":{"docs":{},"完":{"docs":{},"结":{"docs":{},"果":{"docs":{},"后":{"docs":{},"入":{"docs":{},"栈":{"docs":{},"，":{"docs":{},"否":{"docs":{},"则":{"docs":{},"为":{"docs":{},"数":{"docs":{},"字":{"docs":{},"就":{"docs":{},"入":{"docs":{},"栈":{"docs":{},"。":{"docs":{"part2/150. 逆波兰表达式求值.html":{"ref":"part2/150. 逆波兰表达式求值.html","tf":0.009259259259259259}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"乘":{"docs":{},"积":{"docs":{},"最":{"docs":{},"大":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":5}}}}}}}}},"因":{"docs":{},"为":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"只":{"docs":{},"与":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.00546448087431694}}}}}}}}}}}}},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},"只":{"docs":{},"有":{"docs":{},"值":{"docs":{},"传":{"docs":{},"递":{"docs":{},"，":{"docs":{},"而":{"docs":{},"这":{"docs":{},"个":{"docs":{},"递":{"docs":{},"归":{"docs":{},"解":{"docs":{},"法":{"docs":{},"中":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},")":{"docs":{},"函":{"docs":{},"数":{"docs":{},"需":{"docs":{},"要":{"docs":{},"返":{"docs":{},"回":{"docs":{},"递":{"docs":{},"归":{"docs":{},"后":{"docs":{},"i":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"通":{"docs":{},"过":{"docs":{},"返":{"docs":{},"回":{"docs":{},"p":{"docs":{},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{},"<":{"docs":{},">":{"docs":{},"(":{"docs":{},")":{"docs":{},"解":{"docs":{},"决":{"docs":{},"这":{"docs":{},"个":{"docs":{},"问":{"docs":{},"题":{"docs":{},"。":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"空":{"docs":{},"间":{"docs":{},"优":{"docs":{},"化":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.01092896174863388}}}}}},"，":{"docs":{},"请":{"docs":{},"你":{"docs":{},"找":{"docs":{},"出":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"乘":{"docs":{},"积":{"docs":{},"最":{"docs":{},"大":{"docs":{},"的":{"docs":{},"连":{"docs":{},"续":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},"（":{"docs":{},"该":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"至":{"docs":{},"少":{"docs":{},"包":{"docs":{},"含":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"）":{"docs":{},"，":{"docs":{},"并":{"docs":{},"返":{"docs":{},"回":{"docs":{},"该":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},"所":{"docs":{},"对":{"docs":{},"应":{"docs":{},"的":{"docs":{},"乘":{"docs":{},"积":{"docs":{},"。":{"docs":{"part2/152. 乘积最大子数组.html":{"ref":"part2/152. 乘积最大子数组.html","tf":0.00546448087431694}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"返":{"docs":{},"回":{"docs":{},"满":{"docs":{},"足":{"docs":{},"以":{"docs":{},"下":{"docs":{},"条":{"docs":{},"件":{"docs":{},"的":{"docs":{},"最":{"docs":{},"长":{"docs":{},"子":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"的":{"docs":{},"长":{"docs":{},"度":{"docs":{},"：":{"docs":{},"每":{"docs":{},"个":{"docs":{},"元":{"docs":{},"音":{"docs":{},"字":{"docs":{},"母":{"docs":{},"，":{"docs":{},"即":{"docs":{"partmore/1371. 每个元音包含偶数次的最长子字符串.html":{"ref":"partmore/1371. 每个元音包含偶数次的最长子字符串.html","tf":0.029411764705882353}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"判":{"docs":{},"断":{"docs":{"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666}}}}},"一":{"docs":{},"夜":{"docs":{},"之":{"docs":{},"内":{"docs":{},"能":{"docs":{},"够":{"docs":{},"偷":{"docs":{},"窃":{"docs":{},"到":{"docs":{},"的":{"docs":{},"最":{"docs":{},"高":{"docs":{},"金":{"docs":{},"额":{"docs":{},"。":{"docs":{"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":0.010526315789473684}}}}}}}}}}}}}}}}},"你":{"docs":{},"需":{"docs":{},"要":{"docs":{},"先":{"docs":{},"完":{"docs":{},"成":{"docs":{},"课":{"docs":{},"程":{"docs":{"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.016666666666666666}}}}}}}}},"必":{"docs":{},"须":{"docs":{},"先":{"docs":{},"上":{"docs":{},"课":{"docs":{},"程":{"docs":{"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666}}}}}}}}},"我":{"docs":{},"们":{"docs":{},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"来":{"docs":{},"表":{"docs":{},"示":{"docs":{},"他":{"docs":{},"们":{"docs":{},":":{"docs":{"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.016666666666666666}}}}}}}}}}}}}}},"例":{"docs":{},"如":{"docs":{},"不":{"docs":{},"会":{"docs":{},"出":{"docs":{},"现":{"docs":{},"像":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}}}}}},"开":{"docs":{},"始":{"docs":{},"利":{"docs":{},"用":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"b":{"docs":{},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"记":{"docs":{},"录":{"docs":{},"'":{"docs":{},"[":{"docs":{},"'":{"docs":{},"后":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"且":{"docs":{},"整":{"docs":{},"数":{"docs":{"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374}}}}},"在":{"docs":{},"子":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"中":{"docs":{},"都":{"docs":{},"恰":{"docs":{},"好":{"docs":{},"出":{"docs":{},"现":{"docs":{},"了":{"docs":{},"偶":{"docs":{},"数":{"docs":{},"次":{"docs":{},"。":{"docs":{"partmore/1371. 每个元音包含偶数次的最长子字符串.html":{"ref":"partmore/1371. 每个元音包含偶数次的最长子字符串.html","tf":0.029411764705882353}}}}}}}}}}}}}}}}}},"其":{"docs":{},"中":{"docs":{"partmore/1431. 拥有最多糖果的孩子.html":{"ref":"partmore/1431. 拥有最多糖果的孩子.html","tf":0.017543859649122806}}}},"那":{"docs":{},"么":{"docs":{},"会":{"docs":{},"以":{"docs":{"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666}}}}}},"要":{"docs":{},"求":{"docs":{},"不":{"docs":{},"能":{"docs":{},"使":{"docs":{},"用":{"docs":{},"乘":{"docs":{},"除":{"docs":{},"法":{"docs":{},"、":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"、":{"docs":{},"w":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"、":{"docs":{},"i":{"docs":{},"f":{"docs":{},"、":{"docs":{},"e":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},"、":{"docs":{},"s":{"docs":{},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"、":{"docs":{},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"等":{"docs":{},"关":{"docs":{},"键":{"docs":{},"字":{"docs":{},"及":{"docs":{},"条":{"docs":{},"件":{"docs":{},"判":{"docs":{},"断":{"docs":{},"语":{"docs":{},"句":{"docs":{},"（":{"docs":{},"a":{"docs":{},"?":{"docs":{},"b":{"docs":{},":":{"docs":{},"c":{"docs":{},"）":{"docs":{},"。":{"docs":{"others/求1+2+…+n.html":{"ref":"others/求1+2+…+n.html","tf":0.02}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"打":{"docs":{},"家":{"docs":{},"劫":{"docs":{},"舍":{"docs":{"part2/198. 打家劫舍.html":{"ref":"part2/198. 打家劫舍.html","tf":5}}}}}},"#":{"docs":{"part3/":{"ref":"part3/","tf":1}}},"反":{"docs":{},"转":{"docs":{},"一":{"docs":{},"个":{"docs":{},"单":{"docs":{},"链":{"docs":{},"表":{"docs":{},"。":{"docs":{"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":0.009174311926605505}}}}}}}},"链":{"docs":{},"表":{"docs":{"part3/206. 反转链表.html":{"ref":"part3/206. 反转链表.html","tf":5}}}}}},"到":{"docs":{"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.016666666666666666},"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.015503875968992248},"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374},"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666}}},"可":{"docs":{},"能":{"docs":{},"会":{"docs":{},"有":{"docs":{},"多":{"docs":{},"个":{"docs":{},"正":{"docs":{},"确":{"docs":{},"的":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"，":{"docs":{},"你":{"docs":{},"只":{"docs":{},"要":{"docs":{},"返":{"docs":{},"回":{"docs":{},"一":{"docs":{},"种":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"了":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"不":{"docs":{},"可":{"docs":{},"能":{"docs":{},"完":{"docs":{},"成":{"docs":{},"所":{"docs":{},"有":{"docs":{},"课":{"docs":{},"程":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"一":{"docs":{},"个":{"docs":{},"空":{"docs":{},"数":{"docs":{},"组":{"docs":{},"。":{"docs":{"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.016666666666666666}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"现":{"docs":{},"在":{"docs":{},"你":{"docs":{},"总":{"docs":{},"共":{"docs":{},"有":{"docs":{"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.016666666666666666}}}}}}}},"课":{"docs":{},"程":{"docs":{},"表":{"docs":{"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":3.333333333333333}}},"安":{"docs":{},"排":{"docs":{"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":3.333333333333333}}}}}},"转":{"docs":{},"换":{"docs":{},"成":{"docs":{},"一":{"docs":{},"个":{"docs":{},"拓":{"docs":{},"扑":{"docs":{},"排":{"docs":{},"序":{"docs":{},"的":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"维":{"docs":{},"护":{"docs":{},"一":{"docs":{},"个":{"docs":{},"入":{"docs":{},"度":{"docs":{},"表":{"docs":{},"，":{"docs":{},"每":{"docs":{},"次":{"docs":{},"把":{"docs":{},"入":{"docs":{},"度":{"docs":{},"为":{"0":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{},"推":{"docs":{},"入":{"docs":{},"队":{"docs":{},"列":{"docs":{},"，":{"docs":{},"加":{"docs":{},"入":{"docs":{},"结":{"docs":{},"果":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"维":{"docs":{},"护":{"docs":{},"入":{"docs":{},"度":{"docs":{},"表":{"docs":{},"剩":{"docs":{},"余":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"入":{"docs":{},"度":{"docs":{},"。":{"docs":{"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.016666666666666666}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}},"门":{"docs":{},"课":{"docs":{},"需":{"docs":{},"要":{"docs":{},"选":{"docs":{},"，":{"docs":{},"记":{"docs":{},"为":{"docs":{"part3/210. 课程表 II.html":{"ref":"part3/210. 课程表 II.html","tf":0.016666666666666666}}}}}}}},"，":{"docs":{},"课":{"docs":{},"程":{"docs":{},"编":{"docs":{},"号":{"docs":{},"依":{"docs":{},"次":{"docs":{},"为":{"docs":{"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666}}}}}}}}}}}},"为":{"docs":{},"不":{"docs":{},"同":{"docs":{},"节":{"docs":{},"点":{"docs":{},"且":{"docs":{},"均":{"docs":{},"存":{"docs":{},"在":{"docs":{},"于":{"docs":{},"给":{"docs":{},"定":{"docs":{},"的":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"中":{"docs":{},"。":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0072992700729927005}}}}}}}}}}}}}}}}}}},"两":{"docs":{},"种":{"docs":{},"不":{"docs":{},"同":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"。":{"docs":{"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374}}}}}}}}}},"在":{"docs":{},"第":{"docs":{},"i":{"docs":{},"行":{"docs":{},"，":{"docs":{},"两":{"docs":{},"个":{"docs":{},"机":{"docs":{},"器":{"docs":{},"人":{"docs":{},"分":{"docs":{},"别":{"docs":{},"处":{"docs":{},"于":{"docs":{},"j":{"1":{"docs":{},",":{"docs":{},"j":{"2":{"docs":{},"列":{"docs":{},"时":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"。":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}}}}}}}}},"docs":{}}}},"docs":{}}}}}}}}}}}}}}}}},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"的":{"docs":{},"最":{"docs":{},"近":{"docs":{},"公":{"docs":{},"共":{"docs":{},"祖":{"docs":{},"先":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":5}}}}}}}}}}}},"百":{"docs":{},"度":{"docs":{},"百":{"docs":{},"科":{"docs":{},"中":{"docs":{},"最":{"docs":{},"近":{"docs":{},"公":{"docs":{},"共":{"docs":{},"祖":{"docs":{},"先":{"docs":{},"的":{"docs":{},"定":{"docs":{},"义":{"docs":{},"为":{"docs":{},"：":{"docs":{},"“":{"docs":{},"对":{"docs":{},"于":{"docs":{},"有":{"docs":{},"根":{"docs":{},"树":{"docs":{"part3/236. 二叉树的最近公共祖先.html":{"ref":"part3/236. 二叉树的最近公共祖先.html","tf":0.0072992700729927005}}}}}}}}}}}}}}}}}}}}}}}},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"说":{"docs":{},"，":{"docs":{},"这":{"docs":{},"个":{"docs":{},"题":{"docs":{},"目":{"docs":{},"的":{"docs":{},"答":{"docs":{},"案":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"在":{"1":{"docs":{},"到":{"docs":{},"n":{"docs":{},"之":{"docs":{},"间":{"docs":{},"。":{"docs":{},"既":{"docs":{},"然":{"docs":{},"答":{"docs":{},"案":{"docs":{},"的":{"docs":{},"范":{"docs":{},"围":{"docs":{},"确":{"docs":{},"定":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"是":{"docs":{},"否":{"docs":{},"可":{"docs":{},"以":{"docs":{},"通":{"docs":{},"过":{"docs":{},"二":{"docs":{},"分":{"docs":{},"查":{"docs":{},"找":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"对":{"docs":{},"答":{"docs":{},"案":{"docs":{},"范":{"docs":{},"围":{"docs":{},"进":{"docs":{},"行":{"docs":{},"二":{"docs":{},"分":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"进":{"docs":{},"行":{"docs":{},"一":{"docs":{},"些":{"docs":{},"判":{"docs":{},"断":{"docs":{},"不":{"docs":{},"断":{"docs":{},"缩":{"docs":{},"小":{"docs":{},"答":{"docs":{},"案":{"docs":{},"范":{"docs":{},"围":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"答":{"docs":{},"案":{"docs":{},"范":{"docs":{},"围":{"docs":{},"为":{"1":{"docs":{},"后":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"返":{"docs":{},"回":{"docs":{},"结":{"docs":{},"果":{"docs":{},"了":{"docs":{},"。":{"docs":{"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.007751937984496124}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}},"是":{"docs":{},"课":{"docs":{},"程":{"docs":{"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666}}}}}},"以":{"docs":{},"上":{"docs":{},"解":{"docs":{},"法":{"docs":{},"不":{"docs":{},"是":{"docs":{},"最":{"docs":{},"优":{"docs":{},"解":{"docs":{},"法":{"docs":{},"，":{"docs":{},"本":{"docs":{},"题":{"docs":{},"还":{"docs":{},"可":{"docs":{},"以":{"docs":{},"通":{"docs":{},"过":{"docs":{},"快":{"docs":{},"慢":{"docs":{},"指":{"docs":{},"针":{"docs":{},"解":{"docs":{},"决":{"docs":{},"。":{"docs":{"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.015503875968992248}}}}}}}}}}}}}}}}}}}}}}}}}}},"然":{"docs":{},"后":{"docs":{},"看":{"docs":{},"一":{"docs":{},"下":{"docs":{},"说":{"docs":{},"明":{"docs":{},"，":{"docs":{},"首":{"docs":{},"先":{"docs":{},"分":{"docs":{},"析":{"docs":{},"一":{"docs":{},"下":{"docs":{},"说":{"docs":{},"明":{"docs":{},"的":{"docs":{},"要":{"docs":{},"求":{"docs":{},"：":{"docs":{"part3/287. 寻找重复数.html":{"ref":"part3/287. 寻找重复数.html","tf":0.007751937984496124}}}}}}}}}}}}}}}}}}}},"通":{"docs":{},"过":{"docs":{},"一":{"docs":{},"个":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"表":{"docs":{},"记":{"docs":{},"录":{"docs":{},"某":{"docs":{},"种":{"docs":{},"状":{"docs":{},"态":{"docs":{},"第":{"docs":{},"一":{"docs":{},"次":{"docs":{},"出":{"docs":{},"现":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"找":{"docs":{},"到":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"次":{"docs":{},"出":{"docs":{},"现":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"，":{"docs":{},"记":{"docs":{},"录":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"即":{"docs":{},"可":{"docs":{},"。":{"docs":{},"对":{"docs":{},"于":{"docs":{},"(":{"0":{"0":{"0":{"0":{"0":{"docs":{},")":{"docs":{},"这":{"docs":{},"种":{"docs":{},"状":{"docs":{},"态":{"docs":{},"，":{"docs":{},"第":{"docs":{},"一":{"docs":{},"次":{"docs":{},"出":{"docs":{},"现":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"应":{"docs":{},"该":{"docs":{},"为":{"docs":{"partmore/1371. 每个元音包含偶数次的最长子字符串.html":{"ref":"partmore/1371. 每个元音包含偶数次的最长子字符串.html","tf":0.029411764705882353}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"'":{"0":{"docs":{},"'":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.012048192771084338}}}},"docs":{},"]":{"docs":{},"'":{"docs":{},")":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}},"a":{"docs":{},"'":{"docs":{},"，":{"docs":{},"'":{"docs":{},"e":{"docs":{},"'":{"docs":{},"，":{"docs":{},"'":{"docs":{},"i":{"docs":{},"'":{"docs":{},"，":{"docs":{},"'":{"docs":{},"o":{"docs":{},"'":{"docs":{},"，":{"docs":{},"'":{"docs":{},"u":{"docs":{},"'":{"docs":{"partmore/1371. 每个元音包含偶数次的最长子字符串.html":{"ref":"partmore/1371. 每个元音包含偶数次的最长子字符串.html","tf":0.029411764705882353}}}}}}}}}}}}}}}}}}}}},"保":{"docs":{},"证":{"docs":{},"为":{"docs":{},"正":{"docs":{},"整":{"docs":{},"数":{"docs":{},"。":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}}}}}},"其":{"docs":{},"他":{"docs":{},"字":{"docs":{},"符":{"docs":{},"：":{"docs":{},"加":{"docs":{},"入":{"docs":{},"到":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"b":{"docs":{},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"中":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}}}}}}}}}}}}}}}}}}}},"实":{"docs":{},"没":{"docs":{},"有":{"docs":{},"必":{"docs":{},"要":{"docs":{},"提":{"docs":{},"前":{"docs":{},"建":{"docs":{},"立":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"一":{"docs":{},"趟":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"循":{"docs":{},"环":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"也":{"docs":{},"可":{"docs":{},"以":{"docs":{},"解":{"docs":{},"决":{"docs":{},"问":{"docs":{},"题":{"docs":{},"。":{"docs":{},"代":{"docs":{},"码":{"docs":{},"如":{"docs":{},"下":{"docs":{"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"或":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}},"者":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}}},"把":{"docs":{},"'":{"docs":{},"]":{"docs":{},"'":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"的":{"docs":{},"'":{"docs":{},"[":{"docs":{},"'":{"docs":{},"中":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"和":{"docs":{},"它":{"docs":{},"前":{"docs":{},"面":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"做":{"docs":{},"解":{"docs":{},"码":{"docs":{},"，":{"docs":{},"结":{"docs":{},"果":{"docs":{},"和":{"docs":{},"栈":{"docs":{},"顶":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"连":{"docs":{},"接":{"docs":{},"后":{"docs":{},"再":{"docs":{},"入":{"docs":{},"栈":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"次":{"docs":{},"。":{"docs":{},"注":{"docs":{},"意":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}}},"正":{"docs":{},"好":{"docs":{},"重":{"docs":{},"复":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}}},"此":{"docs":{},"外":{"docs":{},"，":{"docs":{},"你":{"docs":{},"可":{"docs":{},"以":{"docs":{},"认":{"docs":{},"为":{"docs":{},"原":{"docs":{},"始":{"docs":{},"数":{"docs":{},"据":{"docs":{},"不":{"docs":{},"包":{"docs":{},"含":{"docs":{},"数":{"docs":{},"字":{"docs":{},"，":{"docs":{},"所":{"docs":{},"有":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"只":{"docs":{},"表":{"docs":{},"示":{"docs":{},"重":{"docs":{},"复":{"docs":{},"的":{"docs":{},"次":{"docs":{},"数":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"编":{"docs":{},"码":{"docs":{},"规":{"docs":{},"则":{"docs":{},"为":{"docs":{},":":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}}}}},"辅":{"docs":{},"助":{"docs":{},"栈":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.012048192771084338}}}}},"返":{"docs":{},"回":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.018072289156626505}}}},"遍":{"docs":{},"历":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"，":{"docs":{},"分":{"docs":{},"情":{"docs":{},"况":{"docs":{},"判":{"docs":{},"断":{"docs":{},"：":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}}}}}}}}}}},"：":{"docs":{},"把":{"docs":{},"'":{"docs":{},"[":{"docs":{},"'":{"docs":{},"前":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"入":{"docs":{},"栈":{"docs":{"part4/394. 字符串解码.html":{"ref":"part4/394. 字符串解码.html","tf":0.006024096385542169}}}}}}}}}}}}}},"与":{"docs":{"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374}}},"使":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374}}}}}}}}},"表":{"docs":{},"示":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"j":{"docs":{"part6/560. 和为K的子数组.html":{"ref":"part6/560. 和为K的子数组.html","tf":0.006802721088435374}}}}}}}}}},"ⅱ":{"docs":{"part7/680. 验证回文字符串 Ⅱ.html":{"ref":"part7/680. 验证回文字符串 Ⅱ.html","tf":3.333333333333333}}},"按":{"docs":{},"照":{"docs":{},"正":{"docs":{},"常":{"docs":{},"判":{"docs":{},"断":{"docs":{},"回":{"docs":{},"文":{"docs":{},"串":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"，":{"docs":{},"从":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"两":{"docs":{},"端":{"docs":{},"分":{"docs":{},"别":{"docs":{},"往":{"docs":{},"中":{"docs":{},"间":{"docs":{},"判":{"docs":{},"断":{"docs":{},"，":{"docs":{},"碰":{"docs":{},"到":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"不":{"docs":{},"相":{"docs":{},"等":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"后":{"docs":{},"，":{"docs":{},"分":{"docs":{},"别":{"docs":{},"判":{"docs":{},"断":{"docs":{},"删":{"docs":{},"除":{"docs":{},"其":{"docs":{},"中":{"docs":{},"一":{"docs":{},"个":{"docs":{},"位":{"docs":{},"置":{"docs":{},"后":{"docs":{},"是":{"docs":{},"否":{"docs":{},"为":{"docs":{},"回":{"docs":{},"文":{"docs":{},"串":{"docs":{},"即":{"docs":{},"可":{"docs":{},"。":{"docs":{"part7/680. 验证回文字符串 Ⅱ.html":{"ref":"part7/680. 验证回文字符串 Ⅱ.html","tf":0.03125}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"变":{"docs":{},"为":{"docs":{"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909}}}},"本":{"docs":{},"题":{"docs":{},"和":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"5":{"6":{"0":{"docs":{},"题":{"docs":{},"思":{"docs":{},"路":{"docs":{},"基":{"docs":{},"本":{"docs":{},"相":{"docs":{},"同":{"docs":{},"，":{"docs":{},"只":{"docs":{},"不":{"docs":{},"过":{"docs":{},"判":{"docs":{},"断":{"docs":{},"时":{"docs":{},"从":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}},"为":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"双":{"docs":{},"周":{"docs":{},"赛":{"2":{"7":{"docs":{},"的":{"docs":{},"第":{"docs":{},"三":{"docs":{},"题":{"docs":{"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666}}}},"四":{"docs":{},"题":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}}}}}},"docs":{}},"docs":{}}}}}}}}}}}}}}},"解":{"docs":{},"释":{"docs":{},"：":{"docs":{"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909}}}}},"还":{"docs":{},"要":{"docs":{},"注":{"docs":{},"意":{"docs":{},"负":{"docs":{},"数":{"docs":{},"取":{"docs":{},"模":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"，":{"docs":{},"例":{"docs":{},"如":{"docs":{"part10/974. 和可被 K 整除的子数组.html":{"ref":"part10/974. 和可被 K 整除的子数组.html","tf":0.00909090909090909}}}}}}}}}}}}}}}},"代":{"docs":{},"表":{"docs":{},"第":{"docs":{"partmore/1431. 拥有最多糖果的孩子.html":{"ref":"partmore/1431. 拥有最多糖果的孩子.html","tf":0.017543859649122806}}}}},"拥":{"docs":{},"有":{"docs":{},"最":{"docs":{},"多":{"docs":{},"糖":{"docs":{},"果":{"docs":{},"的":{"docs":{},"孩":{"docs":{},"子":{"docs":{"partmore/1431. 拥有最多糖果的孩子.html":{"ref":"partmore/1431. 拥有最多糖果的孩子.html","tf":5}}}}}}}}}}},"关":{"docs":{},"于":{"docs":{},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"y":{"docs":{},"d":{"docs":{},"算":{"docs":{},"法":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"先":{"docs":{},"参":{"docs":{},"考":{"docs":{},"这":{"docs":{},"篇":{"docs":{},"博":{"docs":{},"客":{"docs":{},"：":{"docs":{},"h":{"docs":{},"t":{"docs":{},"t":{"docs":{},"p":{"docs":{},"s":{"docs":{},":":{"docs":{},"/":{"docs":{},"/":{"docs":{},"b":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},".":{"docs":{},"c":{"docs":{},"s":{"docs":{},"d":{"docs":{},"n":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"t":{"docs":{},"/":{"docs":{},"l":{"docs":{},"j":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"l":{"docs":{},"w":{"docs":{},"t":{"docs":{},"/":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{},"s":{"docs":{},"/":{"5":{"2":{"0":{"9":{"6":{"9":{"3":{"2":{"docs":{"partmore/5410. 课程安排 IV.html":{"ref":"partmore/5410. 课程安排 IV.html","tf":0.010416666666666666}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},")":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}},"出":{"docs":{},"发":{"docs":{},"。":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}},"，":{"docs":{},"机":{"docs":{},"器":{"docs":{},"人":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}},"可":{"docs":{},"以":{"docs":{},"移":{"docs":{},"动":{"docs":{},"到":{"docs":{},"格":{"docs":{},"子":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}}}}}}}}}}}}}},"外":{"docs":{},"面":{"docs":{},"。":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}}}},"摘":{"docs":{},"樱":{"docs":{},"桃":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":3.333333333333333}}}}},"来":{"docs":{},"表":{"docs":{},"示":{"docs":{},"一":{"docs":{},"块":{"docs":{},"樱":{"docs":{},"桃":{"docs":{},"地":{"docs":{},"。":{"docs":{"partmore/5411. 摘樱桃 II.html":{"ref":"partmore/5411. 摘樱桃 II.html","tf":0.008771929824561403}}}}}}}}}}},"初":{"docs":{},"始":{"docs":{},"滑":{"docs":{},"动":{"docs":{},"窗":{"docs":{},"口":{"docs":{},"大":{"docs":{},"小":{"docs":{},"为":{"1":{"docs":{},"，":{"docs":{},"开":{"docs":{},"始":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{},"为":{"1":{"docs":{},"，":{"docs":{},"结":{"docs":{},"束":{"docs":{},"(":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{},"为":{"1":{"docs":{},"，":{"docs":{},"通":{"docs":{},"过":{"docs":{},"等":{"docs":{},"差":{"docs":{},"数":{"docs":{},"列":{"docs":{},"求":{"docs":{},"和":{"docs":{},"公":{"docs":{},"式":{"docs":{},"可":{"docs":{},"以":{"docs":{},"求":{"docs":{},"得":{"docs":{},"滑":{"docs":{},"动":{"docs":{},"窗":{"docs":{},"口":{"docs":{},"的":{"docs":{},"和":{"docs":{},"，":{"docs":{},"与":{"docs":{},"目":{"docs":{},"标":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"进":{"docs":{},"行":{"docs":{},"比":{"docs":{},"较":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"等":{"docs":{},"于":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"，":{"docs":{},"则":{"docs":{},"创":{"docs":{},"建":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"组":{"docs":{},"保":{"docs":{},"存":{"docs":{},"答":{"docs":{},"案":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"小":{"docs":{},"于":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"则":{"docs":{},"说":{"docs":{},"明":{"docs":{},"应":{"docs":{},"该":{"docs":{},"扩":{"docs":{},"大":{"docs":{},"滑":{"docs":{},"动":{"docs":{},"窗":{"docs":{},"口":{"docs":{},"的":{"docs":{},"和":{"docs":{},"，":{"docs":{},"则":{"docs":{},"增":{"docs":{},"加":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"大":{"docs":{},"于":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"，":{"docs":{},"则":{"docs":{},"说":{"docs":{},"明":{"docs":{},"应":{"docs":{},"该":{"docs":{},"减":{"docs":{},"少":{"docs":{},"滑":{"docs":{},"动":{"docs":{},"窗":{"docs":{},"口":{"docs":{},"的":{"docs":{},"和":{"docs":{},"，":{"docs":{},"则":{"docs":{},"增":{"docs":{},"加":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"。":{"docs":{"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.0070921985815602835}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}},"docs":{}}}}}}}}}}}},"docs":{}}}}}}}}}},"化":{"docs":{},"简":{"docs":{},"得":{"docs":{"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.0070921985815602835}}}}},"小":{"docs":{},"明":{"docs":{},"很":{"docs":{},"喜":{"docs":{},"欢":{"docs":{},"数":{"docs":{},"学":{"docs":{},",":{"docs":{},"有":{"docs":{},"一":{"docs":{},"天":{"docs":{},"他":{"docs":{},"在":{"docs":{},"做":{"docs":{},"数":{"docs":{},"学":{"docs":{},"作":{"docs":{},"业":{"docs":{},"时":{"docs":{},",":{"docs":{},"要":{"docs":{},"求":{"docs":{},"计":{"docs":{},"算":{"docs":{},"出":{"9":{"docs":{},"~":{"1":{"6":{"docs":{},"的":{"docs":{},"和":{"docs":{},",":{"docs":{},"他":{"docs":{},"马":{"docs":{},"上":{"docs":{},"就":{"docs":{},"写":{"docs":{},"出":{"docs":{},"了":{"docs":{},"正":{"docs":{},"确":{"docs":{},"答":{"docs":{},"案":{"docs":{},"是":{"1":{"0":{"0":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"他":{"docs":{},"并":{"docs":{},"不":{"docs":{},"满":{"docs":{},"足":{"docs":{},"于":{"docs":{},"此":{"docs":{},",":{"docs":{},"他":{"docs":{},"在":{"docs":{},"想":{"docs":{},"究":{"docs":{},"竟":{"docs":{},"有":{"docs":{},"多":{"docs":{},"少":{"docs":{},"种":{"docs":{},"连":{"docs":{},"续":{"docs":{},"的":{"docs":{},"正":{"docs":{},"数":{"docs":{},"序":{"docs":{},"列":{"docs":{},"的":{"docs":{},"和":{"docs":{},"为":{"1":{"0":{"0":{"docs":{},"(":{"docs":{},"至":{"docs":{},"少":{"docs":{},"包":{"docs":{},"括":{"docs":{},"两":{"docs":{},"个":{"docs":{},"数":{"docs":{},")":{"docs":{},"。":{"docs":{},"没":{"docs":{},"多":{"docs":{},"久":{"docs":{},",":{"docs":{},"他":{"docs":{},"就":{"docs":{},"得":{"docs":{},"到":{"docs":{},"另":{"docs":{},"一":{"docs":{},"组":{"docs":{},"连":{"docs":{},"续":{"docs":{},"正":{"docs":{},"数":{"docs":{},"和":{"docs":{},"为":{"1":{"0":{"0":{"docs":{},"的":{"docs":{},"序":{"docs":{},"列":{"docs":{},":":{"1":{"8":{"docs":{},",":{"1":{"9":{"docs":{},",":{"2":{"0":{"docs":{},",":{"2":{"1":{"docs":{},",":{"2":{"2":{"docs":{},"。":{"docs":{},"现":{"docs":{},"在":{"docs":{},"把":{"docs":{},"问":{"docs":{},"题":{"docs":{},"交":{"docs":{},"给":{"docs":{},"你":{"docs":{},",":{"docs":{},"你":{"docs":{},"能":{"docs":{},"不":{"docs":{},"能":{"docs":{},"也":{"docs":{},"很":{"docs":{},"快":{"docs":{},"的":{"docs":{},"找":{"docs":{},"出":{"docs":{},"所":{"docs":{},"有":{"docs":{},"和":{"docs":{},"为":{"docs":{},"s":{"docs":{},"的":{"docs":{},"连":{"docs":{},"续":{"docs":{},"正":{"docs":{},"数":{"docs":{},"序":{"docs":{},"列":{"docs":{},"?":{"docs":{"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.0070921985815602835}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}},"滑":{"docs":{},"动":{"docs":{},"窗":{"docs":{},"口":{"docs":{},"(":{"docs":{},"双":{"docs":{},"指":{"docs":{},"针":{"docs":{},")":{"2":{"docs":{},".":{"2":{"docs":{},".":{"docs":{"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.0070921985815602835}}}},"docs":{}}},"docs":{"others/和为S的连续正数序列.html":{"ref":"others/和为S的连续正数序列.html","tf":0.0070921985815602835}}}}}}}}}}}},"length":1992},"corpusTokens":["!=","\"","\"\";","\")","\"*\"","\"+\"","\"/\"","\"2[abc]3[cd]ef\",","\"3[a2[c]]\",","\"3[a]2[bc]\",","\"aaabcbc\".","\"abcabccdcdcdef\".","\"accaccacc\".","\"leetcodeishiring\"","#","%","&&","'0'","']')","'a'，'e'，'i'，'o'，'u'","(!map.containskey(key))","(!queue.isempty())","(!stack.isempty())","();","(0,","(0,0)","(2","(a1","(f1","(flag)","(getkth(nums1,","(head","(head.val","(i","(i+1,","(i,j)","(index1","(index2","(int","(int[]","(j","(judge(nums,mid))","(judge(token))","(k","(key)","(l1","(l1.val","(l2","(left","(list.siz","(list.size()","(map.containskey(key))","(n","(now","(num","(numcours","(numrow","(re","(root","(s.charat(i)","(s.length()","(string","(sum","(sum[i]","(tail.val","(token)","(true)","(x","(最近最少使用)",")","*","*,","*/","*最终判断为true的标准为","+","+,","+=",",","/","/**","//dp[i][0]记录大于0的最大子数组，如果没有记录为0","//dp[i][1]记录小于0的最小子数组，如果没有记录为0","//pre用于完成对反转后链表的连接，默认先指向head，考虑整个链表都不反转的情况","//res用于最后返回","//出栈","//剪枝一下","//加入当前加入stringbuilder中","//右子树是否包含p,q中的一个","//因为sum[i]","//如果root为null，直接返回fals","//如果root为p或者q,只需要root的左右子树中有一个包含p或q即可","//如果root节点等于p或q，或者它的左右子树包含过p或q，就返回true，否则返回fals","//寻找root的左右节点或者root本身是否包含p,q","//左子树是否包含p,q中的一个","//建立sum数组","//建立一个hash表，hash表存储的是某种状态第一次出现的位置。","//建立栈，java官方推荐的是使用双端队列作为栈来使用","//开始找k个节点后的尾节点","//当(left","//当栈不为空时，把栈顶元素出栈，进行计算","//所以需要给sum数组前添加一个元素0，确保可以判断到nums[0]","//更新i的值","//更新max","//最后处理一下返回结果就可以返回了","//特判","//碰到']‘即可退出当前递归了","//第一个为true的root节点即为结果，通过一个全局变量存储。","//计算面积时要注意确定好区间的范围","//这里的两个for循环是枚举能到达j1,j2的情况的，然后记录最大值","/=","0","0)","0).getvalue();","0,","0.5;","0.75f,","0;","0],","0。","0为false，整个都可以确定为false，就没有必要判断(n","0时递归就结束了。","0这个逻辑运算中，n","0，里面的递归也就不会执行了，所以当n","0；即sum[i]","1","1)","1))","1));","1);","1)，(i+1,","1+2+...+n","1,","1,end1,nums2,start2,end2,k","1,end2,k","1.","10","10);","100","1000","1000+","1000,","1000]","1000。","101","101.","10;","125.","136.","1371.","1431.","146.","147.","150.","152.","198.","1;","1;//滑动窗口[left,right]的和","1]","1],","1],dp[i","1];","1][0]);","1][1]);","1]。请根据这个假设，如果反转后整数溢出那么就返回","1]有关，所以我们可以对dp数组进行优化，把空间复杂度降低","1]的位置转移过来。","1e7,","1e7]。","1。","1三个状态转移过来，同理j2也一样，所以总共对于j1,j2一个有9种状态，取其中的最大值即可。","1位置的元素和","1的时候，j1是不可能到2位置的，这些情况要排除掉。","1结尾的大于0的乘积最大子数组即可。","1结尾的小于0的乘积最小子数组即可（为什么是小于0的最小子数组，因为负负得正啊，乘以小于0的最小的就是最大的了）。","1（因为[1,mid]一共有mid个数，而其中x出现了2次，所以是mid+1个数）。","1，right]中寻找答案。同理反之从[left,mid]中寻找答案。所以judge函数如下：","1，因为遍历字符串是从0开始的，上一个位置为","1，给定的高度为","1，还没有任何字符出现，元音字母出现次数都为0，所以记录为","2","2%6","2)","2,","2.","2.1.","2.2.","2.3.","20,000]。","200","201","206.","21.","210.","231","236.","25.","287.","2;","2[4]","2]+nums[i])","2]转移过来；或者不选i位置的数，那么最大值一定是从dp[i","2位置的元素，所以我们可以优化一下dp过程。","2，需要加k再取模。","3","3,","3,1],","3.","300","301","32","394.","3]","3],","3a","4","4.","400","4，而java取模运算的结果为","5","5,","5.","501","5410.","5411.","560.","6.","600","601","680.","7","7))","7.","700","84.","901","974.",":",";","=","=0","==",">",">1",">2",">3",">4",">4,",">5",">=",">null","?","@overrid","[","[0,","[0,1]","[0,i]是否为偶数，j","[0],","[1,","[1,0,2,0,0,0,1],","[1,0]","[1,1,1],","[1,1,3,3,3,3,4]","[1,1]","[1,2,2,3,4,4,3]","[1,2,2,null,3,null,3]","[2,1,5,6,2,3]","[2,1,5,6,2,3]。","[4,","[4,5,0,","[5,","[5],","[j1]","[j2]","[−231,","\\","a,","a1","a1;","addfirst(nod","addtwonumbers(listnod","an","arr)","arr,","arr.length;","arr[0]","arr[]","arr[stack.getlast()])","arr[top]","arraylist<>","arraylist<>();","a，返回其中元素之和可被","b","b,","b;","boolean","boolean[][]","boolean[n][n];","break;","c","c)","candi","candies,","candies[i]","capacity)","capacity;","case","checkifprerequisite(int","cherrypickup(int[][]","class","cnt","col","continue;","convert(str","count","d","decodestring(str","dequ","dfs(root,","dfs(root.left,","dfs(root.right,p,","dfs(treenod","doubl","dp","dp(i","dp(i,j)表示字符串s(i,j)是否为回文串。","dp[0]","dp[0][0]","dp[0][0][m","dp[0][1]","dp[1]","dp[i","dp[i]","dp[i][0]","dp[i][1]","dp[p[0]][p[1]]","dpmax","dpmax);","dpmin","dpmin);","dp过程中，只涉及i","e","eldest)","encoded_str","end","end1","end1,","end2","end2,","end;","evalrpn(string[]","extend","extracandi","extracandies)","f1","f2","f2);","f2;","f3","false;","findcontinuoussequence(int","findduplicate(int[]","findmediansortedarrays(int[]","findorder(int","findthelongestsubstring(str","first","flag","flag;","for(int","g","get(int","get(key)","getkth(int[]","getkth(nums1,","getkth(nums1,index1","getkth(nums1,start1,end1,nums2,index2","getkth(nums2,start2,end2,nums1,start1,end1,k);","getstring(s,","getstring(str","get操作如果要达到o(1)的时间复杂度还是比较简单的，只需要通过map数据结构存储，可以通过查找key在o(1)时间复杂度里找到对应的value。","good","grid","grid)","grid.length;","grid[0].length;","grid[0][0]","grid[0][m","h","hash","hash[s.charat(i)]","hashmap<>();","head","head)","head,","head.next","head.next.prev","head.next;","head;","i)),","i);","i;","if(head","if(len1","if(nums1[index1]","if(root","ii","indegre","indegrees[p[0]]++;","index2","insertionsortlist(listnod","int","int[0];","int[1","int[128];","int[]","int[][]","int[][][]","int[n];","int[n][2];","int[n][m][m];","int[numcourses];","integer.max_valu","integer.min_value;","integer.valueof(s.substring(begin,","isnum(char","ispalindrome(str","issymmetric(treenod","iv","i的值就为出现偶数次该字符的长度，然后记录最大的值。但我们需要枚举i和j，时间复杂度仍然是o(n2)。","j","j)","j+1)","j1","j1,","j1可以从","j2","judge(int[]","judge(left.left,right.right)","judge(left.right,","judge(root.left,","judge(str","judge(treenod","k","k)","k1","k;","k[encoded_string]，表示其中方括号内部的","key)","key,","key;","kidswithcandies(int[]","k。","k即可确保nums[j","k，你需要找到该数组中和为","l","l1","l1,","l1.next;","l1.val;","l1;","l2","l2)","l2.next;","l2.val)","l2.val;","l2;","largestrectanglearea(int[]","leetcod","left","left)","left++;","left,","left.val","left;","len1","len2","len2)","len;","length","lengthoflongestsubstring(str","linkedhashmap{","linkedlist","linkedlist<>","linkedlist<>();","list","list.addfirst(node);","list.remove(node);","list;","listnod","listnode(","listnode(flag);","listnode(v","longestpalindrome(str","lowestcommonancestor(treenod","lru","lrucach","lrucache(int","lru缓存机制","luck!","m","map","map.get(key);","map.put(0,1);","map.put(key,","map.put(key,node);","map.remove(list.removelast().key);","map;","math.max(dp[i][0],","math.max(dpmax,","math.max(first,nums[1]);","math.max(max,","math.max(nums[0],nums[1]);","math.max(nums[i],","math.min(nums[i],","max","max(dp[i","max)","max);","max;","maxlength","maxproduct(int[]","mergetwolists(listnod","mid","mid;","n","n)","n))。","n);","n++)","n,","n;","new","next","next.prev","next;","nj1","nj2","node","node()","node();","node(int","node(key,","node)","node);","node.next","node.next;","node.prev","node.prev;","node.valu","node.value;","node;","nodelist","nodelist()","nodelist();","now","now.next","now.next;","now.val)","now;","null","null)","null;","num","num,","numcourses,","numrows)","numrows);","nums)","nums,","nums.length","nums.length;","nums1","nums1,","nums1.length;","nums2","nums2)","nums2,","nums2.length;","nums2[index2])","nums2。","nums[0]","nums[0];","nums[i]","nums[i]即可。如果存在，直接返回，不存在则往hash表中put进nums[i]，表示之前已经出现过值为nums[i]的数。","nums[i]的和为k","nums[j]","numstack","nums，其数字都在","n）。","n），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。","o","o(1)","o(log(m","o(n2)","other","p","p,","pair","pair.getkey();","pair<>(i,sb.tostring());","pre","pre.next","pre.next;","pre;","prerequisit","prerequisites)","prerequisites,","prev","prev,","prev.next","prev;","privat","protect","public","put","put(int","put(key,","put操作面临的主要问题是，如果只使用map数据结构存储，当缓存容量达到上限后，不容易删除最久未使用的数据。如果此时能维护一个类似于优先队列的数据结构，把队列中最久未使用的数据删除就比较容易了。","p、q","p、q，最近公共祖先表示为一个结点","q","q)","q);","queri","queries)","queries[i]","queries[i][0]","queries[i][1]","queue","queue.add(left.left);","queue.add(left.right);","queue.add(right.left);","queue.add(right.right);","queue.add(root.left);","queue.add(root.right);","queue.poll();","r","re","remove(nod","remove(node);","removeeldestentry(map.entri","removelast()","res.add(dp[query[0]][query[1]]);","res.add(false);","res.add(true);","res.next;","res;","ret","ret;","return","reverse(head);","reverse(head.next);","reverse(int","reverse(listnod","reversekgroup(listnod","reversekgroup(pre,ans);","reverselist(listnod","right","right)","right))","right.left);","right.val","right.val)","right;","rob(int[]","root","root)","root,","root.next","root.next;","root.right);","root;","root为p或q,它的左右子树中的一个为另一个节点。","root的左右子树分别包含p,q。","row","s","s)","s,","s.charat(j)为止。返回这个过程中滑动窗口的最大长度即为答案。","s.length();","s;","sb","sb.append(pair.getvalue());","sb.append(s.charat(i));","sb.append(temp);","sb.tostring();","second","singlenumber(int[]","size","size()","size++;","size;","solut","solve(int","stack","stack.add(pre);","stack.addlast(i++);","stack.addlast(integer.parseint(token));","stack.addlast(solve(a,b,token));","stack.getlast()","stack.getlast()));","stack.polllast();","stack.pop();","stack<>();","start","start)","start1","start1,","start2","start2,","start;","str)","str.equals(\"","str.equals(\"*\")","str.equals(\"+\")","str.equals(\"/\");","str.substring(i","string","stringbuild","stringbuilder();","strstack","subarraysdivbyk(int[]","subarraysum(int[]","sum","sum[j]","sum[j])","sumnums(int","sumnums(n","super(capacity,","super.getordefault(key,","super.put(key,","switch","s，找到","s，最多删除一个字符。判断是否能成为回文字符串。","t","tail","tail.next","tail.next;","tail.prev","tail.prev;","tail;","target","target)","target。但时间复杂度为o(n2)。","target已知，此时只要遍历a1或者遍历n，都可求得另一个的值，只要判断是否为正整数就可以判断是否存在答案。","target，请你在该数组中找出和为目标值的那","temp","temp;","tempmax","tempmax;","tempmin","tempmin;","this.capac","this.key","this.valu","token","token)","tokens)","top","treenod","true);","true;","twosum(int[]","val","validpalindrome(str","value)","value);","value;","void","x","x)","x，满足","z","{","||","}","ⅱ","−","。","。别想暴力解决这个问题！","。每个运算对象可以是整数，也可以是另一个逆波兰表达式。","一位","上面的代码中主要是在反转字符串的时候借助了栈，使用了额外空间。","不会同时为空。","不能同时选择数组中相邻的数字。","不能更改原数组（假设数组是只读的）。","不能更改原数组（假设数组是只读的）。也就是说不能通过类似排序的方式解决这个问题","不触动警报装置的情况下","与","两个","两个机器人在任意时刻都不能移动到","两个机器人最后都要到达","两数之和","两数相加","个一组翻转链表","个单位。","个子数组满足其元素之和可被","个孩子拥有的糖果数目。","个整数的数组","个糖果分配给孩子们之后，此孩子有","个节点一组进行翻转，请你返回翻转后的链表。","个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为","中心扩展法","中最长的回文子串。你可以假设","中每个格子的数字表示你能获得的樱桃数目。","为不同节点且均存在于给定的二叉树中。","为两种不同的情况。","为在第i行，两个机器人分别处于j1,j2列时的最大值。","之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：\"lciretoesiigedhn\"。","之外，这两个数都不会以","之间（包括","乘积最大子数组","也就是说，这个题目的答案肯定在1到n之间。既然答案的范围确定，我们是否可以通过二分查找的方法对答案范围进行二分搜索，然后进行一些判断不断缩小答案范围，最后答案范围为1后就可以返回结果了。","也是课程","二叉树的最近公共祖先","从3月初开始刷leetcode，刷了有200+题，但一直没有总结题解。有时候刷题的过程中有些思想明明以前用到过，但就是想不起来，看来还是要总结题解的。","从右上角格子","从左上角格子","从格子","代表第","以上解法不是最优解法，本题还可以通过快慢指针解决。","但我们可以通过建立hash表，当读取到一个数nums[i]时，我们判断hash表里是否存在target","但是下面这个","但是啊，这样写在leetcode的执行用时还是比较大的...后来知道了，java中有一个linkedhashmap的数据结构可以很方便的解决这个问题。linkedhashmap里面的结点自带一个前驱指针和后继指针，维护了一个链表。","但这样复杂度太大了，然后想到处理子数组和时最常用的方法是建立一个前缀和数组sum。那么怎么利用这个前缀和数组优化复杂度呢？首先看一个样例","位的有符号整数，你需要将这个整数中每位上的数字进行反转。","位的有符号整数，则其数值范围为","你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。","你可以不使用额外空间来实现吗？","你可以假设","你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。","你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。","你可以运用递归和迭代两种方法解决这个问题吗？","你可以迭代或递归地反转链表。你能否用两种方法解决这道题？","你总共需要上","你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。","你是否可以在","你有两个机器人帮你收集樱桃，机器人","你的算法只能使用常数的额外空间。","你的算法应该具有线性时间复杂度。","使sum[i]","例如，二叉树","例如，想要学习课程","保证为正整数。","假设我们的环境只能存储得下","关于floyd算法，可以先参考这篇博客：https://blog.csdn.net/ljhandlwt/article/details/52096932","其他字符：加入到stringbuilder中","其实没有必要提前建立sum数组，一趟for循环遍历也可以解决问题。代码如下","写入数据","写题解的主要目的是方便自己以后再次查看和复习，所以题解的只是以自己能理解这个题为标准，如果有幸能帮助到你，那么就更好了。","出发。","出发，机器人","出发，机器人可以移动到格子","则不是镜像对称的:","初始滑动窗口大小为1，开始(left)为1，结束(right)为1，通过等差数列求和公式可以求得滑动窗口的和，与目标target进行比较，如果等于target，则创建一个数组保存答案，如果小于target则说明应该扩大滑动窗口的和，则增加right，如果大于target，则说明应该减少滑动窗口的和，则增加left。","判断是否存在重复字符可以用hash表的方式判断，当前字符是否在hash表中出现过，同时当i往前移动时也要更新好hash表即可。因为i，j都不会回退，最大为n，算法时间复杂度为o(n)。","利用数组的特性，异或操作解决这个问题。","利用逻辑运算的短路性质，如果n","到","剩余的情况就遍历链表，找到要插入的位置进行插入就好了。","动态规划","动态规划2.2.","动态规划2.3.","化简得","单调栈","反转一个单链表。","反转链表","变为","只出现一次的数字","只能使用额外的","可能会有多个正确的顺序，你只要返回一种就可以了。如果不可能完成所有课程，返回一个空数组。","右边第一个小于它的位置是即将入栈的元素i。当然入栈元素i也可能等于栈顶元素top，但这对最终结果是没有影响的，因为i位置求得的结果一定大于top位置求得都结果。","合并两个有序链表","否则就不断的往stringbuilder中加入字符串，最后返回string。","否则把栈顶元素出栈。","和","和一个整数","和一个查询对列表","和一个目标值","和一个直接先修课程数对列表","和为k。也就是说这个题转换成了在sum数组中找出两数之差为k的情况。和leetcode_1类似，通过建立hash表的方式可以o(n)时间复杂度解决这个问题。","和为k的子数组","和为s的连续正数序列","和可被","因为dp[i]只与dp[i","因为java只有值传递，而这个递归解法中getstring()函数需要返回递归后i的位置，所以通过返回pair<>()解决这个问题。","图中阴影部分为所能勾勒出的最大矩形面积，其面积为","在判断左右子树对称的时候，如果当前左右节点相等的话，我们还需要判断左子树的左子树和右子树的右子树是否对称，以及左子树的右子树和右子树的左子树是否对称。","在枚举j1,j2时，要注意有些j1，j2的位置还并不能到达，例如在i","在选修某些课程之前需要一些先修课程。","基本的链表操作，遍历链表，处理好进位问题就好了。注意循环的退出条件，以及最后也要对flag进行判断。","基础的链表题目，看代码：","外面。","如果nums[i]为正数：要知道以i结尾的乘积最大的子数组我们只需要知道以i","如果nums[i]为负数：要知道以i结尾的乘积最大的子数组我们只需要知道以i","如果s[i]和s[j]不相等的情况下，dp(i,j)一定为false；","如果一个节点是这两个节点的最近公共祖先，那么这两个节点一定分别存在于它们最近公共祖先的左右子树里面。或者p，q这两个节点中一定有一个是它们的最近公共祖先。","如果不借助额外空间，我们需要单独实现一个函数，能够以o(1)的空间复杂度完成反转，这个可以通过迭代的方法实现，可以参考leetcode206题，最后反转完字符串后返回新链表的头部，代码如下：","如果不考虑空间复杂度，则可以利用栈+递归轻松完成反转:","如果不考虑说明的话，那么建立一个hash表轻松解决这个问题。","如果头节点比当前节点大，就说明当前节点要插入到头节点之前，那么最后要更新头节点。","如果密钥","如果密钥已经存在，则变更其数据值；如果密钥不存在，则插入该组「密钥/数据值」。当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。","如果尾节点比当前节点小，说明当前节点不需要进行插入。","如果栈为空或者要入栈的元素i大于栈顶元素，就直接入栈","如果相等，dp(i,j)","如果碰到数字，获取数字的值，然后递归获得数字和后面对应字符串解码后的值，加入stringbuilder中；","如果节点总数不是","如果选择遍历a1，在求n的过程中要用到sqrt，如果遍历n,则不需要，所以选择遍历n。","如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。","字形变换","字形排列。","字符'['","字符']'：","字符串只包含从","字符串解码","存在于缓存中，则获取密钥的值（总是正数），否则返回","对于每个查询对","对于第i个位置的数：","对应key的计算部分即可，同时hash表中的key也要为取模后的结果。","对应的sum数组为","对每一个孩子，检查是否存在一种方案，将额外的","对称二叉树","对链表进行插入排序","对链表进行插入排序。","寻找两个正序数组的中位数","寻找重复数","将一个给定字符串根据给定的行数，以从上往下、从左到右进行","将两个升序链表合并为一个新的升序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。","小明很喜欢数学,有一天他在做数学作业时,要求计算出9~16的和,他马上就写出了正确答案是100。但是他并不满足于此,他在想究竟有多少种连续的正数序列的和为100(至少包括两个数)。没多久,他就得到另一组连续正数和为100的序列:18,19,20,21,22。现在把问题交给你,你能不能也很快的找出所有和为s的连续正数序列?","左边第一个小于它的位置一定是它的下一个元素(也就是把当前栈顶出栈后的新栈顶元素)。","开头。","当","当一个机器人经过某个格子时，它会把该格子内所有的樱桃都摘走，然后这个位置会变成空格子，即没有樱桃的格子。","当两个机器人同时到达同一个格子时，它们中只有一个可以摘到樱桃。","思路","思路2.1.","思路和判断回文串的思路一样，双指针从字符串两边向里判断，注意处理大小写字母问题和忽略非字母和数字字符","思路是一样的，注意好进入队列的顺序。","您可以假设除了数字","我们先思考最容易想到的枚举法，枚举每一种子数组的乘积，记录其中的最大值即可。","我们只要从sum数组中，找出两个数","我们可以想一下，我们没有必要统计它的准确数量，只要知道它是奇数个还是偶数个就好了，然后我们也没必要枚举i和j，只需要知道第一次出现奇数个的位置和最后出现奇数个的位置，第一次出现偶数个的位置和最后出现偶数个的位置，因为奇数减奇数为偶数，偶数减偶数为偶数，所以最长长度就是这两种位置中的最大值。这里就通过题目的出现偶数次这个条件进行了状态压缩。","我们定义dp[i]","我们要确保二叉树镜像对称，要确保根节点的左右子树是对称的。","或","或者","所以只需要修改","所以如果nums数组中，元素值在[1,mid]之间的个数小于等于mid，那么[left,mid]中一定不存在最终的答案，我们要从[mid","所以最后采用的是hashmap+linkedlist来存储数据，put操作时，把数据存储到hashmap和linkedlist中，其中linkedlist存储到链表头部，如果要删除最久未使用数据时，则删除链表尾部的数据即可。get操作直接从hashmap中取数据，然后更新链表中对应数据的顺序即可。","所有节点的值都是唯一的。","打家劫舍","找到该树中两个指定节点的最近公共祖先。","找规律，根据每行的字符的对应关系就可以简单的推出来。","把']'匹配的'['中的字符串和它前面的数字做解码，结果和栈顶字符串连接后再入栈","拥有最多糖果的孩子","按照正常判断回文串的方法，从字符串两端分别往中间判断，碰到第一个不相等的位置后，分别判断删除其中一个位置后是否为回文串即可。","插入排序是迭代的，每次只移动一个元素，直到所有元素可以形成一个有序的输出列表。","插入排序的动画演示如上。从第一个元素开始，该链表可以被认为已经部分排序（用黑色表示）。","插入排序算法：","插入时从头部判断，有两个特殊情况：","摘樱桃","数字。","数字字符：把数字字符转换为数字入栈","数对的形式给出先修课程数对。","数组中元素的范围是","数组中只有一个重复的数字，但它可能不止重复出现一次。","数组中只有一个重复的数字，但它可能不止重复出现一次。这个倒无所谓...","数组的长度为","整数反转","整数除法只保留整数部分。","整数，并返回他们的数组下标。","整除的子数组","整除的（连续、非空）子数组的数目。","整除：","无重复字符的最长子串","时间复杂度为o(n)。","时间复杂度内完成这两种操作？","时间复杂度小于","时，应当返回:","时，排列如下：","是","是一个正整数，它的值小于或等于链表的长度。","是否是","是对称的。","是课程","最后扩展到多个字符的情况，一个字符只有奇数和偶数两种状态，而两个字符会有四种状态(a奇数次b奇数次、a偶数次b奇数次、a奇数次b偶数次、a偶数次b偶数次)，五个元音字符会有2的5次方种状态。我们可以通过二进制来表示这些状态，例如偶数次就是0，奇数次就是1，如果出现了某个字符，我们可以让上一个状态和1进行异或运算，更新状态。5个字符应该5位二进制数表示，初始为00000。","最后，还有一个参考了大佬的代码后手写的lru算法...直接看代码吧","最多","最底下一行。","最简单的想法是通过两个for循环遍历数组，判断nums[i]","最长回文子串","最长子串","有","有效的运算符包括","有点水的题目，找出数组的最大值，然后比较数组中每个元素加上extracandies是否比最大值大即可。","有的课会有直接的先修课程，比如如果想上课程","本题为leetcode双周赛27的第三题","本题为leetcode双周赛27的第四题","本题和leetcode560题思路基本相同，只不过判断时从sum[i]","来表示一块樱桃地。","枚举","枚举2.2.","枚举思路里，最重要的目的是获得第i个位置左边第一个小于它的位置left和右边第一个小于它的位置right，那么为什么利用单调栈就可以求得这两个位置呢？","枚举数组每一个元素，从该元素向左右两边扩展，找到左右两边第一个小于它的数，最后计算面积即可。时间复杂度o(n2)","枚举每一个以s[i]或者s[i]和s[i+1]为中心的最长回文字符串，枚举的次数为n，求最长回文字符串的时间复杂度为o(n)，所以这个写法的时间复杂度为o(n2)","枚举法的复杂度为o(n2)，枚举了每一种子数组，但我们真的有必要知道每一个子数组吗？","柱状图中最大的矩形","柱状图的示例，其中每个柱子的宽度为","根据逆波兰表示法，求表达式的值。","次。注意","正好重复","此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数","每个元音包含偶数次的最长子字符串","每个查询对的判断结果。","每次迭代中，插入排序只从输入数据中移除一个待排序的元素，找到它在序列中适当的位置，并将其插入。","每次迭代时，从输入数据中移除一个元素（用红色表示），并原地将其插入到已排好序的链表中。","比如输入字符串为","求","求1+2+…+n","求和公式","求在该柱状图中，能够勾勒出来的矩形的最大面积。","注意:","注意处理好int越界就好了。","注意：如果课程","滑动窗口(双指针)","滑动窗口(双指针)2.2.","然后看一下说明，首先分析一下说明的要求：","然后通过一个hash表记录某种状态第一次出现的位置，然后遍历字符串找到最后一次出现的位置，记录最大值即可。对于(00000)这种状态，第一次出现的位置应该为","现在你总共有","百度百科中最近公共祖先的定义为：“对于有根树","的两个结点","的先修课程。","的先修课程且课程","的先修课程，那么课程","的小写字母。字符串的最大长度是50000。","的情况。","的整数倍，那么请将最后剩余的节点保持原有顺序。","的方式存储的，并且它们的每个节点只能存储","的最大长度为","的正序（从小到大）数组","的深度尽可能大（一个节点也可以是它自己的祖先）。”","的矩阵","的祖先且","的空间。","的空间。不能用hash表了！","的糖果。注意，允许有多个孩子同时拥有","的糖果数目。","的范围是","的输入。","的连续的子数组的个数。","的链表用来表示两个非负的整数。其中，它们各自的位数是按照","的长度。","碰到符号就出栈两个数，计算完结果后入栈，否则为数字就入栈。","示例","示例:","示例：","空间优化","给你一个","给你一个字符串","给你一个数组","给你一个整数数组","给你一个链表，每","给你课程总数","给你这个链表：1","给出一个","给出两个","给定","给定一个二叉树,","给定一个二叉树，检查它是否是镜像对称的。","给定一个代表每个房屋存放金额的非负整数数组，计算你","给定一个包含","给定一个字符串","给定一个字符串，请你找出其中不含有重复字符的","给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。","给定一个整数数组","给定一个整数数组和一个整数","给定一个经过编码的字符串，返回它解码后的字符串。","给定一个非空字符串","给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。","给定两个大小为","给定课程总量以及它们的先决条件，返回你为了学完所有课程所安排的学习顺序。","给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为","维护一个滑动窗口[i,j]，如果[i,j]中不存在重复字符，则j++，如果存在重复字符，则重复字符一定为s.charat(j),则i++一直到s.charat(i)","缓存机制。它应该支持以下操作：","编码规则为:","获取数据","菜鸡刷题日记","行数为","表示nums[j","解释：","说明","说明:","说明：","说明：本题中，我们将空字符串定义为有效的回文串。","请你实现这个将字符串进行指定行数变换的函数：","请你找出这两个正序数组的中位数，并且要求算法的时间复杂度为","请你按照如下规则，返回两个机器人能收集的最多樱桃数目：","请返回一个布尔值列表，列表中每个元素依次分别对应","课程安排","课程表","转换成一个拓扑排序的问题，维护一个入度表，每次把入度为0的节点推入队列，加入结果数组，然后维护入度表剩余节点的入度。","辅助栈","输入:","输入:num","输入：1","输入：a","输出:","输出：1","输出：7","运用你所掌握的数据结构，设计和实现一个","返回","还要注意负数取模的情况，例如","这个题和数塔题目类似，只不过从一个节点开始变成从两个节点同时开始，所以在动态规划方程上要多记录一种状态。","这个题目...作为leetcode的第4个题目，这难度是要劝退刚刚刷题的萌新(我)啊！这题以后有时间再补题解吧，就贴个代码先。","这个题目涉及到的知识点很多：位运算，前缀和，hash表，状态压缩(这是leetcode的中等难度？)，自己第一次做也没有想到，看了题解后才慢慢理解的，其实涉及到的知识都不难，但整合到一起就很难想到了。","这样我们就能找到栈顶位置的对于枚举的结果了，最后栈可能不是为空，再把栈里的元素依次出栈，计算面积即可。","这里先解释一下我的代码都干了些什么，之后在一步步解释为什么这样想。","这题第一时间应该想到动态规划，dp[i]表示数组前i个元素能获取的最大值，在i位置有两种选择，一个是选择i位置的数，那么最大值一定是从dp[i","进阶:","进阶：","迭代","迭代写法：","迭代写法：2.2.","逆序","逆波兰表达式求值","递归","递归2.2.","递归写法：","通过floyd算法打表，建立任意节点i,j的连通关系，在查询时直接o(1)复杂度查询打好的表就可以了。","通过一些数论知识(具体我也不太清楚)可以转换为sum[i]","通过两个栈，分别存储数字和字符串。","通过求和公式来解","通过这种规则，栈里的元素一定是递增的。","遍历字符串，分情况判断：","那么dp关系就推出来了，代码如下：","那么动态规划方程为：","那么我们接着分析题目：给定一个包含","那么重点就是进行怎样的判断了：我们思考一下，假设最终答案x出现了2次，且x在[1,mid]中，那么[1,mid]的个数一定为mid","那么，对于要出栈的栈顶元素top：","重复直到所有输入数据插入完为止。","门课需要选，记为","门课，课程编号依次为","非空","题目描述","题目描述2.","首先我们想，如果只看一个字符出现的次数是否为偶数次，应该可以想到用前缀和，统计[0,i]该字符出现的个数；找一个位置j，判断[0,j]","首先是想到暴力的思路，两层for循环遍历，枚举每一个子数组和是否等于k。时间复杂度为o(n2)。","首先看我们是怎么维护的单调栈：","验证回文串","验证回文字符串","，一夜之内能够偷窃到的最高金额。","，且整数","，你必须先上课程","，你需要先完成课程","，例如不会出现像","，其中","，在子字符串中都恰好出现了偶数次。","，开始利用stringbuilder记录'['后的字符串","，我们用一个匹配来表示他们:","，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（a?b:c）。","，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。","，请你返回满足以下条件的最长子字符串的长度：每个元音字母，即","，请判断","，那么会以","：把'['前的字符串入栈"],"pipeline":["stopWordFilter","stemmer"]},"store":{"./":{"url":"./","title":"菜鸡刷题日记","keywords":"","body":"菜鸡刷题日记\n从3月初开始刷LeetCode，刷了有200+题，但一直没有总结题解。有时候刷题的过程中有些思想明明以前用到过，但就是想不起来，看来还是要总结题解的。\n写题解的主要目的是方便自己以后再次查看和复习，所以题解的只是以自己能理解这个题为标准，如果有幸能帮助到你，那么就更好了。\n"},"part1/":{"url":"part1/","title":"LeetCode 1 - 100","keywords":"","body":""},"part1/1. 两数之和.html":{"url":"part1/1. 两数之和.html","title":"1. 两数之和","keywords":"","body":"1. 题目描述\n给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。\n你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。\n2. 思路\n最简单的想法是通过两个for循环遍历数组，判断nums[i] + nums[j] == target。但时间复杂度为O(n2)。\nfor(int i = 0; i \n但我们可以通过建立hash表，当读取到一个数nums[i]时，我们判断hash表里是否存在target - nums[i]即可。如果存在，直接返回，不存在则往hash表中put进nums[i]，表示之前已经出现过值为nums[i]的数。\npublic int[] twoSum(int[] nums, int target) {\n    int n = nums.length;\n    Map map = new HashMap<>();\n    for (int i = 0; i \n1. 题目描述2. 思路"},"part1/2. 两数相加.html":{"url":"part1/2. 两数相加.html","title":"2. 两数相加","keywords":"","body":"1. 题目描述\n给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。\n如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。\n您可以假设除了数字 0 之外，这两个数都不会以 0 开头。\n2. 思路\n基本的链表操作，遍历链表，处理好进位问题就好了。注意循环的退出条件，以及最后也要对flag进行判断。\npublic ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n    ListNode head = new ListNode(-1);\n    ListNode pre = head;\n    int flag = 0;\n    while (l1 != null || l2 != null) {\n        int val = flag;\n        if (l1 != null) {\n            val += l1.val;\n            l1 = l1.next;\n        }\n        if (l2 != null) {\n            val += l2.val;\n            l2 = l2.next;\n        }\n        flag = val / 10;\n        pre.next = new ListNode(val % 10);\n        pre = pre.next;\n    }\n    pre.next = flag == 0 ? null : new ListNode(flag);\n    return head.next;\n}\n\n1. 题目描述2. 思路"},"part1/3. 无重复字符的最长子串.html":{"url":"part1/3. 无重复字符的最长子串.html","title":"3. 无重复字符的最长子串","keywords":"","body":"1. 题目描述\n给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。\n2. 思路\n维护一个滑动窗口[i,j]，如果[i,j]中不存在重复字符，则j++，如果存在重复字符，则重复字符一定为s.charAt(j),则i++一直到s.charAt(i) == s.charAt(j)为止。返回这个过程中滑动窗口的最大长度即为答案。\n判断是否存在重复字符可以用hash表的方式判断，当前字符是否在hash表中出现过，同时当i往前移动时也要更新好hash表即可。因为i，j都不会回退，最大为n，算法时间复杂度为O(n)。\npublic int lengthOfLongestSubstring(String s) {\n    if (s.length() == 0) {\n        return 0;\n    }\n    int i = 0;\n    int j = 1;\n    int count = 0;\n    int[] hash = new int[128];\n    hash[s.charAt(i)] = 1;\n    while (j \n1. 题目描述2. 思路"},"part1/4. 寻找两个正序数组的中位数.html":{"url":"part1/4. 寻找两个正序数组的中位数.html","title":"4. 寻找两个正序数组的中位数","keywords":"","body":"1. 题目描述\n给定两个大小为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。\n请你找出这两个正序数组的中位数，并且要求算法的时间复杂度为  O(log(m + n))。\n你可以假设 nums1 和 nums2 不会同时为空。\n2. 思路\n这个题目...作为LeetCode的第4个题目，这难度是要劝退刚刚刷题的萌新(我)啊！这题以后有时间再补题解吧，就贴个代码先。\npublic double findMedianSortedArrays(int[] nums1, int[] nums2) {\n    int n = nums1.length;\n    int m = nums2.length;\n    int left = (n + m + 1) / 2;\n    int right = (n + m + 2) / 2;\n    return (getKth(nums1, 0, n - 1, nums2, 0, m - 1, left) + getKth(nums1, 0, n - 1, nums2, 0, m - 1, right)) * 0.5;\n}\n\nprivate int getKth(int[] nums1, int start1, int end1, int[] nums2, int start2, int end2, int k) {\n    int len1 = end1 - start1 + 1;\n    int len2 = end2 - start2 + 1;\n    if(len1 > len2) {\n        return getKth(nums2,start2,end2,nums1,start1,end1,k);\n    }\n    if(len1  end1 ? end1 : start1 + k / 2 - 1;\n    int index2 = start2 + k / 2 - 1 > end2 ? end2 : start2 + k / 2 - 1;\n    if(nums1[index1] > nums2[index2]) {\n        return getKth(nums1,start1,end1,nums2,index2 + 1,end2,k - (index2 - start2 + 1));\n    } else {\n        return getKth(nums1,index1 + 1,end1,nums2,start2,end2,k - (index1 - start1 + 1));\n    }\n}\n\n1. 题目描述2. 思路"},"part1/5. 最长回文子串.html":{"url":"part1/5. 最长回文子串.html","title":"5. 最长回文子串","keywords":"","body":"1. 题目描述\n给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。\n2. 思路\n2.1. 动态规划\ndp(i,j)表示字符串s(i,j)是否为回文串。\n如果s[i]和s[j]不相等的情况下，dp(i,j)一定为false；\n如果相等，dp(i,j) = dp(i + 1, j - 1)\npublic String longestPalindrome(String s) {\n    int n = s.length();\n    if (n \n2.2. 中心扩展法\n枚举每一个以s[i]或者s[i]和s[i+1]为中心的最长回文字符串，枚举的次数为n，求最长回文字符串的时间复杂度为O(n)，所以这个写法的时间复杂度为O(n2)\npublic String longestPalindrome(String s) {\n    if (s.length() = 0 && j  maxLength ? str.substring(i + 1, j) : \"\";\n}\n\n1. 题目描述2. 思路2.1. 动态规划2.2. 中心扩展法"},"part1/6. Z 字形变换.html":{"url":"part1/6. Z 字形变换.html","title":"6. Z 字形变换","keywords":"","body":"1. 题目描述\n将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。\n比如输入字符串为 \"LEETCODEISHIRING\" 行数为 3 时，排列如下：\n\nL   C   I   R\nE T O E S I I G\nE   D   H   N\n\n之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：\"LCIRETOESIIGEDHN\"。\n请你实现这个将字符串进行指定行数变换的函数：\n\nstring convert(string s, int numRows);\n\n2. 思路\n找规律，根据每行的字符的对应关系就可以简单的推出来。\npublic String convert(String s, int numRows) {\n    if (numRows == 1) {\n        return s;\n    }\n    StringBuilder sb = new StringBuilder();\n    int length = s.length();\n    for (int i = 0; i \n1. 题目描述2. 思路"},"part1/7. 整数反转.html":{"url":"part1/7. 整数反转.html","title":"7. 整数反转","keywords":"","body":"1. 题目描述\n给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。\n注意:\n假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。\n2. 思路\n注意处理好int越界就好了。\npublic int reverse(int x) {\n    int res = 0;\n    int temp;\n    while (x != 0) {\n        temp = x % 10;\n        x /= 10;\n        if (res > Integer.MAX_VALUE / 10 || (res == Integer.MAX_VALUE / 10 && temp > 7)) {\n            return 0;\n        }\n        if (res \n1. 题目描述2. 思路"},"part1/21. 合并两个有序链表.html":{"url":"part1/21. 合并两个有序链表.html","title":"21. 合并两个有序链表","keywords":"","body":"1. 题目描述\n将两个升序链表合并为一个新的升序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 \n示例：\n\n输入：1->2->4,   1->3->4\n输出：1->1->2->3->4->4\n\n2. 思路\n基础的链表题目，看代码：\npublic ListNode mergeTwoLists(ListNode l1, ListNode l2) {\n    ListNode now = new ListNode(-1);\n    ListNode res = now;\n    while (l1 != null && l2 != null) {\n        if (l1.val > l2.val) {\n            now.next = l2;\n            l2 = l2.next;\n        } else {\n            now.next = l1;\n            l1 = l1.next;\n        }\n        now = now.next;\n    }\n    now.next = l1 == null ? l2 : l1;\n    return res.next;\n}\n\n1. 题目描述2. 思路"},"part1/25. K 个一组翻转链表.html":{"url":"part1/25. K 个一组翻转链表.html","title":"25. K 个一组翻转链表","keywords":"","body":"1. 题目描述\n给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。\nk 是一个正整数，它的值小于或等于链表的长度。\n如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。\n示例：\n\n给你这个链表：1->2->3->4->5\n当 k = 2 时，应当返回: 2->1->4->3->5\n当 k = 3 时，应当返回: 3->2->1->4->5\n\n说明：\n\n你的算法只能使用常数的额外空间。\n\n你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。\n\n\n2. 思路\n如果不考虑空间复杂度，则可以利用栈+递归轻松完成反转:\npublic ListNode reverseKGroup(ListNode head, int k) {\n    int ans = k;\n    if (head == null) {\n        return null;\n    }\n    Stack stack = new Stack<>();\n    ListNode pre = head;\n    while (k != 0 && pre != null) {\n        stack.add(pre);\n        k--;\n        pre = pre.next;\n    }\n    if (k != 0) {\n        return head;\n    }\n    ListNode node = stack.pop();\n    ListNode ret = node;\n    while (!stack.isEmpty()) {\n        node.next = stack.pop();\n        node = node.next;\n    }\n    node.next = reverseKGroup(pre,ans);\n    return ret;\n}\n\n上面的代码中主要是在反转字符串的时候借助了栈，使用了额外空间。\n如果不借助额外空间，我们需要单独实现一个函数，能够以O(1)的空间复杂度完成反转，这个可以通过迭代的方法实现，可以参考leetcode206题，最后反转完字符串后返回新链表的头部，代码如下：\npublic ListNode reverseKGroup(ListNode head, int k) {\n    //特判\n    if (head == null) {\n        return null;\n    }\n    //pre用于完成对反转后链表的连接，默认先指向head，考虑整个链表都不反转的情况\n    ListNode pre = new ListNode(-1);\n    pre.next = head;\n    //res用于最后返回\n    ListNode res = pre;\n    ListNode end = head;\n    while (true) {\n        ListNode start = end;\n        //开始找k个节点后的尾节点\n        for (int i = 1; i \n1. 题目描述2. 思路"},"part1/84. 柱状图中最大的矩形.html":{"url":"part1/84. 柱状图中最大的矩形.html","title":"84. 柱状图中最大的矩形","keywords":"","body":"1. 题目描述\n给定 n 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。\n求在该柱状图中，能够勾勒出来的矩形的最大面积。\n\n柱状图的示例，其中每个柱子的宽度为 1，给定的高度为 [2,1,5,6,2,3]。\n\n图中阴影部分为所能勾勒出的最大矩形面积，其面积为 10 个单位。\n示例:\n\n输入: [2,1,5,6,2,3]\n输出: 10\n\n2. 思路\n2.1. 枚举\n枚举数组每一个元素，从该元素向左右两边扩展，找到左右两边第一个小于它的数，最后计算面积即可。时间复杂度O(n2)\npublic int largestRectangleArea(int[] arr) {\n    int n = arr.length;\n    int max = 0;\n    for (int i = 0; i \n2.2. 单调栈\n枚举思路里，最重要的目的是获得第i个位置左边第一个小于它的位置left和右边第一个小于它的位置right，那么为什么利用单调栈就可以求得这两个位置呢？\n首先看我们是怎么维护的单调栈：\n\n如果栈为空或者要入栈的元素i大于栈顶元素，就直接入栈\n否则把栈顶元素出栈。\n\n通过这种规则，栈里的元素一定是递增的。\n那么，对于要出栈的栈顶元素top：\n\n左边第一个小于它的位置一定是它的下一个元素(也就是把当前栈顶出栈后的新栈顶元素)。\n右边第一个小于它的位置是即将入栈的元素i。当然入栈元素i也可能等于栈顶元素top，但这对最终结果是没有影响的，因为i位置求得的结果一定大于top位置求得都结果。\n\n这样我们就能找到栈顶位置的对于枚举的结果了，最后栈可能不是为空，再把栈里的元素依次出栈，计算面积即可。\n时间复杂度为O(N)。\npublic int largestRectangleArea(int[] arr) {\n    int n = arr.length;\n    //特判\n    if (n == 0) {\n        return 0;\n    }\n    int max = 0;\n    //建立栈，Java官方推荐的是使用双端队列作为栈来使用\n    Deque stack = new LinkedList<>();\n    int i = 0;\n    while (i  arr[stack.getLast()]) {\n            stack.addLast(i++);\n        } else {\n            //出栈\n            int top = stack.pollLast();\n            //计算面积时要注意确定好区间的范围\n            if (!stack.isEmpty()) {\n                max = Math.max(max, arr[top] * (i - stack.getLast() - 1));\n            } else {\n                max = Math.max(max, arr[top] * i);\n            }\n        }\n    }\n    //当栈不为空时，把栈顶元素出栈，进行计算\n    while (!stack.isEmpty()) {\n        int top = stack.pollLast();\n        if (!stack.isEmpty()) {\n            max = Math.max(max, arr[top] * (n - 1 - stack.getLast()));\n        } else {\n            max = Math.max(max, arr[top] * n);\n        }\n    }\n    return max;\n}\n\n1. 题目描述2. 思路2.1. 枚举2.2. 单调栈"},"part2/":{"url":"part2/","title":"LeetCode 101 - 200","keywords":"","body":""},"part2/101. 对称二叉树.html":{"url":"part2/101. 对称二叉树.html","title":"101. 对称二叉树","keywords":"","body":"1. 题目描述\n给定一个二叉树，检查它是否是镜像对称的。\n例如，二叉树 [1,2,2,3,4,4,3] 是对称的。\n    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\n但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:\n    1\n   / \\\n  2   2\n   \\   \\\n   3    3\n进阶：\n你可以运用递归和迭代两种方法解决这个问题吗？\n2. 思路\n2.1. 递归\n我们要确保二叉树镜像对称，要确保根节点的左右子树是对称的。\n在判断左右子树对称的时候，如果当前左右节点相等的话，我们还需要判断左子树的左子树和右子树的右子树是否对称，以及左子树的右子树和右子树的左子树是否对称。\npublic boolean isSymmetric(TreeNode root) {\n    if (root == null) {\n        return true;\n    }\n    return judge(root.left, root.right);\n}\n\nprivate boolean judge(TreeNode left, TreeNode right) {\n    if (left == null && right == null) {\n        return true;\n    }\n    if (left == null || right == null) {\n        return false;\n    }\n    return left.val == right.val && judge(left.left,right.right) && judge(left.right, right.left);\n}\n\n2.2. 迭代\n思路是一样的，注意好进入队列的顺序。\npublic boolean isSymmetric(TreeNode root) {\n    if(root == null) {\n        return true;\n    }\n    Queue queue = new LinkedList<>();\n    queue.add(root.left);\n    queue.add(root.right);\n    while (!queue.isEmpty()) {\n        TreeNode left = queue.poll();\n        TreeNode right = queue.poll();\n        if (left == null && right == null) {\n            continue;\n        }\n        if (left == null || right == null || left.val != right.val) {\n            return false;\n        }\n        queue.add(left.left);\n        queue.add(right.right);\n\n        queue.add(left.right);\n        queue.add(right.left);\n    }\n    return true;\n}\n\n1. 题目描述2. 思路2.1. 递归2.2. 迭代"},"part2/125. 验证回文串.html":{"url":"part2/125. 验证回文串.html","title":"125. 验证回文串","keywords":"","body":"1. 题目描述\n给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。\n说明：本题中，我们将空字符串定义为有效的回文串。\n2. 思路\n思路和判断回文串的思路一样，双指针从字符串两边向里判断，注意处理大小写字母问题和忽略非字母和数字字符\npublic boolean isPalindrome(String s) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i \n1. 题目描述2. 思路"},"part2/136. 只出现一次的数字.html":{"url":"part2/136. 只出现一次的数字.html","title":"136. 只出现一次的数字","keywords":"","body":"1. 题目描述\n给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。\n说明：\n你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？\n2. 思路\n利用数组的特性，异或操作解决这个问题。\npublic int singleNumber(int[] nums) {\n    int res = 0;\n    for (int i = 0; i \n1. 题目描述2. 思路"},"part2/146. LRU缓存机制.html":{"url":"part2/146. LRU缓存机制.html","title":"146. LRU缓存机制","keywords":"","body":"1. 题目描述\n运用你所掌握的数据结构，设计和实现一个  LRU (最近最少使用) 缓存机制。它应该支持以下操作： 获取数据 get 和 写入数据 put 。\n\n获取数据 get(key) - 如果密钥 (key) 存在于缓存中，则获取密钥的值（总是正数），否则返回 -1。\n写入数据 put(key, value) - 如果密钥已经存在，则变更其数据值；如果密钥不存在，则插入该组「密钥/数据值」。当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。\n\n进阶:\n你是否可以在 O(1) 时间复杂度内完成这两种操作？\n2. 思路\nget操作如果要达到O(1)的时间复杂度还是比较简单的，只需要通过Map数据结构存储，可以通过查找key在O(1)时间复杂度里找到对应的value。\nput操作面临的主要问题是，如果只使用Map数据结构存储，当缓存容量达到上限后，不容易删除最久未使用的数据。如果此时能维护一个类似于优先队列的数据结构，把队列中最久未使用的数据删除就比较容易了。\n所以最后采用的是HashMap+LinkedList来存储数据，put操作时，把数据存储到HashMap和LinkedList中，其中LinkedList存储到链表头部，如果要删除最久未使用数据时，则删除链表尾部的数据即可。get操作直接从HashMap中取数据，然后更新链表中对应数据的顺序即可。\nclass Node {\n    int key;\n    int value;\n    public Node(int key, int value) {\n        this.key = key;\n        this.value = value;\n    }\n}\nclass LRUCache {\n    Map map;\n    LinkedList list;\n    int capacity;\n    public LRUCache(int capacity) {\n        list = new LinkedList<>();\n        map = new HashMap<>();\n        this.capacity = capacity;\n    }\n\n    public int get(int key) {\n        if (!map.containsKey(key)) {\n            return -1;\n        }\n        Node node = map.get(key);\n        list.remove(node);\n        list.addFirst(node);\n        return node.value;\n    }\n\n    public void put(int key, int value) {\n        if (map.containsKey(key)) {\n            Node node = map.get(key);\n            list.remove(node);\n            node.value = value;\n            list.addFirst(node);\n        } else {\n            if (list.size() >= capacity) {\n                map.remove(list.removeLast().key);\n            }\n            Node node = new Node(key, value);\n            map.put(key,node);\n            list.addFirst(node);\n        }\n    }\n}\n\n但是啊，这样写在LeetCode的执行用时还是比较大的...后来知道了，Java中有一个LinkedHashMap的数据结构可以很方便的解决这个问题。LinkedHashMap里面的结点自带一个前驱指针和后继指针，维护了一个链表。\nclass LRUCache extends LinkedHashMap{\n    private int capacity;\n\n    public LRUCache(int capacity) {\n        super(capacity, 0.75F, true);\n        this.capacity = capacity;\n    }\n\n    public int get(int key) {\n        return super.getOrDefault(key, -1);\n    }\n\n    public void put(int key, int value) {\n        super.put(key, value);\n    }\n\n    @Override\n    protected boolean removeEldestEntry(Map.Entry eldest) {\n        return size() > capacity; \n    }\n}\n\n最后，还有一个参考了大佬的代码后手写的LRU算法...直接看代码吧\nclass Node {\n    int key;\n    int value;\n    Node prev, next;\n\n    public Node() {\n    }\n\n    public Node(int key, int value) {\n        this.key = key;\n        this.value = value;\n    }\n}\n\nclass NodeList {\n    int size;\n    Node head;\n    Node tail;\n\n    public NodeList() {\n        head = new Node();\n        tail = new Node();\n        head.next = tail;\n        tail.prev = head;\n        size = 0;\n    }\n\n    public void addFirst(Node node) {\n        node.next = head.next;\n        node.prev = head;\n        head.next.prev = node;\n        head.next = node;\n        size++;\n    }\n\n    public void remove(Node node) {\n        Node prev = node.prev;\n        Node next = node.next;\n        prev.next = next;\n        next.prev = prev;\n        node.next = null;\n        node.prev = null;\n        size--;\n    }\n\n    public Node removeLast() {\n        Node node = tail.prev;\n        remove(node);\n        return node;\n    }\n}\n\nclass LRUCache {\n\n    Map map;\n    NodeList list;\n    int capacity;\n\n    public LRUCache(int capacity) {\n        this.capacity = capacity;\n        map = new HashMap<>();\n        list = new NodeList();\n    }\n\n    public int get(int key) {\n        if (!map.containsKey(key)) {\n            return -1;\n        }\n        Node node = map.get(key);\n        list.remove(node);\n        list.addFirst(node);\n        return node.value;\n    }\n\n    public void put(int key, int value) {\n        if (map.containsKey(key)) {\n            Node node = map.get(key);\n            list.remove(node);\n            node.value = value;\n            list.addFirst(node);\n        } else {\n            if (list.size >= capacity) {\n                map.remove(list.removeLast().key);\n            }\n            Node node = new Node(key, value);\n            list.addFirst(node);\n            map.put(key, node);\n        }\n    }\n}\n\n1. 题目描述2. 思路"},"part2/147. 对链表进行插入排序.html":{"url":"part2/147. 对链表进行插入排序.html","title":"147. 对链表进行插入排序","keywords":"","body":"1. 题目描述\n对链表进行插入排序。\n插入排序的动画演示如上。从第一个元素开始，该链表可以被认为已经部分排序（用黑色表示）。\n每次迭代时，从输入数据中移除一个元素（用红色表示），并原地将其插入到已排好序的链表中。\n \n插入排序算法：\n\n插入排序是迭代的，每次只移动一个元素，直到所有元素可以形成一个有序的输出列表。\n每次迭代中，插入排序只从输入数据中移除一个待排序的元素，找到它在序列中适当的位置，并将其插入。\n重复直到所有输入数据插入完为止。\n\n2. 思路\n插入时从头部判断，有两个特殊情况：\n\n如果头节点比当前节点大，就说明当前节点要插入到头节点之前，那么最后要更新头节点。\n如果尾节点比当前节点小，说明当前节点不需要进行插入。\n剩余的情况就遍历链表，找到要插入的位置进行插入就好了。\n\npublic ListNode insertionSortList(ListNode head) {\n    if (head == null) {\n        return null;\n    }\n    ListNode tail = head;\n    ListNode now = tail.next;\n    while (now != null) {\n        if (head.val > now.val) {\n            tail.next = now.next;\n            now.next = head;\n            head = now;\n        } else if (tail.val \n1. 题目描述2. 思路"},"part2/150. 逆波兰表达式求值.html":{"url":"part2/150. 逆波兰表达式求值.html","title":"150. 逆波兰表达式求值","keywords":"","body":"1. 题目描述\n根据逆波兰表示法，求表达式的值。\n有效的运算符包括 +, -, *, / 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。\n说明：\n\n整数除法只保留整数部分。\n给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。\n\n2. 思路\n碰到符号就出栈两个数，计算完结果后入栈，否则为数字就入栈。\npublic int evalRPN(String[] tokens) {\n    Deque stack = new LinkedList<>();\n    for (String token : tokens) {\n        if (judge(token)) {\n            int a = stack.pollLast();\n            int b = stack.pollLast();\n            stack.addLast(solve(a,b,token));\n        } else {\n            stack.addLast(Integer.parseInt(token));\n        }\n    }\n    return stack.pollLast();\n}\n\nprivate int solve(int a, int b, String token) {\n    switch (token) {\n        case \"+\" : return a + b;\n        case \"-\" : return a - b;\n        case \"*\" : return a * b;\n        case \"/\" : return a / b;\n    }\n    return 0;\n}\n\n\nprivate boolean judge(String str) {\n    return str.equals(\"+\") || str.equals(\"-\") || str.equals(\"*\") || str.equals(\"/\");\n}\n\n1. 题目描述2. 思路"},"part2/152. 乘积最大子数组.html":{"url":"part2/152. 乘积最大子数组.html","title":"152. 乘积最大子数组","keywords":"","body":"1. 题目描述\n给你一个整数数组 nums ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。\n2. 思路\n2.1. 枚举\n我们先思考最容易想到的枚举法，枚举每一种子数组的乘积，记录其中的最大值即可。\npublic int maxProduct(int[] nums) {\n    int n = nums.length;\n    int max = Integer.MIN_VALUE;\n    for (int i = 0; i \n2.2. 动态规划\n枚举法的复杂度为O(n2)，枚举了每一种子数组，但我们真的有必要知道每一个子数组吗？\n对于第i个位置的数：\n\n如果nums[i]为正数：要知道以i结尾的乘积最大的子数组我们只需要知道以i-1结尾的大于0的乘积最大子数组即可。\n如果nums[i]为负数：要知道以i结尾的乘积最大的子数组我们只需要知道以i-1结尾的小于0的乘积最小子数组即可（为什么是小于0的最小子数组，因为负负得正啊，乘以小于0的最小的就是最大的了）。\n\n那么DP关系就推出来了，代码如下：\npublic int maxProduct(int[] nums) {\n    int n = nums.length;\n    int[][] dp = new int[n][2];\n    //dp[i][0]记录大于0的最大子数组，如果没有记录为0\n    dp[0][0] = nums[0] >= 0 ? nums[0] : 0;\n    //dp[i][1]记录小于0的最小子数组，如果没有记录为0\n    dp[0][1] = nums[0] = 0) {\n            dp[i][0] = Math.max(nums[i], nums[i] * dp[i - 1][0]);\n            dp[i][1] = Math.min(nums[i], nums[i] * dp[i - 1][1]);\n        } else {\n            dp[i][0] = Math.max(nums[i], nums[i] * dp[i - 1][1]);\n            dp[i][1] = Math.min(nums[i], nums[i] * dp[i - 1][0]);\n        }\n        //更新max\n        max = Math.max(dp[i][0], max);\n    }\n    return max;\n}\n\n2.3. 空间优化\n因为dp[i]只与dp[i - 1]有关，所以我们可以对dp数组进行优化，把空间复杂度降低\npublic int maxProduct(int[] nums) {\n    int n = nums.length;\n    int dpMax = nums[0] >= 0 ? nums[0] : 0;\n    int dpMin = nums[0] = 0) {\n            tempMax = Math.max(nums[i], nums[i] * dpMax);\n            tempMin = Math.min(nums[i], nums[i] * dpMin);\n        } else {\n            tempMax = Math.max(nums[i], nums[i] * dpMin);\n            tempMin = Math.min(nums[i], nums[i] * dpMax);\n        }\n        dpMax = tempMax;\n        dpMin = tempMin;\n        max = Math.max(dpMax, max);\n    }\n    return max;\n}\n\n1. 题目描述2. 思路2.1. 枚举2.2. 动态规划2.3. 空间优化"},"part2/198. 打家劫舍.html":{"url":"part2/198. 打家劫舍.html","title":"198. 打家劫舍","keywords":"","body":"1. 题目描述\n你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。\n给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。\n2. 思路\n不能同时选择数组中相邻的数字。\n这题第一时间应该想到动态规划，dp[i]表示数组前i个元素能获取的最大值，在i位置有两种选择，一个是选择i位置的数，那么最大值一定是从dp[i-2]转移过来；或者不选i位置的数，那么最大值一定是从dp[i-1]的位置转移过来。\n那么动态规划方程为：\n\ndp[i] = max(dp[i-1],dp[i-2]+nums[i])\n\npublic int rob(int[] nums) {\n    int n = nums.length;\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return nums[0];\n    }\n    int[] dp = new int[n];\n    dp[0] = nums[0];\n    dp[1] = Math.max(nums[0],nums[1]);\n    for (int i = 2; i \ndp过程中，只涉及i - 1位置的元素和 i - 2位置的元素，所以我们可以优化一下dp过程。\npublic int rob(int[] nums) {\n    int n = nums.length;\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return nums[0];\n    }\n    int first = nums[0];\n    int second = Math.max(first,nums[1]);\n    for (int i = 2; i \n1. 题目描述2. 思路"},"part3/":{"url":"part3/","title":"LeetCode 201 - 300","keywords":"","body":"#\n"},"part3/206. 反转链表.html":{"url":"part3/206. 反转链表.html","title":"206. 反转链表","keywords":"","body":"1. 题目描述\n反转一个单链表。\n示例:\n\n输入: 1->2->3->4->5->NULL\n输出: 5->4->3->2->1->NULL\n\n进阶: \n你可以迭代或递归地反转链表。你能否用两种方法解决这道题？\n2. 思路\n2.1. 迭代写法：\npublic ListNode reverseList(ListNode head) {\n    ListNode pre = null;\n    ListNode root = head;\n    while (root != null) {\n        ListNode next = root.next;\n        root.next = pre;\n        pre = root;\n        root = next;\n    }\n    return pre;\n}\n\n2.2. 递归写法：\nprivate ListNode res;\npublic ListNode reverseList(ListNode head) {\n    reverse(head);\n    return res;\n}\n\nprivate ListNode reverse(ListNode head) {\n    if(head == null || head.next == null) {\n        res = head;\n        return head;\n    }\n    ListNode pre = reverse(head.next);\n    head.next = null;\n    pre.next = head;\n    return head;\n}\n\n1. 题目描述2. 思路2.1. 迭代写法：2.2. 递归写法："},"part3/210. 课程表 II.html":{"url":"part3/210. 课程表 II.html","title":"210. 课程表 II","keywords":"","body":"1. 题目描述\n现在你总共有 n 门课需要选，记为 0 到 n-1。\n在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们: [0,1]\n给定课程总量以及它们的先决条件，返回你为了学完所有课程所安排的学习顺序。\n可能会有多个正确的顺序，你只要返回一种就可以了。如果不可能完成所有课程，返回一个空数组。\n2. 思路\n转换成一个拓扑排序的问题，维护一个入度表，每次把入度为0的节点推入队列，加入结果数组，然后维护入度表剩余节点的入度。\npublic int[] findOrder(int numCourses, int[][] prerequisites) {\n    if (numCourses == 0) {\n        return new int[0];\n    }\n    int[] inDegrees = new int[numCourses];\n    for (int[] p : prerequisites) {\n        inDegrees[p[0]]++;\n    }\n    Queue queue = new LinkedList<> ();\n    for (int i = 0; i \n1. 题目描述2. 思路"},"part3/236. 二叉树的最近公共祖先.html":{"url":"part3/236. 二叉树的最近公共祖先.html","title":"236. 二叉树的最近公共祖先","keywords":"","body":"1. 题目描述\n给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。\n百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”\n说明:\n\n所有节点的值都是唯一的。\np、q 为不同节点且均存在于给定的二叉树中。\n\n2. 思路\n如果一个节点是这两个节点的最近公共祖先，那么这两个节点一定分别存在于它们最近公共祖先的左右子树里面。或者p，q这两个节点中一定有一个是它们的最近公共祖先。\nprivate TreeNode res = null;\npublic TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n    dfs(root, p, q);\n    return res;\n}\n\n//寻找root的左右节点或者root本身是否包含p,q\nprivate boolean dfs(TreeNode root, TreeNode p, TreeNode q) {\n    //剪枝一下\n    if (res != null) {\n        return false;\n    }\n    //如果root为null，直接返回false\n    if (root == null) {\n        return false;\n    }\n    //左子树是否包含p,q中的一个\n    boolean f1 = dfs(root.left, p, q);\n    //右子树是否包含p,q中的一个\n    boolean f2 = dfs(root.right,p, q);\n    //如果root为p或者q,只需要root的左右子树中有一个包含p或q即可\n    boolean f3 = (root == p || root == q) && (f1 || f2);\n    /**\n     *最终判断为true的标准为\n     *  1. root为p或q,它的左右子树中的一个为另一个节点。\n     *  2. root的左右子树分别包含p,q。\n     */\n    boolean flag = f3 || (f1 && f2);\n    //第一个为true的root节点即为结果，通过一个全局变量存储。\n    if (flag) {\n        res = root;\n    }\n    //如果root节点等于p或q，或者它的左右子树包含过p或q，就返回true，否则返回false\n    return root == p || root == q || f1 || f2;\n}\n\n1. 题目描述2. 思路"},"part3/287. 寻找重复数.html":{"url":"part3/287. 寻找重复数.html","title":"287. 寻找重复数","keywords":"","body":"1. 题目描述\n给定一个包含 n + 1 个整数的数组 nums，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。\n说明：\n\n不能更改原数组（假设数组是只读的）。\n只能使用额外的 O(1) 的空间。\n时间复杂度小于 O(n2) 。\n数组中只有一个重复的数字，但它可能不止重复出现一次。\n\n2. 思路\n如果不考虑说明的话，那么建立一个Hash表轻松解决这个问题。\npublic int findDuplicate(int[] nums) {\n    Map map = new HashMap<>();\n    for (int i = 0; i \n然后看一下说明，首先分析一下说明的要求：\n\n不能更改原数组（假设数组是只读的）。也就是说不能通过类似排序的方式解决这个问题\n只能使用额外的 O(1) 的空间。不能用Hash表了！\n时间复杂度小于 O(n2) 。别想暴力解决这个问题！\n数组中只有一个重复的数字，但它可能不止重复出现一次。这个倒无所谓...\n\n那么我们接着分析题目：给定一个包含 n + 1 个整数的数组 nums，其数字都在 1 到 n 之间（包括 1 和 n）。\n也就是说，这个题目的答案肯定在1到n之间。既然答案的范围确定，我们是否可以通过二分查找的方法对答案范围进行二分搜索，然后进行一些判断不断缩小答案范围，最后答案范围为1后就可以返回结果了。\npublic int findDuplicate(int[] nums) {\n        int n = nums.length - 1;\n        int left = 1;\n        int right = n;\n        int mid;\n        while (left > 1;\n            if (judge(nums,mid)) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n        return right;\n    }\n\n那么重点就是进行怎样的判断了：我们思考一下，假设最终答案x出现了2次，且x在[1,mid]中，那么[1,mid]的个数一定为mid + 1（因为[1,mid]一共有mid个数，而其中x出现了2次，所以是mid+1个数）。\n所以如果nums数组中，元素值在[1,mid]之间的个数小于等于mid，那么[left,mid]中一定不存在最终的答案，我们要从[mid + 1，right]中寻找答案。同理反之从[left,mid]中寻找答案。所以judge函数如下：\nprivate boolean judge(int[] arr, int value) {\n    int ans = 0;\n    for (int i = 0; i \n2.1. 以上解法不是最优解法，本题还可以通过快慢指针解决。\n1. 题目描述2. 思路2.1. 以上解法不是最优解法，本题还可以通过快慢指针解决。"},"part4/":{"url":"part4/","title":"LeetCode 301 - 400","keywords":"","body":""},"part4/394. 字符串解码.html":{"url":"part4/394. 字符串解码.html","title":"394. 字符串解码","keywords":"","body":"1. 题目描述\n给定一个经过编码的字符串，返回它解码后的字符串。\n编码规则为: k[encoded_string]，表示其中方括号内部的 encoded_string 正好重复 k 次。注意 k 保证为正整数。\n你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。\n此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 k ，例如不会出现像 3a 或 2[4] 的输入。\n示例:\n\ns = \"3[a]2[bc]\", 返回 \"aaabcbc\".\ns = \"3[a2[c]]\", 返回 \"accaccacc\".\ns = \"2[abc]3[cd]ef\", 返回 \"abcabccdcdcdef\".\n\n2. 思路\n2.1. 递归\n因为Java只有值传递，而这个递归解法中getString()函数需要返回递归后i的位置，所以通过返回Pair<>()解决这个问题。\n如果碰到数字，获取数字的值，然后递归获得数字和后面对应字符串解码后的值，加入StringBuilder中；\n否则就不断的往StringBuilder中加入字符串，最后返回String。\npublic String decodeString(String s) {\n    return getString(s, 1, 0).getValue();\n}\n\nprivate Pair getString(String s, int num, int start) {\n    StringBuilder sb = new StringBuilder();\n    int i;\n    for (i = start; i  pair = getString(s, Integer.valueOf(s.substring(begin, i)), i + 1);\n            //更新i的值\n            i = pair.getKey();\n            //加入当前加入StringBuilder中\n            sb.append(pair.getValue());\n        } else {\n            //碰到']‘即可退出当前递归了\n            if (s.charAt(i) == ']') {\n                break;\n            }\n            sb.append(s.charAt(i));\n        }\n    }\n    //最后处理一下返回结果就可以返回了\n    String temp = sb.toString();\n    while (num > 1) {\n        sb.append(temp);\n        num--;\n    }\n    return new Pair<>(i,sb.toString());\n}\n\nprivate boolean isNum(char c) {\n    return c >= '0' && c \n2.2. 辅助栈\n通过两个栈，分别存储数字和字符串。\n遍历字符串，分情况判断：\n\n字符'[' ：把'['前的字符串入栈 ，开始利用StringBuilder记录'['后的字符串\n字符']'： 把']'匹配的'['中的字符串和它前面的数字做解码，结果和栈顶字符串连接后再入栈\n数字字符：把数字字符转换为数字入栈\n其他字符：加入到StringBuilder中\n\npublic String decodeString(String s) {\n    StringBuilder res = new StringBuilder();\n    Deque numStack = new LinkedList<>();\n    Deque strStack = new LinkedList<>();\n    for (int i = 0; i = '0' && c \n1. 题目描述2. 思路2.1. 递归2.2. 辅助栈"},"part6/":{"url":"part6/","title":"LeetCode 501 - 600","keywords":"","body":""},"part6/560. 和为K的子数组.html":{"url":"part6/560. 和为K的子数组.html","title":"560. 和为K的子数组","keywords":"","body":"1. 题目描述\n给定一个整数数组和一个整数 k，你需要找到该数组中和为 k 的连续的子数组的个数。\n示例 1 :\n\n输入:nums = [1,1,1], k = 2\n输出: 2 , [1,1] 与 [1,1] 为两种不同的情况。\n\n说明 :\n\n数组的长度为 [1, 20,000]。\n数组中元素的范围是 [-1000, 1000] ，且整数 k 的范围是 [-1e7, 1e7]。\n\n2. 思路\n首先是想到暴力的思路，两层for循环遍历，枚举每一个子数组和是否等于k。时间复杂度为O(n2)。\nint n = nums.length;\nint cnt = 0;\nfor (int i = 0; i \n但这样复杂度太大了，然后想到处理子数组和时最常用的方法是建立一个前缀和数组sum。那么怎么利用这个前缀和数组优化复杂度呢？首先看一个样例\n\nnums = [1,0,2,0,0,0,1], k = 2 \n对应的sum数组为\n sum = [1,1,3,3,3,3,4]\n\n我们只要从sum数组中，找出两个数 i ,  j  使sum[i] - sum[j] = k即可确保nums[j + 1] 到 nums[i] 和为k。也就是说这个题转换成了在sum数组中找出两数之差为k的情况。和LeetCode_1类似，通过建立hash表的方式可以O(n)时间复杂度解决这个问题。\npublic int subarraySum(int[] nums, int k) {\n    int n = nums.length;\n    int res = 0;\n    int[] sum = new int[n];\n    //建立sum数组\n    for (int i = 0; i  map = new HashMap<>();\n    //因为sum[i] - sum[j] = k 表示nums[j + 1] - nums[i]的和为k\n    //所以需要给sum数组前添加一个元素0，确保可以判断到nums[0]\n    map.put(0,1);\n    for (int i = 0; i \n其实没有必要提前建立sum数组，一趟for循环遍历也可以解决问题。代码如下\npublic int subarraySum(int[] nums, int k) {\n    int n = nums.length;\n    int res = 0;\n    Map map = new HashMap<>();\n    map.put(0,1);\n    int sum = 0;\n    for (int i = 0; i \n1. 题目描述2. 思路"},"part7/":{"url":"part7/","title":"LeetCode 601 - 700","keywords":"","body":""},"part7/680. 验证回文字符串 Ⅱ.html":{"url":"part7/680. 验证回文字符串 Ⅱ.html","title":"680. 验证回文字符串 Ⅱ","keywords":"","body":"1. 题目描述\n给定一个非空字符串 s，最多删除一个字符。判断是否能成为回文字符串。\n注意:\n\n字符串只包含从 a-z 的小写字母。字符串的最大长度是50000。\n\n2. 思路\n按照正常判断回文串的方法，从字符串两端分别往中间判断，碰到第一个不相等的位置后，分别判断删除其中一个位置后是否为回文串即可。\npublic boolean validPalindrome(String s) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i \n1. 题目描述2. 思路"},"part10/":{"url":"part10/","title":"LeetCode 901 - 1000","keywords":"","body":""},"part10/974. 和可被 K 整除的子数组.html":{"url":"part10/974. 和可被 K 整除的子数组.html","title":"974. 和可被 K 整除的子数组","keywords":"","body":"1. 题目描述\n给定一个整数数组 A，返回其中元素之和可被 K 整除的（连续、非空）子数组的数目。\n示例  :\n\n输入：A = [4,5,0,-2,-3,1], K = 5\n输出：7\n解释：\n有 7 个子数组满足其元素之和可被 K = 5 整除：\n[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]\n\n2. 思路\n本题和LeetCode560题思路基本相同，只不过判断时从sum[i] - sum[j] = k 变为 (sum[i] - sum[j]) % k = 0。\n通过一些数论知识(具体我也不太清楚)可以转换为sum[i] % k - sum[j] % k = 0；即sum[i] % k = sum[j] % k。\n所以只需要修改 对应key的计算部分即可，同时Hash表中的key也要为取模后的结果。\n还要注意负数取模的情况，例如-2%6 = 4，而Java取模运算的结果为 -2，需要加k再取模。\npublic int subarraysDivByK(int[] arr, int K) {\n    int n = arr.length;\n    int res = 0;\n    int sum = 0;\n    Map map = new HashMap<>();\n    map.put(0,1);\n    for (int i = 0; i \n1. 题目描述2. 思路"},"partmore/":{"url":"partmore/","title":"LeetCode 1000+","keywords":"","body":""},"partmore/1371. 每个元音包含偶数次的最长子字符串.html":{"url":"partmore/1371. 每个元音包含偶数次的最长子字符串.html","title":"1371. 每个元音包含偶数次的最长子字符串","keywords":"","body":"1. 题目描述\n给你一个字符串 s ，请你返回满足以下条件的最长子字符串的长度：每个元音字母，即 'a'，'e'，'i'，'o'，'u' ，在子字符串中都恰好出现了偶数次。\n2. 思路\n这个题目涉及到的知识点很多：位运算，前缀和，Hash表，状态压缩(这是LeetCode的中等难度？)，自己第一次做也没有想到，看了题解后才慢慢理解的，其实涉及到的知识都不难，但整合到一起就很难想到了。\n这里先解释一下我的代码都干了些什么，之后在一步步解释为什么这样想。\npublic int findTheLongestSubstring(String s) {\n    //建立一个Hash表，Hash表存储的是某种状态第一次出现的位置。\n    int[] hash = new int[1 \n首先我们想，如果只看一个字符出现的次数是否为偶数次，应该可以想到用前缀和，统计[0,i]该字符出现的个数；找一个位置j，判断[0,j] - [0,i]是否为偶数，j - i的值就为出现偶数次该字符的长度，然后记录最大的值。但我们需要枚举i和j，时间复杂度仍然是O(n2)。\n我们可以想一下，我们没有必要统计它的准确数量，只要知道它是奇数个还是偶数个就好了，然后我们也没必要枚举i和j，只需要知道第一次出现奇数个的位置和最后出现奇数个的位置，第一次出现偶数个的位置和最后出现偶数个的位置，因为奇数减奇数为偶数，偶数减偶数为偶数，所以最长长度就是这两种位置中的最大值。这里就通过题目的出现偶数次这个条件进行了状态压缩。\n最后扩展到多个字符的情况，一个字符只有奇数和偶数两种状态，而两个字符会有四种状态(a奇数次b奇数次、a偶数次b奇数次、a奇数次b偶数次、a偶数次b偶数次)，五个元音字符会有2的5次方种状态。我们可以通过二进制来表示这些状态，例如偶数次就是0，奇数次就是1，如果出现了某个字符，我们可以让上一个状态和1进行异或运算，更新状态。5个字符应该5位二进制数表示，初始为00000。\n然后通过一个Hash表记录某种状态第一次出现的位置，然后遍历字符串找到最后一次出现的位置，记录最大值即可。对于(00000)这种状态，第一次出现的位置应该为-1，因为遍历字符串是从0开始的，上一个位置为-1，还没有任何字符出现，元音字母出现次数都为0，所以记录为-1。\n1. 题目描述2. 思路"},"partmore/1431. 拥有最多糖果的孩子.html":{"url":"partmore/1431. 拥有最多糖果的孩子.html","title":"1431. 拥有最多糖果的孩子","keywords":"","body":"1. 题目描述\n给你一个数组 candies 和一个整数 extraCandies ，其中 candies[i] 代表第 i 个孩子拥有的糖果数目。\n对每一个孩子，检查是否存在一种方案，将额外的 extraCandies 个糖果分配给孩子们之后，此孩子有 最多 的糖果。注意，允许有多个孩子同时拥有 最多 的糖果数目。\n2. 思路\n有点水的题目，找出数组的最大值，然后比较数组中每个元素加上extraCandies是否比最大值大即可。\npublic List kidsWithCandies(int[] candies, int extraCandies) {\n    int max = 0;\n    for (int i = 0; i  res = new ArrayList<> ();\n    for (int i = 0; i = max) {\n            res.add(true);\n        } else {\n            res.add(false);\n        }\n    }\n    return res;\n}\n\n1. 题目描述2. 思路"},"partmore/5410. 课程安排 IV.html":{"url":"partmore/5410. 课程安排 IV.html","title":"5410. 课程安排 IV","keywords":"","body":"1. 题目描述\n\n本题为LeetCode双周赛27的第三题\n\n你总共需要上 n 门课，课程编号依次为 0 到 n-1 。\n有的课会有直接的先修课程，比如如果想上课程 0 ，你必须先上课程 1 ，那么会以 [1,0] 数对的形式给出先修课程数对。\n给你课程总数 n 和一个直接先修课程数对列表 prerequisite 和一个查询对列表 queries 。\n对于每个查询对 queries[i] ，请判断 queries[i][0] 是否是 queries[i][1] 的先修课程。\n请返回一个布尔值列表，列表中每个元素依次分别对应 queries 每个查询对的判断结果。\n注意：如果课程 a 是课程 b 的先修课程且课程 b 是课程 c 的先修课程，那么课程 a 也是课程 c 的先修课程。\n2. 思路\n通过Floyd算法打表，建立任意节点i,j的连通关系，在查询时直接O(1)复杂度查询打好的表就可以了。\n关于Floyd算法，可以先参考这篇博客：https://blog.csdn.net/ljhandlwt/article/details/52096932\npublic List checkIfPrerequisite(int n, int[][] prerequisites, int[][] queries) {\n    boolean[][] dp = new boolean[n][n];\n    for (int[] p : prerequisites) {\n        dp[p[0]][p[1]] = true;\n    }\n\n    for (int k = 0; k  res = new ArrayList<> ();\n    for (int[] query : queries) {\n        res.add(dp[query[0]][query[1]]);\n    }\n    return res;\n}\n\n1. 题目描述2. 思路"},"partmore/5411. 摘樱桃 II.html":{"url":"partmore/5411. 摘樱桃 II.html","title":"5411. 摘樱桃 II","keywords":"","body":"1. 题目描述\n\n本题为LeetCode双周赛27的第四题\n\n给你一个 rows x cols 的矩阵 grid 来表示一块樱桃地。 grid 中每个格子的数字表示你能获得的樱桃数目。\n你有两个机器人帮你收集樱桃，机器人 1 从左上角格子 (0,0) 出发，机器人 2 从右上角格子 (0, cols-1) 出发。\n请你按照如下规则，返回两个机器人能收集的最多樱桃数目：\n\n从格子 (i,j) 出发，机器人可以移动到格子 (i+1, j-1)，(i+1, j) 或者 (i+1, j+1) 。\n当一个机器人经过某个格子时，它会把该格子内所有的樱桃都摘走，然后这个位置会变成空格子，即没有樱桃的格子。\n当两个机器人同时到达同一个格子时，它们中只有一个可以摘到樱桃。\n两个机器人在任意时刻都不能移动到 grid 外面。\n两个机器人最后都要到达 grid 最底下一行。\n\n2. 思路\n这个题和数塔题目类似，只不过从一个节点开始变成从两个节点同时开始，所以在动态规划方程上要多记录一种状态。\n我们定义DP[i] [j1] [j2] 为在第i行，两个机器人分别处于j1,j2列时的最大值。\nj1可以从 j1 - 1, j1, j1 + 1三个状态转移过来，同理j2也一样，所以总共对于j1,j2一个有9种状态，取其中的最大值即可。\n在枚举j1,j2时，要注意有些j1，j2的位置还并不能到达，例如在i = 1的时候，j1是不可能到2位置的，这些情况要排除掉。\npublic int cherryPickup(int[][] grid) {\n    int n = grid.length;\n    int m = grid[0].length;\n\n    int[][][] dp = new int[n][m][m];\n    dp[0][0][m - 1] = grid[0][0] + grid[0][m - 1];\n\n    for (int i = 1; i = m - len; j2--) {\n                int max = 0;\n                //这里的两个for循环是枚举能到达j1,j2的情况的，然后记录最大值\n                for (int k1 = -1; k1 = 0 && nj1 =0 && nj2 \n1. 题目描述2. 思路"},"others/":{"url":"others/","title":"Others","keywords":"","body":""},"others/和为S的连续正数序列.html":{"url":"others/和为S的连续正数序列.html","title":"和为S的连续正数序列","keywords":"","body":"1. 题目描述\n小明很喜欢数学,有一天他在做数学作业时,要求计算出9~16的和,他马上就写出了正确答案是100。但是他并不满足于此,他在想究竟有多少种连续的正数序列的和为100(至少包括两个数)。没多久,他就得到另一组连续正数和为100的序列:18,19,20,21,22。现在把问题交给你,你能不能也很快的找出所有和为S的连续正数序列? Good Luck!\n2. 思路\n2.1. 滑动窗口(双指针)\n初始滑动窗口大小为1，开始(left)为1，结束(right)为1，通过等差数列求和公式可以求得滑动窗口的和，与目标target进行比较，如果等于target，则创建一个数组保存答案，如果小于target则说明应该扩大滑动窗口的和，则增加right，如果大于target，则说明应该减少滑动窗口的和，则增加left。\nclass Solution {\n    public int[][] findContinuousSequence(int target) {\n        List res = new ArrayList<>();\n        int left = 1;\n        int right = 1;\n        int sum = 1;//滑动窗口[left,right]的和\n        //当(left  target) {\n                sum -= left;\n                left++;\n            } else if (sum \n2.2. 通过求和公式来解\n求和公式\n\n(a1 + a1 + n - 1) * n / 2 = target\n\n化简得\n\n2  a1  n + n  n - n = 2  target\n\ntarget已知，此时只要遍历a1或者遍历n，都可求得另一个的值，只要判断是否为正整数就可以判断是否存在答案。\n如果选择遍历a1，在求n的过程中要用到sqrt，如果遍历n,则不需要，所以选择遍历n。\nclass Solution {\n    public int[][] findContinuousSequence(int target) {\n        List list = new ArrayList<>();\n        for (int n = 2; 2 * target + n - n * n > 0; n++) {\n            int a1 = 2 * target + n - n * n;\n            if (a1 % (2 * n) == 0) {\n                a1 /= (2 * n);\n                int arr[] = new int[n];\n                arr[0] = a1;\n                for (int i = 1; i \n1. 题目描述2. 思路2.1. 滑动窗口(双指针)2.2. 通过求和公式来解"},"others/求1+2+…+n.html":{"url":"others/求1+2+…+n.html","title":"求1+2+…+n","keywords":"","body":"1. 题目描述\n求 1+2+...+n ，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。\n2. 思路\n利用逻辑运算的短路性质，如果n > 0 && (n += sumNums(n - 1)) > 0这个逻辑运算中，n > 0为false，整个都可以确定为false，就没有必要判断(n += sumNums(n - 1)) > 0，里面的递归也就不会执行了，所以当n == 0时递归就结束了。\npublic int sumNums(int n) {\n    boolean flag = n > 0 && (n += sumNums(n - 1)) > 0;\n    return n;\n}\n\n1. 题目描述2. 思路"}}}